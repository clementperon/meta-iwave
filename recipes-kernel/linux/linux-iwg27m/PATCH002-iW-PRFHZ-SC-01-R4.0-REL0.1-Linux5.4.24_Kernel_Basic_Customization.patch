diff -Naur A/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dts B/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dts
--- A/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dts	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dts	2020-08-13 12:12:47.174889266 +0530
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) 2020 iWave Systems Technologies Pvt. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/dts-v1/;
+
+#include "imx8qm-iwg27m.dtsi"
diff -Naur A/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dtsi B/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dtsi
--- A/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dtsi	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm64/boot/dts/freescale/imx8qm-iwg27m.dtsi	2020-08-27 18:30:28.347736639 +0530
@@ -0,0 +1,1722 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (c) 2020 iWave Systems Technologies Pvt. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <dt-bindings/usb/pd.h>
+#include "imx8qm.dtsi"
+
+/ {
+	model = "iW-RainboW-G27D-i.MX8QM-SMARC";
+	compatible = "fsl,imx8qm-iwg27m", "fsl,imx8qm";
+
+	chosen {
+                stdout-path = &lpuart4;
+	};
+
+	aliases {
+		serial4 = &lpuart4;
+	};
+
+	memory@80000000 {
+		device_type = "memory";
+		reg = <0x00000000 0x80000000 0 0x40000000>;
+	};
+
+	clocks {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		audioclk: ext26Mz { /* SGTL5000: External Audio Clock */
+			compatible = "fixed-clock";
+			clock-frequency = <26000000>;
+			reg=<0>;
+			#clock-cells = <0>;
+		};
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		decoder_boot: decoder_boot@0x84000000 {
+			no-map;
+			reg = <0 0x84000000 0 0x2000000>;
+		};
+		encoder_boot: encoder_boot@0x86000000 {
+			no-map;
+			reg = <0 0x86000000 0 0x400000>;
+		};
+		/*
+		 * reserved-memory layout
+		 * 0x8800_0000 ~ 0x8FFF_FFFF is reserved for M4
+		 * Shouldn't be used at A core and Linux side.
+		 *
+		 */
+		m4_reserved: m4@0x88000000 {
+			no-map;
+			reg = <0 0x88000000 0 0x8000000>;
+		};
+		rpmsg_reserved: rpmsg@0x90000000 {
+			no-map;
+			reg = <0 0x90200000 0 0x200000>;
+		};
+		decoder_rpc: decoder_rpc@0x92000000 {
+			no-map;
+			reg = <0 0x92000000 0 0x200000>;
+		};
+		encoder_rpc: encoder_rpc@0x92200000 {
+			no-map;
+			reg = <0 0x92200000 0 0x200000>;
+		};
+		dsp_reserved: dsp@0x92400000 {
+			no-map;
+			reg = <0 0x92400000 0 0x2000000>;
+		};
+		encoder_reserved: encoder_reserved@0x94400000 {
+			no-map;
+			reg = <0 0x94400000 0 0x800000>;
+		};
+		ts_boot: ts_boot@0x95000000 {
+			no-map;
+			reg = <0 0x95000000 0 0x400000>;
+		};
+
+		/* global autoconfigured region for contiguous allocations */
+		linux,cma {
+			compatible = "shared-dma-pool";
+			reusable;
+			size = <0 0x3c000000>;
+			alloc-ranges = <0 0x96000000 0 0x3c000000>;
+			linux,cma-default;
+		};
+
+	};
+
+	unused_gpios: unused_gpios { /* GPIO: Setting Unused GPIOs as input pins */
+		compatible = "iwave,unused-gpios";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_unused_gpio>;
+		status = "okay";  
+	};
+
+	reg_can0_stby: regulator-can-stby0 { /* CAN: CAN0 Standby Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "CAN0_STBY_1P8V";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+		gpio = <&lsio_gpio1 27 GPIO_ACTIVE_HIGH>;
+		regulator-always-on;
+	};
+
+	reg_can1_stby: regulator-can-stby1 { /* CAN: CAN1 Standby Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "CAN1_STBY_1P8V";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+		gpio = <&lsio_gpio1 30 GPIO_ACTIVE_HIGH>;
+		regulator-always-on;
+	};
+
+	reg_ssd_vmmc: regulator-ssd-vmmc { /* USDHC2: 3.3V VDD Enable Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "VDD_USDHC2_3P3V";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&lsio_gpio1 19 GPIO_ACTIVE_HIGH>;
+		enable-active-high;
+		regulator-always-on;
+	};
+
+	reg_usb_en: regulator-usb-en { /* USB: USB Hub Power Enable Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "VDD_USB_1P2V";
+		regulator-min-microvolt = <1200000>;
+		regulator-max-microvolt = <1200000>;
+		regulator-type = "voltage";
+		gpio = <&lsio_gpio1 21 GPIO_ACTIVE_HIGH>;
+		enable-active-high;
+		regulator-always-on;
+	};
+
+	reg_3p3v: 3p3v { /* Regulator: Fixed 3.3V Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "3P3V";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		regulator-always-on;
+		regulator-boot-on;
+	};
+
+	reg_1p5v: 1p5v { /* Regulator: Fixed 1.5V Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "1P5V";
+		regulator-min-microvolt = <1500000>;
+		regulator-max-microvolt = <1500000>;
+		regulator-always-on;
+	};
+
+	reg_1p8v: 1p8v { /* Regulator: Fixed 1.8V Regulator */
+		compatible = "regulator-fixed";
+		regulator-name = "1P8V";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+		regulator-always-on;
+	};
+
+	vcc5v0_typec: vcc5v0-typec-regulator {
+		compatible = "regulator-fixed";
+		pinctrl-names = "default";
+		regulator-name = "vcc5v0_typec";
+		regulator-always-on;
+		vin-supply = <&vcc5v0_usb>;
+	};
+
+	vcc5v0_usb: vcc5v0-usb {
+		compatible = "regulator-fixed";
+		regulator-name = "vcc5v0_usb";
+		regulator-always-on;
+		regulator-boot-on;
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+	};
+
+	cbtl04gp {
+		compatible = "nxp,cbtl04gp";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_typec_mux>;
+		switch-gpios = <&lsio_gpio4 11 GPIO_ACTIVE_LOW>;
+		orientation-switch;
+
+		port {
+			usb_data_ss: endpoint {
+			remote-endpoint = <&typec_con_ss>;
+			};
+		};
+        };
+
+	sound { /* SGTL5000: Audio Codec */
+		compatible = "fsl,imx-audio-sgtl5000";
+		model = "sgtl5000-audio";
+		ssi-controller = <&sai1>;
+		audio-codec = <&codec>;
+		audio-routing = "MIC_IN", "Mic Jack",
+				"Mic Jack", "Mic Bias",
+				"Headphone Jack", "HP_OUT",
+				"LINE_IN", "Line In Jack";
+	};
+
+	sound-hdmi-tx { /* HDMI: HDMI TX Audio */
+		compatible = "fsl,imx-audio-cdnhdmi";
+		model = "imx-audio-hdmi-tx";
+		audio-cpu = <&sai5>;
+		protocol = <1>;
+		hdmi-out;
+		status = "disabled";
+	};
+
+	lvds1_panel { /* LVDS1: LVDS panel */
+		compatible = "powertrip,ph128800t004-zhc";
+		backlight = <&lvds1_backlight>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_lvds1>;
+		power-supply = <&reg_1p8v>;
+		enable-gpios = <&lsio_gpio5 0 GPIO_ACTIVE_HIGH>;
+		status = "disabled";
+
+		port {
+			panel_lvds1_in: endpoint {
+				remote-endpoint = <&lvds1_out>;
+			};
+		};
+	};
+
+	lvds1_backlight: lvds1_backlight { /* LVDS1: LVDS Backlight Enable */
+		compatible = "pwm-backlight";
+		pwms = <&pwm3_lpcg 0 100000 0>;
+		power-supply = <&reg_1p8v>;
+
+		brightness-levels = < 0  1  2  3  4  5  6  7  8  9
+				     10 11 12 13 14 15 16 17 18 19
+				     20 21 22 23 24 25 26 27 28 29
+				     30 31 32 33 34 35 36 37 38 39
+				     40 41 42 43 44 45 46 47 48 49
+				     50 51 52 53 54 55 56 57 58 59
+				     60 61 62 63 64 65 66 67 68 69
+				     70 71 72 73 74 75 76 77 78 79
+				     80 81 82 83 84 85 86 87 88 89
+				     90 91 92 93 94 95 96 97 98 99
+				    100>;
+		default-brightness-level = <100>;
+		status = "disabled";
+	};
+
+	/* SoC Board Setttings : Setting Board Configuration GPIOs */
+	iwg27m_common {
+		compatible = "iw,iwg27m-com";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_board_cfg>;
+		som-rev-gpios = <&lsio_gpio1 5 0>, <&lsio_gpio1 13 0>, <&lsio_gpio1 12 0>,  <&lsio_gpio1 11 0>,
+			<&lsio_gpio0 6 0>, <&lsio_gpio0 7 0>, <&lsio_gpio0 11 0>;
+		status = "okay";
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		vdev0vring0: vdev0vring0@90000000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90000000 0 0x8000>;
+			no-map;
+		};
+
+		vdev0vring1: vdev0vring1@90008000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90008000 0 0x8000>;
+			no-map;
+		};
+
+		vdev1vring0: vdev1vring0@90010000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90010000 0 0x8000>;
+			no-map;
+		};
+
+		vdev1vring1: vdev1vring1@90018000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90018000 0 0x8000>;
+			no-map;
+		};
+
+		vdevbuffer: vdevbuffer {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90400000 0 0x100000>;
+			no-map;
+		};
+
+		vdev2vring0: vdev0vring0@90100000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90100000 0 0x8000>;
+			no-map;
+		};
+
+		vdev2vring1: vdev0vring1@90108000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90108000 0 0x8000>;
+			no-map;
+		};
+
+		vdev3vring0: vdev1vring0@90110000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90110000 0 0x8000>;
+			no-map;
+		};
+
+		vdev3vring1: vdev1vring1@90118000 {
+                        compatible = "shared-dma-pool";
+			reg = <0 0x90118000 0 0x8000>;
+			no-map;
+		};
+	};
+};
+
+&lsio_gpio0 {
+	status = "okay";
+};
+
+&lsio_gpio1 {
+	status = "okay";
+};
+
+&lsio_gpio2 {
+	status = "okay";
+};
+
+&lsio_gpio3 {
+	status = "okay";
+};
+
+&lsio_gpio4 {
+	status = "okay";
+};
+
+&lsio_gpio5 {
+	status = "okay";
+};
+
+&hsio_refb_clk {
+	status = "disabled";
+};
+
+&sai5 {
+	status = "okay";
+};
+
+&sai5_lpcg {
+        status = "okay";
+};
+
+&irqsteer_hdmi {
+	status = "disabled";
+};
+
+&hdmi_lpcg_i2c0 {
+	status = "okay";
+};
+
+&hdmi_lpcg_lis_ipg {
+	status = "okay";
+};
+
+&hdmi_lpcg_pwm_ipg {
+	status = "okay";
+};
+
+&hdmi_lpcg_i2s {
+	status = "okay";
+};
+
+&hdmi_lpcg_gpio_ipg {
+	status = "okay";
+};
+
+&hdmi_lpcg_msi_hclk {
+	status = "okay";
+};
+
+&hdmi_lpcg_pxl {
+	status = "okay";
+};
+
+&hdmi_lpcg_phy {
+	status = "okay";
+};
+
+&hdmi_lpcg_apb_mux_csr {
+	status = "okay";
+};
+
+&hdmi_lpcg_apb_mux_ctrl {
+	status = "okay";
+};
+
+&hdmi_lpcg_apb {
+	status = "okay";
+};
+
+&hdmi {
+        compatible = "cdn,imx8qm-hdmi";
+        lane-mapping = <0x93>;
+	/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+	fsl,no_edid;
+	status = "disabled";
+};
+
+&dc0_pc {
+	status = "okay";
+};
+
+&dc0_prg1 {
+	status = "okay";
+};
+
+&dc0_prg2 {
+	status = "okay";
+};
+
+&dc0_prg3 {
+	status = "okay";
+};
+
+&dc0_prg4 {
+	status = "okay";
+};
+
+&dc0_prg5 {
+	status = "okay";
+};
+
+&dc0_prg6 {
+	status = "okay";
+};
+
+&dc0_prg7 {
+	status = "okay";
+};
+
+&dc0_prg8 {
+	status = "okay";
+};
+
+&dc0_prg9 {
+	status = "okay";
+};
+
+&dc0_dpr1_channel1 {
+	status = "okay";
+};
+
+&dc0_dpr1_channel2 {
+	status = "okay";
+};
+
+&dc0_dpr1_channel3 {
+	status = "okay";
+};
+
+&dc0_dpr2_channel1 {
+	status = "okay";
+};
+
+&dc0_dpr2_channel2 {
+	status = "okay";
+};
+
+&dc0_dpr2_channel3 {
+	status = "okay";
+};
+
+&dpu1 {
+	status = "okay";
+};
+
+&dsp {
+	compatible = "fsl,imx8qm-dsp-v1";
+	status = "okay";
+};
+
+&sec_jr3 {
+	status = "disabled";
+};
+
+&asrc0 {
+	fsl,asrc-rate  = <48000>;
+	status = "okay";
+};
+
+&sai1 { /* SGTL5000: Serial Audio Interface for SGTL5000 Audio Codec */
+	assigned-clocks = <&clk IMX_SC_R_AUDIO_PLL_0 IMX_SC_PM_CLK_PLL>,
+		<&clk IMX_SC_R_AUDIO_PLL_0 IMX_SC_PM_CLK_SLV_BUS>,
+		<&clk IMX_SC_R_AUDIO_PLL_0 IMX_SC_PM_CLK_MST_BUS>,
+		<&sai1_lpcg 0>; /* FIXME: should be sai1, original code is 0 */
+	assigned-clock-rates = <786432000>, <49152000>, <12288000>, <49152000>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sai1>;
+	status = "okay";
+};
+
+&mipi0_dphy { /* MIPI_DSI1: MIPI DSI Phy */
+        status = "disabled";
+};
+
+&mipi0_dsi_host { /* MIPI_DSI1: MIPI DSI Host */
+	fsl,clock-drop-level = <2>;
+	status = "disabled";
+
+	panel@0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		compatible = "raydium,rm67198";
+		pinctrl-0 = <&pinctrl_mipi_dsi>;
+		pinctrl-names = "default";
+		reset-gpios = <&lsio_gpio0 3 GPIO_ACTIVE_LOW>;
+		reg = <0>;
+		dsi-lanes = <4>;
+		video-mode = <2>;
+		width-mm = <68>;
+		height-mm = <121>;
+		v3p3-supply = <&reg_3p3v>;
+		v1p8-supply = <&reg_1p8v>;
+
+		port@0 {
+			reg = <0>;
+			panel0_in: endpoint {
+				remote-endpoint = <&mipi0_panel_out>;
+			};
+		};
+	};
+
+	ports {
+		port@1 {
+			reg = <1>;
+			mipi0_panel_out: endpoint {
+				remote-endpoint = <&panel0_in>;
+			};
+		};
+	};
+};
+
+&dc1_pc {
+	status = "okay";
+};
+
+&dc1_prg1 {
+	status = "okay";
+};
+
+&dc1_prg2 {
+	status = "okay";
+};
+
+&dc1_prg3 {
+	status = "okay";
+};
+
+&dc1_prg4 {
+	status = "okay";
+};
+
+&dc1_prg5 {
+	status = "okay";
+};
+
+&dc1_prg6 {
+	status = "okay";
+};
+
+&dc1_prg7 {
+	status = "okay";
+};
+
+&dc1_prg8 {
+	status = "okay";
+};
+
+&dc1_prg9 {
+	status = "okay";
+};
+
+&dc1_dpr1_channel1 {
+	status = "okay";
+};
+
+&dc1_dpr1_channel2 {
+	status = "okay";
+};
+
+&dc1_dpr1_channel3 {
+	status = "okay";
+};
+
+&dc1_dpr2_channel1 {
+	status = "okay";
+};
+
+&dc1_dpr2_channel2 {
+	status = "okay";
+};
+
+&dc1_dpr2_channel3 {
+	status = "okay";
+};
+
+&dpu2 {
+	status = "okay";
+};
+
+&pwm3_lpcg { /* LVDS1: LVDS PWM3 Control */
+	pinctrl-names = "default";
+	#pwm-cells = <2>;
+	pinctrl-0 = <&pinctrl_lvds1_pwm3_lpcg>;
+	status = "disabled";
+};
+
+&ldb2_phy { /* LVDS1: LVDS LDB Phy */
+	status = "disabled";
+};
+
+&ldb2 { /* LVDS1: LVDS Channel-0 Port Enable */
+	status = "disabled";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <24>;
+		status = "disabled";
+		port@1 {
+			reg = <1>;
+
+			lvds1_out: endpoint {
+				remote-endpoint = <&panel_lvds1_in>;
+			};
+		};
+	};
+};
+
+&lpspi3 { /* LPSPI3: SPI Flash Device */
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_lpspi3>;
+        cs-gpios = <&lsio_gpio2 20 GPIO_ACTIVE_LOW>;
+        fsl,spi-num-chipselects = <1>;
+        assigned-clock-rates = <80000000>;
+        #address-cells = <1>;
+        #size-cells = <0>;
+	status = "okay";
+
+	flash1: spi@0 { /* SST25WF020A SPI Flash */
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "jedec,spi-nor", "is25wp016d";
+                spi-max-frequency = <40000000>;
+                reg = <0>;
+                spi-tx-bus-width = <1>;
+                spi-rx-bus-width = <1>;
+                m25p,fast-read;
+		status = "okay";
+	};
+};
+
+&dma_subsys {
+	lpuart4: serial@5a0a0000 {
+		compatible = "fsl,imx8qm-lpuart", "fsl,imx8qxp-lpuart";
+		reg = <0x5a0a0000 0x1000>;
+		interrupts = <GIC_SPI 349 IRQ_TYPE_LEVEL_HIGH>;
+		interrupt-parent = <&gic>;
+		clocks = <&uart4_lpcg 1>, <&uart4_lpcg 0>;
+		clock-names = "ipg", "baud";
+		assigned-clocks = <&clk IMX_SC_R_UART_4 IMX_SC_PM_CLK_PER>;
+		assigned-clock-rates = <80000000>;
+		power-domains = <&pd IMX_SC_R_UART_4>;
+		power-domain-names = "uart";
+		dma-names = "tx","rx";
+		dmas = <&edma2 21 0 0>,
+			<&edma2 20 0 1>;
+	};
+};
+
+&lpuart0 { /* LPUART0: DATA UART */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lpuart0>;
+	dma-names = "tx","rx";
+	power-domains = <&pd IMX_SC_R_UART_0>;
+	dmas = <&edma2 13 0 0>,
+	       <&edma2 12 0 1>;
+	status = "okay";
+};
+
+&lpuart1 { /* LPUART1: Bluetooth */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lpuart1>;
+	port-number = <1>;
+	status = "okay";
+};
+
+&lpuart3 { /* LPUART3: DATA UART */
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_lpuart3>;
+	power-domains = <&pd IMX_SC_R_UART_3>;
+	dmas = <&edma2 19 0 0>,
+	       <&edma2 18 0 1>;
+        status = "okay";
+};
+
+&lpuart4 { /* LPUART4: Debug UART */
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_lpuart4>;
+	status = "okay";
+};
+
+&flexcan1 { /* CAN: FLEXCAN1 */
+	pinctrl-names = "default";
+	compatible = "fsl,imx8qm-flexcan"; 
+	pinctrl-0 = <&pinctrl_flexcan1>;
+	xceiver-supply = <&reg_can0_stby>;
+	status = "okay";
+};
+
+&flexcan2 { /* CAN: FLEXCAN2 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan2>;
+	compatible = "fsl,imx8qm-flexcan"; 
+	xceiver-supply = <&reg_can1_stby>;
+	status = "okay";
+};
+
+&fec1 { /* FEC1: AR8031 PHY ENET 0 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_fec1>;
+	phy-mode = "rgmii-txid";
+	phy-handle = <&ethphy0>;
+	phy-reset-gpios = <&lsio_gpio4 31 GPIO_ACTIVE_LOW>;
+	fsl,magic-packet;
+	fsl,mii-exclusive;
+	nvmem-cells = <&fec_mac0>;
+	nvmem-cell-names = "mac-address";
+	fsl,rgmii_rxc_dly;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy0: ethernet-phy@0 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <4>;
+			at803x,eee-disabled;
+			at803x,vddio-1p8v;
+		};
+	};
+};
+
+&fec2 { /* FEC2: AR8031 PHY ENET 1 */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_fec2>;
+	phy-mode = "rgmii-txid";
+	phy-handle = <&ethphy1>;
+	phy-reset-gpios = <&lsio_gpio1 20 GPIO_ACTIVE_LOW>;
+	fsl,magic-packet;
+	fsl,mii-exclusive;
+	nvmem-cells = <&fec_mac1>;
+	nvmem-cell-names = "mac-address";
+	fsl,rgmii_rxc_dly;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ethphy1: ethernet-phy@1 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <5>;
+			at803x,eee-disabled;
+			at803x,vddio-1p8v;
+		};
+	};
+};
+
+&flexspi0 { /* FLEXSPI0: MT35XU512ABA Octa-SPI */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexspi0>;
+	#address-cells = <1>;
+	#size-cells = <0>;
+	fsl,spi-num-chipselects = <1>;
+	status = "disabled";
+
+	flash0: mt35xu512aba@0 {
+		reg = <0>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "jedec,spi-nor", "micron,mt35xu512aba";
+		spi-max-frequency = <133000000>;
+		spi-nor,ddr-quad-read-dummy = <8>;
+		spi-tx-bus-width = <4>;
+		spi-rx-bus-width = <4>;
+		status = "disabled";
+	};
+};
+
+&pciea{ /* PCIE: PCIEA SATA */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pciea>;
+	reset-gpio = <&lsio_gpio4 29 GPIO_ACTIVE_LOW>;
+	ext_osc = <1>;
+	epdev_on-supply = <&reg_3p3v>;
+	reserved-region = <&rpmsg_reserved>;
+	status = "okay";
+};
+
+&pcieb{ /* PCIE:  PCIEB SATA */
+	ext_osc = <1>;
+	epdev_on-supply = <&reg_3p3v>;
+	status = "okay";
+};
+
+&rpmsg0{
+	/*
+	 * 64K for one rpmsg instance:
+	 */
+	vdev-nums = <2>;
+	reg = <0x0 0x90000000 0x0 0x20000>;
+	memory-region = <&vdevbuffer>;
+	status = "disabled";
+};
+
+&rpmsg1{
+	/*
+	 * 64K for one rpmsg instance:
+	 */
+	vdev-nums = <2>;
+	reg = <0x0 0x90100000 0x0 0x20000>;
+	memory-region = <&vdevbuffer>;
+	status = "disabled";
+};
+
+&sata { /* SATA */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sata>;
+	sata-act-gpios = <&lsio_gpio1 18 GPIO_ACTIVE_LOW>;
+	fsl,phy-imp = <0x6c>;
+	ext_osc = <1>;
+	status = "okay";
+};
+
+&usbphy1 {
+	status = "okay";
+};
+
+&usbotg1 { /* USBOTG1: USB 2.0 OTG Device */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg1>;
+	srp-disable;
+	hnp-disable;
+	adp-disable;
+	otg-pwr-gpio = <&lsio_gpio4 3 GPIO_ACTIVE_LOW>;
+	dr_mode = "otg";
+	power-active-high;
+	disable-over-current;
+	status = "okay";
+};
+
+&usb3phynop1 {
+	status = "okay";
+};
+
+&usbotg3 { /* USBOTG3: USB Host */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg3>;
+	vusb-supply = <&reg_usb_en>;
+	dr_mode = "host";
+	status = "okay";
+};
+
+&usdhc1 { /* USDHC1: EMMC */
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	pinctrl-1 = <&pinctrl_usdhc1>;
+	pinctrl-2 = <&pinctrl_usdhc1>;
+	bus-width = <8>;
+	no-sd;
+	no-sdio;
+	non-removable;
+	status = "okay";
+};
+
+&usdhc2 { /* USDHC2: Standard SD */
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-1 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-2 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	bus-width = <4>;
+	no-1-8-v;
+	cd-gpios = <&lsio_gpio1 23 GPIO_ACTIVE_LOW>;
+	wp-gpios = <&lsio_gpio1 22 GPIO_ACTIVE_HIGH>;
+	vmmc-supply = <&reg_ssd_vmmc>;
+	status = "okay";
+};
+
+&usdhc3 { /* USDHC3: SDIO JODY-W2 WIFI */
+	pinctrl-names = "default","state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc3>, <&pinctrl_usdhc3_gpio>;
+	pinctrl-1 = <&pinctrl_usdhc3>, <&pinctrl_usdhc3_gpio>;
+	pinctrl-2 = <&pinctrl_usdhc3>, <&pinctrl_usdhc3_gpio>;
+	wifi-host-gpio = <&lsio_gpio3 12 GPIO_ACTIVE_HIGH>;
+	wifi-dev-gpio = <&lsio_gpio3 5 GPIO_ACTIVE_HIGH>;
+	bt-host-gpio = <&lsio_gpio3 0 GPIO_ACTIVE_HIGH>;
+	bt-dev-gpio = <&lsio_gpio2 27 GPIO_ACTIVE_HIGH>;
+	wl-en-gpio = <&lsio_gpio4 7 GPIO_ACTIVE_HIGH>;
+	bt-en-gpio = <&lsio_gpio2 30 GPIO_ACTIVE_HIGH>;
+	bus-width = <4>;
+	vmmc-supply = <&reg_3p3v>;
+	non-removable;
+	fsl,tuning-start-tap = <40>;
+        fsl,tuning-step= <2>;
+	wifi-host;
+	status = "okay";
+};
+
+&i2c1 { /* I2C: LPI2C1 */
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lpi2c1>;
+	clock-frequency = <400000>;
+	status = "okay";
+
+        fusb302: usb-typec@22 {
+		compatible = "fcs,fusb302";
+		reg = <0x22>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_type_c>;
+		fcs,int_n = <&lsio_gpio0 0 IRQ_TYPE_LEVEL_LOW>;
+		vbus-supply = <&vcc5v0_typec>;
+		status = "okay";
+
+		ports {
+			#address-cells = <1>;
+			#size-cells = <0>;
+
+			port@1 {
+				reg = <1>;
+			};
+		};
+
+		usb_con1: connector {
+			compatible = "usb-c-connector";
+			label = "USB-C";
+			power-role = "dual";
+			data-role = "dual";
+			try-power-role = "sink";
+			source-pdos = <PDO_FIXED(5000, 400, PDO_FIXED_DUAL_ROLE | PDO_FIXED_DATA_SWAP | PDO_FIXED_USB_COMM)>;
+			sink-pdos = <PDO_FIXED(5000, 400, PDO_FIXED_DUAL_ROLE | PDO_FIXED_DATA_SWAP | PDO_FIXED_USB_COMM)>;
+			op-sink-microwatt = <25000000>;
+
+			ports {
+				#address-cells = <1>;
+				#size-cells = <0>;
+
+				port@1 {
+					reg = <1>;
+					typec_con_ss: endpoint {
+						remote-endpoint = <&usb_data_ss>;
+					};
+				};
+			};
+		};
+	};
+
+	codec: sgtl5000@a { /* SGTL5000: Audio Codec */
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_hp_mic_detect>;
+		clocks = <&audioclk 0>;
+		VDDA-supply = <&reg_1p8v>;
+		VDDIO-supply = <&reg_1p8v>;
+		VDDD-supply = <&reg_1p5v>;
+		power-domains = <&pd IMX_SC_R_MCLK_OUT_0>;
+		hp-det-gpios = <&lsio_gpio0 2 GPIO_ACTIVE_LOW>;
+		mic-det-gpios = <&lsio_gpio0 5 GPIO_ACTIVE_LOW>;
+		status = "okay";
+	};
+};
+
+&irqsteer_lvds0 {
+	status = "okay";
+};
+
+&i2c1_lvds0 { /* I2C1 LVDS0: Touch I2C for B0 CPU */
+	reg = <0x56246000 0x4000>;
+	interrupts = <8>;
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_i2c1_lvds0>;
+	clock-frequency = <400000>;
+	status = "okay";
+
+	cst148@1a { /* Touch: Hynitron Touch panel (1080p display) */
+		compatible = "hynitron,cst1xx";
+		reg = <0x1a>;
+		interrupt-parent = <&lsio_gpio0>;
+		interrupts = <1 2>;
+		vdd_ana-supply = <&reg_3p3v>;
+		vcc_i2c-supply = <&reg_3p3v>;
+		hynitron,panel-coords = <0 1080 0 1920>;
+		hynitron,display-coords = <0 1080 0 1920>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_ts_active_iwg27m>;
+		hynitron,irq-gpio = <&lsio_gpio0 1 GPIO_ACTIVE_LOW>;
+		hynitron,rst-gpio = <&lsio_gpio0 10 GPIO_ACTIVE_LOW>;
+		report_type = <1>;
+		status = "okay";
+	};
+};
+
+/* Multimedia: Image Sensing Interface */
+&isi_0 {
+	status = "okay";
+
+	cap_device {
+		status = "okay";
+	};
+
+	m2m_device {
+		status = "okay";
+	};
+};
+
+&isi_1 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+/* HDMI: HDMI-RX */
+&isi_2 {
+	interface = <4 0 2>;  /* <Input MIPI_VCx Output>
+				Input:  0-DC0, 1-DC1, 2-MIPI CSI0, 3-MIPI CSI1, 4-HDMI, 5-MEM
+				VCx:    0-VC0, 1-VC1, 2-VC2, 3-VC3, MIPI CSI only
+				Output: 0-DC0, 1-DC1, 2-MEM */
+	 status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_3 {
+	/* For HDMI RX 4K chain buf */
+	interface = <4 0 2>;
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_4 {
+	status = "okay";
+
+	cap_device {
+		status = "okay";
+	};
+};
+
+&isi_5 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_6 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&isi_7 {
+	status = "disabled";
+
+	cap_device {
+		status = "disabled";
+	};
+};
+
+&irqsteer_csi0 {
+	status = "okay";
+};
+
+&mipi_csi_0 { /* MIPI_CSI0: OV5640 Camera */
+	#address-cells = <1>;
+	#size-cells = <0>;
+	status = "okay";
+
+	port@0 {
+		reg = <0>;
+		mipi_csi0_ep: endpoint {
+			remote-endpoint = <&ov5640_mipi_ep>;
+			data-lanes = <1 2>;
+			bus-type = <4>;
+		};
+	};
+};
+
+&jpegdec {
+       status = "okay";
+};
+
+&jpegenc {
+       status = "okay";
+};
+
+&i2c_mipi_csi0 { /* MIPI_CSI0: OV5640 Camera */
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default";
+	clock-frequency = <400000>;
+	status = "okay";
+
+	ov5640_mipi: ov5640_mipi@3c {
+		compatible = "ovti,ov5640";
+		reg = <0x3c>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_mipi_csi0>;
+		clocks = <&xtal24m>;
+		clock-names = "xclk";
+		mclk = <24000000>;
+		mclk_source = <0>;
+		mipi_csi;
+		status = "okay";
+		port {
+			ov5640_mipi_ep: endpoint {
+			remote-endpoint = <&mipi_csi0_ep>;
+			data-lanes = <1 2>;
+			clocks-lanes = <0>;
+			};
+		};
+	};
+};
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	imx8qm-iwg27m {
+		pinctrl_hog: hoggrp { /* SDHC VSELECT Pin Configuration */
+			fsl,pins = <
+				IMX8QM_USDHC1_VSELECT_CONN_USDHC1_VSELECT		0x00000021
+				IMX8QM_USDHC2_VSELECT_CONN_USDHC2_VSELECT		0x00000021
+			>;
+		};
+
+		pinctrl_fec1: fec1grp { /* Ethernet0: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_COMP_CTL_GPIO_1V8_3V3_ENET_ENETB_PAD		0x000014a0
+				IMX8QM_ENET0_MDC_CONN_ENET0_MDC				0x06000020
+				IMX8QM_ENET0_MDIO_CONN_ENET0_MDIO			0x06000020
+				IMX8QM_ENET0_RGMII_TX_CTL_CONN_ENET0_RGMII_TX_CTL	0x06000020
+				IMX8QM_ENET0_RGMII_TXC_CONN_ENET0_RGMII_TXC		0x06000020
+				IMX8QM_ENET0_RGMII_TXD0_CONN_ENET0_RGMII_TXD0		0x06000020
+				IMX8QM_ENET0_RGMII_TXD1_CONN_ENET0_RGMII_TXD1		0x06000020
+				IMX8QM_ENET0_RGMII_TXD2_CONN_ENET0_RGMII_TXD2		0x06000020
+				IMX8QM_ENET0_RGMII_TXD3_CONN_ENET0_RGMII_TXD3		0x06000020
+				IMX8QM_ENET0_RGMII_RXC_CONN_ENET0_RGMII_RXC		0x06000020
+				IMX8QM_ENET0_RGMII_RX_CTL_CONN_ENET0_RGMII_RX_CTL	0x06000020
+				IMX8QM_ENET0_RGMII_RXD0_CONN_ENET0_RGMII_RXD0		0x06000020
+				IMX8QM_ENET0_RGMII_RXD1_CONN_ENET0_RGMII_RXD1		0x06000020
+				IMX8QM_ENET0_RGMII_RXD2_CONN_ENET0_RGMII_RXD2		0x06000020
+				IMX8QM_ENET0_RGMII_RXD3_CONN_ENET0_RGMII_RXD3		0x06000020
+				IMX8QM_ENET0_REFCLK_125M_25M_CONN_ENET0_REFCLK_125M_25M	0x06000020
+				IMX8QM_PCIE_CTRL0_CLKREQ_B_LSIO_GPIO4_IO27		0x06000021 /* Ethernet0 Interrupt */
+				IMX8QM_PCIE_CTRL1_CLKREQ_B_LSIO_GPIO4_IO30		0x06000021 /* Ethernet0 Wake on LAN */
+				IMX8QM_PCIE_CTRL1_WAKE_B_LSIO_GPIO4_IO31		0x06000021 /* Ethernet0 Reset */
+			>;
+		};
+
+		pinctrl_fec2: fec2grp { /* Ethernet1: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_COMP_CTL_GPIO_1V8_3V3_ENET_ENETA_PAD		0x000014a0
+				IMX8QM_ENET1_MDC_CONN_ENET1_MDC				0x06000020
+				IMX8QM_ENET1_MDIO_CONN_ENET1_MDIO			0x06000020
+				IMX8QM_ENET1_RGMII_TX_CTL_CONN_ENET1_RGMII_TX_CTL	0x00000060
+				IMX8QM_ENET1_RGMII_TXC_CONN_ENET1_RGMII_TXC		0x00000060
+				IMX8QM_ENET1_RGMII_TXD0_CONN_ENET1_RGMII_TXD0		0x00000060
+				IMX8QM_ENET1_RGMII_TXD1_CONN_ENET1_RGMII_TXD1		0x00000060
+				IMX8QM_ENET1_RGMII_TXD2_CONN_ENET1_RGMII_TXD2		0x00000060
+				IMX8QM_ENET1_RGMII_TXD3_CONN_ENET1_RGMII_TXD3		0x00000060
+				IMX8QM_ENET1_RGMII_RXC_CONN_ENET1_RGMII_RXC		0x00000060
+				IMX8QM_ENET1_RGMII_RX_CTL_CONN_ENET1_RGMII_RX_CTL	0x00000060
+				IMX8QM_ENET1_RGMII_RXD0_CONN_ENET1_RGMII_RXD0		0x00000060
+				IMX8QM_ENET1_RGMII_RXD1_CONN_ENET1_RGMII_RXD1		0x00000060
+				IMX8QM_ENET1_RGMII_RXD2_CONN_ENET1_RGMII_RXD2		0x00000060
+				IMX8QM_ENET1_RGMII_RXD3_CONN_ENET1_RGMII_RXD3		0x00000060
+				IMX8QM_ENET1_REFCLK_125M_25M_CONN_ENET1_REFCLK_125M_25M	0x00000060
+				IMX8QM_MIPI_DSI1_I2C0_SCL_LSIO_GPIO1_IO20		0x06000021 /* Ethernet1 Reset */
+				IMX8QM_MIPI_DSI0_I2C0_SCL_LSIO_GPIO1_IO16		0x06000021 /* Ethernet1 Wake on LAN */
+				IMX8QM_MIPI_DSI0_I2C0_SDA_LSIO_GPIO1_IO17		0x06000021 /* Ethernet1 Interrupt */
+			>;
+		};
+
+		pinctrl_flexspi0: flexspi0grp { /* FLEXSPI: MT35XU512ABA Octa-SPI IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_QSPI0A_DATA0_LSIO_QSPI0A_DATA0			0x06000021
+				IMX8QM_QSPI0A_DATA1_LSIO_QSPI0A_DATA1			0x06000021
+				IMX8QM_QSPI0A_DATA2_LSIO_QSPI0A_DATA2			0x06000021
+				IMX8QM_QSPI0A_DATA3_LSIO_QSPI0A_DATA3			0x06000021
+				IMX8QM_QSPI0A_DQS_LSIO_QSPI0A_DQS			0x06000021
+				IMX8QM_QSPI0A_SS0_B_LSIO_QSPI0A_SS0_B			0x06000021
+				IMX8QM_QSPI0A_SS1_B_LSIO_QSPI0A_SS1_B			0x06000021
+				IMX8QM_QSPI0A_SCLK_LSIO_QSPI0A_SCLK			0x06000021
+				IMX8QM_QSPI0B_SCLK_LSIO_QSPI0B_SCLK			0x06000021
+				IMX8QM_QSPI0B_DATA0_LSIO_QSPI0B_DATA0			0x06000021
+				IMX8QM_QSPI0B_DATA1_LSIO_QSPI0B_DATA1			0x06000021
+				IMX8QM_QSPI0B_DATA2_LSIO_QSPI0B_DATA2			0x06000021
+				IMX8QM_QSPI0B_DATA3_LSIO_QSPI0B_DATA3			0x06000021
+				IMX8QM_QSPI0B_DQS_LSIO_QSPI0B_DQS			0x06000021
+				IMX8QM_QSPI0B_SS0_B_LSIO_QSPI0B_SS0_B			0x06000021
+				IMX8QM_QSPI0B_SS1_B_LSIO_QSPI0B_SS1_B			0x06000021
+			>;
+		};
+
+		pinctrl_lpspi3: lpspi3grp { /* LPSPI3: LPSPI3 IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SPI3_SCK_DMA_SPI3_SCK				0x0600004c
+				IMX8QM_SPI3_SDO_DMA_SPI3_SDO				0x0600004c
+				IMX8QM_SPI3_SDI_DMA_SPI3_SDI				0x0600004c
+				IMX8QM_SPI3_CS0_LSIO_GPIO2_IO20				0x00000021
+				IMX8QM_SPI3_CS1_DMA_SPI3_CS1				0x0600004c
+			>;
+		};
+
+		pinctrl_flexcan1: flexcan0grp { /* CAN: FLEXCAN1 IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_FLEXCAN0_TX_DMA_FLEXCAN0_TX			0x00000021
+				IMX8QM_FLEXCAN0_RX_DMA_FLEXCAN0_RX			0x00000021
+				IMX8QM_MIPI_CSI0_GPIO0_00_LSIO_GPIO1_IO27		0x00000021 /* FLEXCAN1 Power Down GPIO */
+			>;
+		};
+
+		pinctrl_flexcan2: flexcan1grp { /* CAN: FLEXCAN2 IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_FLEXCAN1_TX_DMA_FLEXCAN1_TX			0x00000021
+				IMX8QM_FLEXCAN1_RX_DMA_FLEXCAN1_RX			0x00000021
+				IMX8QM_MIPI_CSI1_GPIO0_00_LSIO_GPIO1_IO30		0x00000021 /* FLEXCAN2 Power Down GPIO */ 
+			>;
+		};
+
+		pinctrl_lpuart0: lpuart0grp { /* LPUART0: DATA UART IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_UART0_RX_DMA_UART0_RX				0x06000020
+				IMX8QM_UART0_TX_DMA_UART0_TX				0x06000020
+				IMX8QM_UART0_RTS_B_DMA_UART0_RTS_B			0x06000020
+				IMX8QM_UART0_CTS_B_DMA_UART0_CTS_B			0x06000020
+			>;
+		};
+
+		pinctrl_lpuart1: lpuart1grp { /* LPUART1: Bluetooth IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_UART1_RX_DMA_UART1_RX				0x06000020
+				IMX8QM_UART1_TX_DMA_UART1_TX				0x06000020
+				IMX8QM_UART1_CTS_B_DMA_UART1_CTS_B			0x06000020
+				IMX8QM_UART1_RTS_B_DMA_UART1_RTS_B			0x06000020
+			>;
+		};
+
+		pinctrl_lpuart3: lpuart3grp { /* LPUART3: Debug UART IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_M41_GPIO0_00_DMA_UART3_RX			0x06000020
+				IMX8QM_M41_GPIO0_01_DMA_UART3_TX			0x06000020
+			>;
+		};
+
+		pinctrl_lpuart4: lpuart4ggrp { /* LPUART4: Debug UART IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_M40_GPIO0_00_DMA_UART4_RX			0x06000020
+				IMX8QM_M40_GPIO0_01_DMA_UART4_TX			0x06000020
+			>;
+		};
+
+		pinctrl_sai1: sai1grp { /* SGTL5000: SAI Audio IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SAI1_RXD_AUD_SAI1_RXD				0xc600004c
+				IMX8QM_SAI1_TXC_AUD_SAI1_TXC				0xc600004c
+				IMX8QM_SAI1_TXD_AUD_SAI1_TXD				0xc600004c
+				IMX8QM_SAI1_TXFS_AUD_SAI1_TXFS				0xc600004c
+			>;
+		};
+
+		pinctrl_hp_mic_detect: hp_mic_detect { /* SGTL5000: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SIM0_IO_LSIO_GPIO0_IO02				0x00000021 /* HeadPhone Detect GPIO */
+				IMX8QM_SIM0_GPIO0_00_LSIO_GPIO0_IO05			0x00000021 /* MicroPhone Detect GPIO */
+				IMX8QM_MCLK_OUT0_AUD_ACM_MCLK_OUT0			0x0600004c
+			>;
+		};
+
+		pinctrl_lpi2c1: lpi2c1grp { /* I2C1: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_GPT0_CLK_DMA_I2C1_SCL				0xc600004c
+				IMX8QM_GPT0_CAPTURE_DMA_I2C1_SDA			0xc600004c
+			>;
+		};
+
+		pinctrl_i2c1_lvds0: i2c1_lvds0grp { /* I2C1_LVDS0: Touch IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_LVDS0_I2C0_SCL_LVDS0_I2C0_SCL			0xc600004c
+				IMX8QM_LVDS0_I2C0_SDA_LVDS0_I2C0_SDA			0xc600004c
+			>;
+		};
+
+		pinctrl_ts_active_iwg27m: touch { /* Touch: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SIM0_RST_LSIO_GPIO0_IO01				0x00000021 /* Touch IRQ GPIO */
+				IMX8QM_M41_I2C0_SCL_LSIO_GPIO0_IO10			0x00000021 /* Touch Reset GPIO */
+			>;
+		};
+
+		pinctrl_pciea: pcieagrp{ /* PCIE: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SIM0_POWER_EN_LSIO_GPIO0_IO04			0x00000021 /* PCIE W_DISABLE GPIO */
+				IMX8QM_PCIE_CTRL0_WAKE_B_LSIO_GPIO4_IO28		0x00000021 /* PCIE Wake GPIO */
+				IMX8QM_PCIE_CTRL0_PERST_B_LSIO_GPIO4_IO29		0x00000021 /* PCIE Reset GPIO */
+			>;
+		};
+
+		pinctrl_type_c: usbtypec { /* USB3.0: FUSB Type-C IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SIM0_CLK_LSIO_GPIO0_IO00				0x00000021 /* Type-C IRQ GPIO */
+			>;
+		};
+
+		pinctrl_typec_mux: usbtypec_ss { /* USB3.0: FUSB Type-C IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_USDHC2_WP_LSIO_GPIO4_IO11			0x00000021 /* Type-C USB SS select GPIO */
+			>;
+		};
+
+		pinctrl_usbotg1: usbotg1 { /* USBOTG1: USB OTG IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_USB_SS3_TC0_LSIO_GPIO4_IO03			0x00000021 /* USB2.0 OTG Power GPIO */
+			>;
+		};
+
+		pinctrl_usbotg3: usbotg3 { /* USBOTG3: USB Hub IOMUX Pin COnfiguration */
+			fsl,pins = <
+				IMX8QM_MIPI_DSI1_I2C0_SDA_LSIO_GPIO1_IO21		0x00000021 /* USB3.0 Hub Reset GPIO */
+			>;
+		};
+
+		pinctrl_usdhc1: usdhc1grp { /* USDHC1: EMMC IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_EMMC0_CLK_CONN_EMMC0_CLK				0x06000041
+				IMX8QM_EMMC0_CMD_CONN_EMMC0_CMD				0x00000021
+				IMX8QM_EMMC0_DATA0_CONN_EMMC0_DATA0			0x00000021
+				IMX8QM_EMMC0_DATA1_CONN_EMMC0_DATA1			0x00000021
+				IMX8QM_EMMC0_DATA2_CONN_EMMC0_DATA2			0x00000021
+				IMX8QM_EMMC0_DATA3_CONN_EMMC0_DATA3			0x00000021
+				IMX8QM_EMMC0_DATA4_CONN_EMMC0_DATA4			0x00000021
+				IMX8QM_EMMC0_DATA5_CONN_EMMC0_DATA5			0x00000021
+				IMX8QM_EMMC0_DATA6_CONN_EMMC0_DATA6			0x00000021
+				IMX8QM_EMMC0_DATA7_CONN_EMMC0_DATA7			0x00000021
+				IMX8QM_EMMC0_STROBE_CONN_EMMC0_STROBE			0x00000041
+				IMX8QM_EMMC0_RESET_B_CONN_EMMC0_RESET_B			0x00000021
+			>;
+		};
+
+		pinctrl_usdhc2_gpio: usdhc2grpgpio { /* USDHC2: Standard SD IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_MIPI_DSI1_GPIO0_00_LSIO_GPIO1_IO22		0x00000021 /* Standard SD Write Protect */
+				IMX8QM_MIPI_DSI1_GPIO0_01_LSIO_GPIO1_IO23		0x00000021 /* Standard SD Card Detect */
+				IMX8QM_MIPI_DSI0_GPIO0_01_LSIO_GPIO1_IO19		0x00000021 /* Standard SD Power Enable */
+			>;
+		};
+
+		pinctrl_usdhc2: usdhc2grp {
+			fsl,pins = <
+				IMX8QM_USDHC1_CLK_CONN_USDHC1_CLK			0x06000041
+				IMX8QM_USDHC1_CMD_CONN_USDHC1_CMD			0x00000021
+				IMX8QM_USDHC1_DATA0_CONN_USDHC1_DATA0			0x00000021
+				IMX8QM_USDHC1_DATA1_CONN_USDHC1_DATA1			0x00000021
+				IMX8QM_USDHC1_DATA2_CONN_USDHC1_DATA2			0x00000021
+				IMX8QM_USDHC1_DATA3_CONN_USDHC1_DATA3			0x00000021
+			>;
+		};
+
+		pinctrl_usdhc3_gpio: usdhc3grpgpio { /* USDHC3: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_ESAI0_TX2_RX3_LSIO_GPIO2_IO28			0x00000021 /* WIFI IRQ */
+				IMX8QM_ESAI0_TX3_RX2_LSIO_GPIO2_IO29			0x00000021 /* WIFI RST */
+				IMX8QM_ESAI0_TX4_RX1_LSIO_GPIO2_IO30			0x00000021 /* WIFI CORE_PDn */
+				IMX8QM_USDHC2_CD_B_LSIO_GPIO4_IO12			0x00000021 /* SD Card Detect GPIO */	
+				IMX8QM_SPI0_CS0_LSIO_GPIO3_IO05				0x00000021 /* WIFI WL_DEV_WAKE */
+                                IMX8QM_SAI1_RXC_LSIO_GPIO3_IO12				0x00000021 /* WIFI WL_HOST_WAKE */
+				IMX8QM_USDHC1_RESET_B_LSIO_GPIO4_IO07			0x00000021 /* WIFI PDn */
+				IMX8QM_ESAI0_TX1_LSIO_GPIO2_IO27			0x00000021 /* BT_DEV_WAKE */
+				IMX8QM_MCLK_IN0_LSIO_GPIO3_IO00				0x00000021 /* BT_HOST_WAKE */
+			>;
+		};
+
+		pinctrl_usdhc3: usdhc3grp {
+			fsl,pins = <
+				IMX8QM_USDHC2_CLK_CONN_USDHC2_CLK			0x06000041
+				IMX8QM_USDHC2_CMD_CONN_USDHC2_CMD			0x00000021
+				IMX8QM_USDHC2_DATA0_CONN_USDHC2_DATA0			0x00000021
+				IMX8QM_USDHC2_DATA1_CONN_USDHC2_DATA1			0x00000021
+				IMX8QM_USDHC2_DATA2_CONN_USDHC2_DATA2			0x00000021
+				IMX8QM_USDHC2_DATA3_CONN_USDHC2_DATA3			0x00000021
+			>;
+		};
+
+		pinctrl_lvds1: lvds1grp { /* LVDS1: LVDS panel IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_PCIE_CTRL1_PERST_B_LSIO_GPIO5_IO00		0x00000021 /* LVDS Power Enable GPIO */
+			>;
+		};
+
+		pinctrl_lvds1_pwm3_lpcg: lvds1pwm3_lpcggrp { /* LVDS1: LVDS PWM IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_GPT0_COMPARE_LSIO_PWM3_OUT			0x00000020
+			>;
+		};
+
+		pinctrl_mipi_csi0: mipicsi0grp{ /* MIPI_CSI0: Camera MCLOCK IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_MIPI_CSI0_MCLK_OUT_MIPI_CSI0_ACM_MCLK_OUT	0xC0000041
+			>;
+		};
+
+		pinctrl_mipi_dsi: mipidsi { /* MIPI_DSI: LCD IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_SIM0_PD_LSIO_GPIO0_IO03				0x00000021 /* MIPI-DSI Reset GPIO */
+			>;
+		};
+
+		pinctrl_sata: sata { /* SATA: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_MIPI_DSI0_GPIO0_00_LSIO_GPIO1_IO18		0x00000021 /* SATA ACT LED GPIO */
+			>;
+		};
+
+		pinctrl_board_cfg: brd_cfg { /* SoC Board Settings: IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_LVDS0_GPIO01_LSIO_GPIO1_IO05			0x00000021
+				IMX8QM_LVDS1_I2C0_SDA_LSIO_GPIO1_IO13			0x00000021
+				IMX8QM_LVDS1_I2C0_SCL_LSIO_GPIO1_IO12			0x00000021
+				IMX8QM_LVDS1_GPIO01_LSIO_GPIO1_IO11			0x00000021
+				IMX8QM_M40_I2C0_SCL_LSIO_GPIO0_IO06			0x00000021
+				IMX8QM_M40_I2C0_SDA_LSIO_GPIO0_IO07			0x00000021
+				IMX8QM_M41_I2C0_SDA_LSIO_GPIO0_IO11			0x00000021
+			>;
+		};
+
+		pinctrl_unused_gpio: unused_gpiogrp{ /* GPIO: Unused GPIOs IOMUX Pin Configuration */
+			fsl,pins = <
+				IMX8QM_LVDS0_GPIO00_LSIO_GPIO1_IO04			0x00000021
+				IMX8QM_LVDS0_I2C1_SCL_LSIO_GPIO1_IO08			0x00000021
+				IMX8QM_LVDS1_GPIO00_LSIO_GPIO1_IO10			0x00000021
+				IMX8QM_LVDS1_I2C1_SCL_LSIO_GPIO1_IO14			0x00000021
+				IMX8QM_LVDS1_I2C1_SDA_LSIO_GPIO1_IO15			0x00000021
+				IMX8QM_MIPI_CSI1_MCLK_OUT_LSIO_GPIO1_IO29		0x00000021
+				IMX8QM_MIPI_CSI1_I2C0_SCL_LSIO_GPIO2_IO00		0x00000021
+				IMX8QM_MIPI_CSI1_I2C0_SDA_LSIO_GPIO2_IO01		0x00000021
+				IMX8QM_HDMI_TX0_TS_SCL_LSIO_GPIO2_IO02			0x00000021
+				IMX8QM_HDMI_TX0_TS_SDA_LSIO_GPIO2_IO03			0x00000021
+				IMX8QM_ESAI1_FSR_LSIO_GPIO2_IO04			0x00000021
+				IMX8QM_ESAI1_FST_LSIO_GPIO2_IO05			0x00000021
+				IMX8QM_ESAI1_SCKR_LSIO_GPIO2_IO06			0x00000021
+				IMX8QM_ESAI1_SCKT_LSIO_GPIO2_IO07			0x00000021
+				IMX8QM_ESAI1_TX0_LSIO_GPIO2_IO08			0x00000021
+				IMX8QM_ESAI1_TX1_LSIO_GPIO2_IO09			0x00000021
+				IMX8QM_ESAI1_TX2_RX3_LSIO_GPIO2_IO10			0x00000021
+				IMX8QM_ESAI1_TX3_RX2_LSIO_GPIO2_IO11			0x00000021
+				IMX8QM_ESAI1_TX4_RX1_LSIO_GPIO2_IO12			0x00000021
+				IMX8QM_ESAI1_TX5_RX0_LSIO_GPIO2_IO13			0x00000021
+				IMX8QM_SPDIF0_RX_LSIO_GPIO2_IO14			0x00000021
+				IMX8QM_SPDIF0_TX_LSIO_GPIO2_IO15			0x00000021
+				IMX8QM_SPDIF0_EXT_CLK_LSIO_GPIO2_IO16			0x00000021
+				IMX8QM_ESAI0_FSR_LSIO_GPIO2_IO22			0x00000021
+				IMX8QM_ESAI0_SCKR_LSIO_GPIO2_IO24			0x00000021
+				IMX8QM_SPI0_SCK_LSIO_GPIO3_IO02				0x00000021
+				IMX8QM_SPI0_SDO_LSIO_GPIO3_IO03				0x00000021
+				IMX8QM_SPI0_SDI_LSIO_GPIO3_IO04				0x00000021
+				IMX8QM_SPI0_CS1_LSIO_GPIO3_IO06				0x00000021
+				IMX8QM_SPI2_CS1_LSIO_GPIO3_IO11				0x00000021
+				IMX8QM_SAI1_RXFS_LSIO_GPIO3_IO14			0x00000021
+				IMX8QM_ADC_IN4_LSIO_GPIO3_IO22				0x00000021
+				IMX8QM_ADC_IN5_LSIO_GPIO3_IO23				0x00000021
+				IMX8QM_ADC_IN6_LSIO_GPIO3_IO24				0x00000021
+				IMX8QM_ADC_IN7_LSIO_GPIO3_IO25				0x00000021
+				IMX8QM_MLB_SIG_LSIO_GPIO3_IO26				0x00000021
+				IMX8QM_MLB_CLK_LSIO_GPIO3_IO27				0x00000021
+				IMX8QM_MLB_DATA_LSIO_GPIO3_IO28				0x00000021
+				IMX8QM_FLEXCAN2_RX_LSIO_GPIO4_IO01			0x00000021
+				IMX8QM_FLEXCAN2_TX_LSIO_GPIO4_IO02			0x00000021
+				IMX8QM_USB_SS3_TC2_LSIO_GPIO4_IO05			0x00000021
+				IMX8QM_USDHC2_RESET_B_LSIO_GPIO4_IO09			0x00000021
+				IMX8QM_QSPI1A_SS0_B_LSIO_GPIO4_IO19			0x00000021
+				IMX8QM_QSPI1A_SS1_B_LSIO_GPIO4_IO20			0x00000021
+				IMX8QM_QSPI1A_SCLK_LSIO_GPIO4_IO21			0x00000021
+				IMX8QM_QSPI1A_DQS_LSIO_GPIO4_IO22			0x00000021
+				IMX8QM_QSPI1A_DATA3_LSIO_GPIO4_IO23			0x00000021
+				IMX8QM_QSPI1A_DATA2_LSIO_GPIO4_IO24			0x00000021
+				IMX8QM_QSPI1A_DATA1_LSIO_GPIO4_IO25			0x00000021
+				IMX8QM_QSPI1A_DATA0_LSIO_GPIO4_IO26			0x00000021
+				IMX8QM_USB_HSIC0_DATA_LSIO_GPIO5_IO01			0x00000021
+				IMX8QM_USB_HSIC0_STROBE_LSIO_GPIO5_IO02			0x00000021
+				IMX8QM_USDHC1_DATA4_LSIO_GPIO5_IO19			0x00000021
+				IMX8QM_USDHC1_DATA5_LSIO_GPIO5_IO20			0x00000021
+				IMX8QM_USDHC1_DATA6_LSIO_GPIO5_IO21			0x00000021
+				IMX8QM_USDHC1_DATA7_LSIO_GPIO5_IO22			0x00000021
+			>;
+		};
+	};
+};
+
+&thermal_zones { /* Thermal Sensor Zone */
+	pmic-thermal0 {
+		polling-delay-passive = <250>;
+		polling-delay = <2000>;
+		thermal-sensors = <&tsens IMX_SC_R_PMIC_0>;
+		trips {
+			pmic_alert0: trip0 {
+				temperature = <110000>;
+				hysteresis = <2000>;
+				type = "passive";
+			};
+			pmic_crit0: trip1 {
+				temperature = <125000>;
+				hysteresis = <2000>;
+				type = "critical";
+			};
+		};
+		cooling-maps {
+			map0 {
+				trip = <&pmic_alert0>;
+				cooling-device =
+				<&A53_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+				<&A53_1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+				<&A53_2 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+				<&A53_3 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+				<&A72_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+				<&A72_1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+			};
+		};
+	};
+};
+
+/* Graphics Processing Unit: GPU 3D,2D */
+&gpu_3d0 {
+	status = "okay";
+};
+
+&gpu_3d1 {
+	status = "okay";
+};
+
+&imx8_gpu_ss {
+	status = "okay";
+};
+
+&mu_m0{
+	interrupts = <GIC_SPI 472 IRQ_TYPE_LEVEL_HIGH>;
+};
+
+&mu1_m0{
+	interrupts = <GIC_SPI 473 IRQ_TYPE_LEVEL_HIGH>;
+};
+
+&mu2_m0{
+	interrupts = <GIC_SPI 474 IRQ_TYPE_LEVEL_HIGH>;
+	status = "okay";
+};
+
+&mu3_m0{
+	interrupts = <GIC_SPI 475 IRQ_TYPE_LEVEL_HIGH>;
+	status = "okay";
+};
+
+&vpu_decoder {
+	compatible = "nxp,imx8qm-b0-vpudec";
+	boot-region = <&decoder_boot>;
+	rpc-region = <&decoder_rpc>;
+	reg-csr = <0x2d080000>;
+	core_type = <2>;
+	status = "okay";
+};
+
+&vpu_ts {
+	compatible = "nxp,imx8qm-b0-vpu-ts";
+	boot-region = <&ts_boot>;
+	reg-csr = <0x2d0b0000>;
+	status = "okay";
+};
+
+&vpu_encoder {
+	compatible = "nxp,imx8qm-b0-vpuenc";
+	boot-region = <&encoder_boot>;
+	rpc-region = <&encoder_rpc>;
+	reserved-region = <&encoder_reserved>;
+	reg-rpc-system = <0x40000000>;
+	resolution-max = <1920 1920>;
+	power-domains = <&pd IMX_SC_R_VPU_ENC_0>, <&pd IMX_SC_R_VPU_ENC_1>,
+			<&pd IMX_SC_R_VPU>;
+	power-domain-names = "vpuenc1", "vpuenc2", "vpu";
+	mbox-names = "enc1_tx0", "enc1_tx1", "enc1_rx",
+		     "enc2_tx0", "enc2_tx1", "enc2_rx";
+	mboxes = <&mu1_m0 0 0
+		  &mu1_m0 0 1
+		  &mu1_m0 1 0
+		  &mu2_m0 0 0
+		  &mu2_m0 0 1
+		  &mu2_m0 1 0>;
+	status = "okay";
+
+	vpu_enc_core0: core0@1020000 {
+		compatible = "fsl,imx8-mu1-vpu-m0";
+		reg = <0x1020000 0x20000>;
+		reg-csr = <0x1090000 0x10000>;
+		interrupts = <GIC_SPI 473 IRQ_TYPE_LEVEL_HIGH>;
+		fsl,vpu_ap_mu_id = <17>;
+		fw-buf-size = <0x200000>;
+		rpc-buf-size = <0x80000>;
+		print-buf-size = <0x80000>;
+	};
+
+	vpu_enc_core1: core1@1040000 {
+		compatible = "fsl,imx8-mu2-vpu-m0";
+		reg = <0x1040000 0x20000>;
+		reg-csr = <0x10A0000 0x10000>;
+		interrupts = <GIC_SPI 474 IRQ_TYPE_LEVEL_HIGH>;
+		fsl,vpu_ap_mu_id = <18>;
+		fw-buf-size = <0x200000>;
+		rpc-buf-size = <0x80000>;
+		print-buf-size = <0x80000>;
+	};
+};
+
+&unused_gpios { /* GPIO: iWave Unused GPIO pins */
+	gpios = <&lsio_gpio1 4 0>,
+		<&lsio_gpio1 8 0>,
+		<&lsio_gpio1 10 0>,
+		<&lsio_gpio1 14 0>,
+		<&lsio_gpio1 15 0>,
+		<&lsio_gpio1 29 0>,
+		<&lsio_gpio2 0 0>,
+		<&lsio_gpio2 1 0>,
+		<&lsio_gpio2 2 0>,
+		<&lsio_gpio2 3 0>,
+		<&lsio_gpio2 4 0>,
+		<&lsio_gpio2 5 0>,
+		<&lsio_gpio2 6 0>,
+		<&lsio_gpio2 7 0>,
+		<&lsio_gpio2 8 0>,
+		<&lsio_gpio2 9 0>,
+		<&lsio_gpio2 10 0>,
+		<&lsio_gpio2 11 0>,
+		<&lsio_gpio2 12 0>,
+		<&lsio_gpio2 13 0>,
+		<&lsio_gpio2 14 0>,
+		<&lsio_gpio2 15 0>,
+		<&lsio_gpio2 16 0>,
+		<&lsio_gpio2 22 0>,
+		<&lsio_gpio2 24 0>,
+		<&lsio_gpio3 2 0>,
+		<&lsio_gpio3 3 0>,
+		<&lsio_gpio3 4 0>,
+		<&lsio_gpio3 6 0>,
+		<&lsio_gpio3 11 0>,
+		<&lsio_gpio3 14 0>,
+		<&lsio_gpio3 23 0>,
+		<&lsio_gpio3 24 0>,
+		<&lsio_gpio3 25 0>,
+		<&lsio_gpio3 26 0>,
+		<&lsio_gpio3 27 0>,
+		<&lsio_gpio3 28 0>,
+		<&lsio_gpio4 1 0>,
+		<&lsio_gpio4 2 0>,
+		<&lsio_gpio4 5 0>,
+		<&lsio_gpio4 9 0>,
+		<&lsio_gpio4 19 0>,
+		<&lsio_gpio4 20 0>,
+		<&lsio_gpio4 21 0>,
+		<&lsio_gpio4 22 0>,
+		<&lsio_gpio4 23 0>,
+		<&lsio_gpio4 24 0>,
+		<&lsio_gpio4 25 0>,
+		<&lsio_gpio4 26 0>,
+		<&lsio_gpio5 1 0>,
+		<&lsio_gpio5 2 0>,
+		<&lsio_gpio5 19 0>,
+		<&lsio_gpio5 20 0>,
+		<&lsio_gpio5 21 0>,
+		<&lsio_gpio5 22 0>;
+};
diff -Naur A/arch/arm64/boot/dts/freescale/imx8qm-ss-hsio.dtsi B/arch/arm64/boot/dts/freescale/imx8qm-ss-hsio.dtsi
--- A/arch/arm64/boot/dts/freescale/imx8qm-ss-hsio.dtsi	2020-08-13 11:41:28.902786007 +0530
+++ B/arch/arm64/boot/dts/freescale/imx8qm-ss-hsio.dtsi	2020-08-13 12:15:57.851875069 +0530
@@ -205,13 +205,14 @@
 		clock-names = "sata", "sata_ref", "epcs_tx", "epcs_rx",
 				"per_clk0", "per_clk1", "per_clk2",
 				"per_clk3", "per_clk4", "per_clk5",
-				"phy_pclk0", "phy_pclk1", "phy_apbclk";
+				"phy_pclk0", "phy_pclk1", "phy_apbclk", "ahb";
 		power-domains = <&pd IMX_SC_R_SATA_0>,
 				<&pd IMX_SC_R_PCIE_A>,
 				<&pd IMX_SC_R_PCIE_B>,
 				<&pd IMX_SC_R_SERDES_0>,
 				<&pd IMX_SC_R_SERDES_1>,
-				<&pd IMX_SC_R_HSIO_GPIO>;
+				<&pd IMX_SC_R_HSIO_GPIO>,
+				<&pd IMX_SC_R_SATA_0>;
 		fsl,sc_rsrc_id = <IMX_SC_R_SATA_0>;
 		iommus = <&smmu 0x13 0x7f80>;
 		status = "disabled";
diff -Naur A/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dts B/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dts
--- A/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dts	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dts	2020-08-25 15:33:31.535254932 +0530
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) 2020 iWave Systems Technologies Pvt. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+/dts-v1/;
+
+#include "imx8qp-iwg27m.dtsi"
diff -Naur A/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dtsi B/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dtsi
--- A/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dtsi	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm64/boot/dts/freescale/imx8qp-iwg27m.dtsi	2020-08-27 18:36:27.461357875 +0530
@@ -0,0 +1,89 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (c) 2020 iWave Systems Technologies Pvt. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "imx8qm-iwg27m.dtsi"
+
+/ {
+	model = "iW-RainboW-G27D-i.MX8QP-SMARC";
+	compatible = "fsl,imx8qp-iwg27m", "fsl,imx8qp", "fsl,imx8qm";
+};
+
+&cpus {
+	cpu-map {
+		cluster1 {
+			/delete-node/ core1;
+		};
+	};
+	/delete-node/ cpu@101;
+};
+
+&thermal_zones { /* Thermal Sensor Zone */
+        pmic-thermal0 {
+                polling-delay-passive = <250>;
+                polling-delay = <2000>;
+                thermal-sensors = <&tsens IMX_SC_R_PMIC_0>;
+                trips {
+                        pmic_alert0: trip0 {
+                                temperature = <110000>;
+                                hysteresis = <2000>;
+                                type = "passive";
+                        };
+                        pmic_crit0: trip1 {
+                                temperature = <125000>;
+                                hysteresis = <2000>;
+                                type = "critical";
+                        };
+                };
+                cooling-maps {
+                        map0 {
+                                trip = <&pmic_alert0>;
+                                cooling-device =
+                                <&A53_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+                                <&A53_1 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+                                <&A53_2 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+                                <&A53_3 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>,
+                                <&A72_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+                        };
+                };
+        };
+};
+
+
+&gpu_3d0 {
+      assigned-clock-rates = <625000000>, <625000000>;
+};
+
+&gpu_3d1 {
+      assigned-clock-rates = <625000000>, <625000000>;
+};
+
+&imx8_gpu_ss {/*<freq-kHz vol-uV>*/
+	operating-points = <
+	/*nominal*/	625000  0
+				625000  0
+/*underdrive*/	400000  0  /*core/shader clock share the same frequency on underdrive mode*/
+	>;
+};
+
+&thermal_zones {
+	cpu-thermal1 {
+		cooling-maps {
+			map0 {
+				cooling-device =
+				<&A72_0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
+			};
+		};
+	};
+};
diff -Naur A/arch/arm64/boot/dts/freescale/Makefile B/arch/arm64/boot/dts/freescale/Makefile
--- A/arch/arm64/boot/dts/freescale/Makefile	2020-08-13 11:41:28.862785597 +0530
+++ B/arch/arm64/boot/dts/freescale/Makefile	2020-08-13 12:22:45.927919512 +0530
@@ -91,7 +91,8 @@
 			  imx8qm-lpddr4-val-ca72.dtb imx8qm-ddr4-val.dtb \
 			  imx8qm-lpddr4-val-lpspi.dtb imx8qm-lpddr4-val-lpspi-slave.dtb \
 			  imx8qm-mek-dsi-rm67191.dtb imx8qm-lpddr4-val-dp.dtb\
-			  imx8qp-lpddr4-val.dtb imx8dm-lpddr4-val.dtb imx8qm-pcieax2pciebx1.dtb
+			  imx8qp-lpddr4-val.dtb imx8dm-lpddr4-val.dtb imx8qm-pcieax2pciebx1.dtb \
+			  imx8qm-iwg27m.dtb imx8qp-iwg27m.dtb
 dtb-$(CONFIG_ARCH_MXC) += imx8qm-mek-dom0.dtb imx8qm-mek-domu.dtb \
 			  imx8qm-mek-root.dtb imx8qm-mek-inmate.dtb
 dtb-$(CONFIG_ARCH_MXC) += imx8qxp-ai_ml.dtb
diff -Naur A/arch/arm64/configs/iw_rainbowg27m_defconfig B/arch/arm64/configs/iw_rainbowg27m_defconfig
--- A/arch/arm64/configs/iw_rainbowg27m_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm64/configs/iw_rainbowg27m_defconfig	2020-08-21 13:49:32.271152421 +0530
@@ -0,0 +1,910 @@
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_AUDIT=y
+CONFIG_NO_HZ_IDLE=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_PREEMPT=y
+CONFIG_IRQ_TIME_ACCOUNTING=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_NUMA_BALANCING=y
+CONFIG_MEMCG=y
+CONFIG_MEMCG_SWAP=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_HUGETLB=y
+CONFIG_CPUSETS=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_USER_NS=y
+CONFIG_SCHED_AUTOGROUP=y
+CONFIG_RELAY=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_KALLSYMS_ALL=y
+# CONFIG_COMPAT_BRK is not set
+CONFIG_PROFILING=y
+CONFIG_ARCH_LAYERSCAPE=y
+CONFIG_ARCH_MXC=y
+CONFIG_IWG27M=y
+CONFIG_ARCH_S32=y
+CONFIG_SOC_S32V234=y
+CONFIG_ARM64_VA_BITS_48=y
+CONFIG_SCHED_MC=y
+CONFIG_NUMA=y
+CONFIG_SECCOMP=y
+CONFIG_KEXEC=y
+CONFIG_CRASH_DUMP=y
+CONFIG_XEN=y
+CONFIG_FORCE_MAX_ZONEORDER=14
+CONFIG_COMPAT=y
+CONFIG_RANDOMIZE_BASE=y
+CONFIG_PM_DEBUG=y
+CONFIG_PM_TEST_SUSPEND=y
+CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
+CONFIG_ARM_CPUIDLE=y
+CONFIG_ARM_PSCI_CPUIDLE=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_STAT=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
+CONFIG_CPUFREQ_DT=y
+CONFIG_ACPI_CPPC_CPUFREQ=m
+CONFIG_ARM_SCPI_CPUFREQ=y
+CONFIG_ARM_IMX_CPUFREQ_DT=y
+CONFIG_QORIQ_CPUFREQ=y
+CONFIG_ARM_SCPI_PROTOCOL=y
+CONFIG_EFI_CAPSULE_LOADER=y
+CONFIG_IMX_DSP=y
+CONFIG_IMX_SCU=y
+CONFIG_IMX_SCU_PD=y
+CONFIG_IMX_SECO_MU=y
+CONFIG_ACPI=y
+CONFIG_ACPI_APEI=y
+CONFIG_ACPI_APEI_GHES=y
+CONFIG_ACPI_APEI_PCIEAER=y
+CONFIG_ACPI_APEI_MEMORY_FAILURE=y
+CONFIG_ACPI_APEI_EINJ=y
+CONFIG_VIRTUALIZATION=y
+CONFIG_KVM=y
+CONFIG_ARM64_CRYPTO=y
+CONFIG_CRYPTO_SHA1_ARM64_CE=y
+CONFIG_CRYPTO_SHA2_ARM64_CE=y
+CONFIG_CRYPTO_SHA512_ARM64_CE=m
+CONFIG_CRYPTO_SHA3_ARM64=m
+CONFIG_CRYPTO_SM3_ARM64_CE=m
+CONFIG_CRYPTO_GHASH_ARM64_CE=y
+CONFIG_CRYPTO_CRCT10DIF_ARM64_CE=m
+CONFIG_CRYPTO_AES_ARM64_CE_CCM=y
+CONFIG_CRYPTO_AES_ARM64_CE_BLK=y
+CONFIG_CRYPTO_CHACHA20_NEON=m
+CONFIG_CRYPTO_AES_ARM64_BS=m
+CONFIG_JUMP_LABEL=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
+CONFIG_KSM=y
+CONFIG_MEMORY_FAILURE=y
+CONFIG_TRANSPARENT_HUGEPAGE=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IPV6_SIT=m
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=m
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NETFILTER_XT_TARGET_CHECKSUM=m
+CONFIG_NETFILTER_XT_TARGET_LOG=m
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
+CONFIG_IP_NF_IPTABLES=m
+CONFIG_IP_NF_FILTER=m
+CONFIG_IP_NF_TARGET_REJECT=m
+CONFIG_IP_NF_NAT=m
+CONFIG_IP_NF_TARGET_MASQUERADE=m
+CONFIG_IP_NF_MANGLE=m
+CONFIG_IP6_NF_IPTABLES=m
+CONFIG_IP6_NF_FILTER=m
+CONFIG_IP6_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_MANGLE=m
+CONFIG_IP6_NF_NAT=m
+CONFIG_IP6_NF_TARGET_MASQUERADE=m
+CONFIG_BRIDGE=m
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_VLAN_8021Q_MVRP=y
+CONFIG_LLC2=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_MULTIQ=y
+CONFIG_NET_SCH_CBS=y
+CONFIG_NET_SCH_TAPRIO=y
+CONFIG_NET_SCH_MQPRIO=y
+CONFIG_NET_CLS_BASIC=y
+CONFIG_NET_CLS_TCINDEX=y
+CONFIG_TSN=y
+CONFIG_NET_SWITCHDEV=y
+CONFIG_BPF_JIT=y
+CONFIG_CAN=y
+CONFIG_CAN_FLEXCAN=y
+CONFIG_BT=m
+CONFIG_BT_RFCOMM=m
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=m
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=m
+# CONFIG_BT_HS is not set
+# CONFIG_BT_LE is not set
+CONFIG_BT_LEDS=y
+# CONFIG_BT_DEBUGFS is not set
+CONFIG_BT_HCIBTUSB=m
+CONFIG_BT_HCIUART=m
+CONFIG_BT_HCIUART_H4=y
+CONFIG_BT_HCIUART_BCSP=y
+CONFIG_BT_HCIUART_ATH3K=y
+CONFIG_BT_HCIUART_LL=y
+CONFIG_BT_HCIUART_3WIRE=y
+CONFIG_BT_HCIUART_BCM=y
+CONFIG_BT_HCIUART_QCA=y
+CONFIG_BT_HCIVHCI=y
+CONFIG_CFG80211=y
+CONFIG_NL80211_TESTMODE=y
+CONFIG_CFG80211_WEXT=y
+CONFIG_MAC80211=y
+CONFIG_MAC80211_LEDS=y
+CONFIG_NET_9P=y
+CONFIG_NET_9P_VIRTIO=y
+CONFIG_PCI=y
+CONFIG_PCIEPORTBUS=y
+CONFIG_PCI_IOV=y
+CONFIG_HOTPLUG_PCI=y
+CONFIG_HOTPLUG_PCI_ACPI=y
+CONFIG_PCI_HOST_GENERIC=y
+CONFIG_PCI_XGENE=y
+CONFIG_PCIE_ALTERA=y
+CONFIG_PCIE_ALTERA_MSI=y
+CONFIG_PCI_HOST_THUNDER_PEM=y
+CONFIG_PCI_HOST_THUNDER_ECAM=y
+CONFIG_PCI_IMX6=y
+CONFIG_PCI_LAYERSCAPE=y
+CONFIG_PCI_HISI=y
+CONFIG_PCIE_KIRIN=y
+CONFIG_PCIE_LAYERSCAPE_GEN4=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_FW_LOADER_USER_HELPER=y
+CONFIG_FW_LOADER_USER_HELPER_FALLBACK=y
+CONFIG_BRCMSTB_GISB_ARB=y
+CONFIG_SIMPLE_PM_BUS=y
+CONFIG_VEXPRESS_CONFIG=y
+CONFIG_FSL_MC_BUS=y
+CONFIG_FSL_MC_UAPI_SUPPORT=y
+CONFIG_MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
+CONFIG_MTD_BLOCK=y
+CONFIG_MTD_CFI=y
+CONFIG_MTD_CFI_ADV_OPTIONS=y
+CONFIG_MTD_CFI_INTELEXT=y
+CONFIG_MTD_CFI_AMDSTD=y
+CONFIG_MTD_CFI_STAA=y
+CONFIG_MTD_PHYSMAP=y
+CONFIG_MTD_PHYSMAP_OF=y
+CONFIG_MTD_DATAFLASH=y
+CONFIG_MTD_SST25L=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_MTD_NAND_DENALI_DT=y
+CONFIG_MTD_NAND_GPMI_NAND=y
+CONFIG_MTD_NAND_FSL_IFC=y
+CONFIG_MTD_SPI_NOR=y
+# CONFIG_MTD_SPI_NOR_USE_4K_SECTORS is not set
+CONFIG_MTD_UBI=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_NBD=m
+CONFIG_XEN_BLKDEV_BACKEND=m
+CONFIG_VIRTIO_BLK=y
+CONFIG_BLK_DEV_NVME=y
+CONFIG_SENSORS_FXOS8700=y
+CONFIG_SENSORS_FXAS2100X=y
+CONFIG_SRAM=y
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_AT25=m
+# CONFIG_SCSI_PROC_FS is not set
+CONFIG_BLK_DEV_SD=y
+CONFIG_SCSI_SAS_ATA=y
+CONFIG_SCSI_HISI_SAS=y
+CONFIG_SCSI_HISI_SAS_PCI=y
+CONFIG_SCSI_MPT3SAS=m
+CONFIG_SCSI_UFSHCD=y
+CONFIG_SCSI_UFSHCD_PLATFORM=y
+CONFIG_ATA=y
+CONFIG_SATA_AHCI=y
+CONFIG_SATA_AHCI_PLATFORM=y
+CONFIG_AHCI_IMX=y
+CONFIG_AHCI_CEVA=y
+CONFIG_AHCI_XGENE=y
+CONFIG_AHCI_QORIQ=y
+CONFIG_SATA_SIL24=y
+CONFIG_PATA_PLATFORM=y
+CONFIG_PATA_OF_PLATFORM=y
+CONFIG_MD=y
+CONFIG_BLK_DEV_MD=m
+CONFIG_BLK_DEV_DM=m
+CONFIG_DM_MIRROR=m
+CONFIG_DM_ZERO=m
+CONFIG_NETDEVICES=y
+CONFIG_MACVLAN=m
+CONFIG_MACVTAP=m
+CONFIG_TUN=y
+CONFIG_VETH=m
+CONFIG_VIRTIO_NET=y
+CONFIG_AMD_XGBE=y
+CONFIG_ATL1C=m
+CONFIG_BNX2X=m
+CONFIG_MACB=y
+CONFIG_THUNDER_NIC_PF=y
+CONFIG_FEC=y
+CONFIG_FSL_SDK_DPAA_ETH=y
+CONFIG_FSL_DPAA2_ETH=y
+CONFIG_FSL_ENETC=y
+CONFIG_FSL_ENETC_VF=y
+CONFIG_FSL_ENETC_MDIO=y
+CONFIG_HIX5HD2_GMAC=y
+CONFIG_HNS_DSAF=y
+CONFIG_HNS_ENET=y
+CONFIG_HNS3=y
+CONFIG_HNS3_HCLGE=y
+CONFIG_HNS3_ENET=y
+CONFIG_E1000=y
+CONFIG_E1000E=y
+CONFIG_IGB=y
+CONFIG_IGBVF=y
+CONFIG_MVMDIO=y
+CONFIG_SKY2=y
+CONFIG_MLX4_EN=m
+CONFIG_MLX5_CORE=m
+CONFIG_MLX5_CORE_EN=y
+CONFIG_MSCC_OCELOT_SWITCH=y
+CONFIG_QCOM_EMAC=m
+CONFIG_SMC91X=y
+CONFIG_SMSC911X=y
+CONFIG_STMMAC_ETH=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_BUS_MUX_MULTIPLEXER=y
+CONFIG_AQUANTIA_PHY=y
+CONFIG_AT803X_PHY=y
+CONFIG_INPHI_PHY=y
+CONFIG_MARVELL_PHY=m
+CONFIG_MARVELL_10G_PHY=m
+CONFIG_MICREL_PHY=y
+CONFIG_MICROSEMI_PHY=y
+CONFIG_NXP_TJA11XX_PHY=y
+CONFIG_REALTEK_PHY=y
+CONFIG_ROCKCHIP_PHY=y
+CONFIG_VITESSE_PHY=y
+CONFIG_USB_PEGASUS=m
+CONFIG_USB_RTL8150=m
+CONFIG_USB_RTL8152=m
+CONFIG_USB_LAN78XX=m
+CONFIG_USB_USBNET=m
+CONFIG_USB_NET_DM9601=m
+CONFIG_USB_NET_SR9800=m
+CONFIG_USB_NET_SMSC75XX=m
+CONFIG_USB_NET_SMSC95XX=m
+CONFIG_USB_NET_PLUSB=m
+CONFIG_USB_NET_MCS7830=m
+CONFIG_BRCMUTIL=m
+CONFIG_BRCMFMAC=m
+CONFIG_BRCMFMAC_PROTO_BCDC=y
+CONFIG_BRCMFMAC_PROTO_MSGBUF=y
+CONFIG_BRCMFMAC_SDIO=y
+CONFIG_BRCMFMAC_PCIE=y
+CONFIG_HOSTAP=y
+CONFIG_MXMWIFIEX=m
+CONFIG_WL18XX=m
+CONFIG_WLCORE_SDIO=m
+CONFIG_IVSHMEM_NET=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_KEYBOARD_ADC=m
+CONFIG_KEYBOARD_GPIO=y
+CONFIG_KEYBOARD_SNVS_PWRKEY=y
+CONFIG_KEYBOARD_IMX_SC_PWRKEY=y
+CONFIG_KEYBOARD_CROS_EC=y
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_CST148=y
+CONFIG_TOUCHSCREEN_ATMEL_MXT=m
+CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_I2C=m
+CONFIG_HYN_CST3XX_TOUCHSCREEN_SUPPORT=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_MPL3115=y
+CONFIG_INPUT_ISL29023=y
+# CONFIG_SERIO_SERPORT is not set
+CONFIG_SERIO_AMBAKMI=y
+CONFIG_LEGACY_PTY_COUNT=16
+CONFIG_SERIAL_8250=y
+CONFIG_SERIAL_8250_CONSOLE=y
+CONFIG_SERIAL_8250_EXTENDED=y
+CONFIG_SERIAL_8250_SHARE_IRQ=y
+CONFIG_SERIAL_8250_DW=y
+CONFIG_SERIAL_OF_PLATFORM=y
+CONFIG_SERIAL_AMBA_PL011=y
+CONFIG_SERIAL_AMBA_PL011_CONSOLE=y
+CONFIG_SERIAL_IMX=y
+CONFIG_SERIAL_IMX_CONSOLE=y
+CONFIG_SERIAL_XILINX_PS_UART=y
+CONFIG_SERIAL_XILINX_PS_UART_CONSOLE=y
+CONFIG_SERIAL_FSL_LPUART=y
+CONFIG_SERIAL_FSL_LPUART_CONSOLE=y
+CONFIG_SERIAL_FSL_LINFLEXUART=y
+CONFIG_SERIAL_FSL_LINFLEXUART_CONSOLE=y
+CONFIG_SERIAL_DEV_BUS=y
+CONFIG_VIRTIO_CONSOLE=y
+CONFIG_IPMI_HANDLER=m
+CONFIG_IPMI_DEVICE_INTERFACE=m
+CONFIG_IPMI_SI=m
+CONFIG_TCG_TPM=y
+CONFIG_TCG_TIS_I2C_INFINEON=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_I2C_DESIGNWARE_PLATFORM=y
+CONFIG_I2C_GPIO=m
+CONFIG_I2C_IMX=y
+CONFIG_I2C_IMX_LPI2C=y
+CONFIG_I2C_RK3X=y
+CONFIG_I2C_RPBUS=y
+CONFIG_I2C_CROS_EC_TUNNEL=y
+CONFIG_XEN_I2C_BACKEND=y
+CONFIG_I2C_SLAVE=y
+CONFIG_SPI=y
+CONFIG_SPI_FSL_LPSPI=y
+CONFIG_SPI_FSL_QUADSPI=y
+CONFIG_SPI_NXP_FLEXSPI=y
+CONFIG_SPI_IMX=y
+CONFIG_SPI_FSL_DSPI=y
+CONFIG_SPI_PL022=y
+CONFIG_SPI_ROCKCHIP=y
+CONFIG_SPI_SPIDEV=y
+CONFIG_SPI_SLAVE=y
+CONFIG_SPI_SLAVE_TIME=y
+CONFIG_SPI_SLAVE_SYSTEM_CONTROL=y
+CONFIG_SPMI=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_PINCTRL_MAX77620=y
+CONFIG_PINCTRL_IMX8MM=y
+CONFIG_PINCTRL_IMX8MN=y
+CONFIG_PINCTRL_IMX8MP=y
+CONFIG_PINCTRL_IMX8MQ=y
+CONFIG_PINCTRL_IMX8QM=y
+CONFIG_PINCTRL_IMX8QXP=y
+CONFIG_PINCTRL_IMX8DXL=y
+CONFIG_PINCTRL_S32V234=y
+CONFIG_GPIOLIB=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_DWAPB=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_GPIO_MB86S7X=y
+CONFIG_GPIO_MPC8XXX=y
+CONFIG_GPIO_PL061=y
+CONFIG_GPIO_XGENE=y
+CONFIG_GPIO_MAX732X=y
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_GPIO_MAX77620=y
+CONFIG_POWER_AVS=y
+CONFIG_POWER_RESET_BRCMSTB=y
+CONFIG_POWER_RESET_VEXPRESS=y
+CONFIG_POWER_RESET_XGENE=y
+CONFIG_POWER_RESET_SYSCON=y
+CONFIG_SYSCON_REBOOT_MODE=y
+CONFIG_BATTERY_SBS=m
+CONFIG_BATTERY_BQ27XXX=y
+CONFIG_SENSORS_ARM_SCPI=y
+CONFIG_SENSORS_LM90=m
+CONFIG_SENSORS_PWM_FAN=m
+CONFIG_SENSORS_INA2XX=m
+CONFIG_SENSORS_INA3221=m
+CONFIG_THERMAL_WRITABLE_TRIPS=y
+CONFIG_THERMAL_GOV_POWER_ALLOCATOR=y
+CONFIG_CPU_THERMAL=y
+CONFIG_THERMAL_EMULATION=y
+CONFIG_IMX_SC_THERMAL=y
+CONFIG_DEVICE_THERMAL=y
+CONFIG_IMX8MM_THERMAL=y
+CONFIG_QORIQ_THERMAL=y
+CONFIG_WATCHDOG=y
+#
+# Watchdog Device Drivers
+#
+CONFIG_SOFT_WATCHDOG=y
+CONFIG_ARM_SP805_WATCHDOG=y
+CONFIG_ARM_SBSA_WATCHDOG=y
+CONFIG_DW_WATCHDOG=y
+CONFIG_IMX2_WDT=y
+CONFIG_IMX_SC_WDT=y
+CONFIG_XEN_WDT=y
+CONFIG_MFD_BD9571MWV=y
+CONFIG_MFD_AXP20X_I2C=y
+CONFIG_MFD_IMX_AUDIOMIX=y
+CONFIG_MFD_HI6421_PMIC=y
+CONFIG_MFD_MAX77620=y
+CONFIG_MFD_RK808=y
+CONFIG_MFD_SEC_CORE=y
+CONFIG_MFD_ROHM_BD718XX=y
+CONFIG_MFD_PCA9450=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_AXP20X=y
+CONFIG_REGULATOR_BD718XX=y
+CONFIG_REGULATOR_BD9571MWV=y
+CONFIG_REGULATOR_FAN53555=y
+CONFIG_REGULATOR_GPIO=y
+CONFIG_REGULATOR_HI6421V530=y
+CONFIG_REGULATOR_MAX77620=y
+CONFIG_REGULATOR_MAX8973=y
+CONFIG_REGULATOR_PCA9450=y
+CONFIG_REGULATOR_PFUZE100=y
+CONFIG_REGULATOR_PWM=y
+CONFIG_REGULATOR_QCOM_SPMI=y
+CONFIG_REGULATOR_RK808=y
+CONFIG_REGULATOR_S2MPS11=y
+CONFIG_REGULATOR_VCTRL=m
+CONFIG_RC_CORE=m
+CONFIG_RC_DECODERS=y
+CONFIG_RC_DEVICES=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_ANALOG_TV_SUPPORT=y
+CONFIG_MEDIA_DIGITAL_TV_SUPPORT=y
+CONFIG_MEDIA_CONTROLLER=y
+CONFIG_VIDEO_V4L2_SUBDEV_API=y
+# CONFIG_DVB_NET is not set
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=m
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_VIDEO_MX8_CAPTURE=y
+CONFIG_VIDEO_MXC_CAPTURE=y
+#
+# IMX8 Camera ISI/MIPI Features support
+#
+CONFIG_IMX8_MEDIA_DEVICE=y
+CONFIG_IMX8_CAPTURE_DRIVER=y
+CONFIG_IMX8_MIPI_CSI2=y
+CONFIG_IMX8_PARALLEL_CSI=y
+CONFIG_IMX8_MIPI_CSI2_YAV=y
+CONFIG_IMX8_JPEG=y
+CONFIG_IMX8_HDMI_RX=y
+CONFIG_VIDEO_MXC_CSI_CAMERA=y
+CONFIG_MXC_MIPI_CSI=y
+CONFIG_MXC_CAMERA_OV5640_MIPI_V2=y
+CONFIG_V4L_MEM2MEM_DRIVERS=y
+CONFIG_VIDEO_OV5640=y
+CONFIG_IMX_DPU_CORE=y
+CONFIG_IMX_LCDIF_CORE=y
+CONFIG_IMX_LCDIFV3_CORE=y
+CONFIG_DRM=y
+CONFIG_DRM_I2C_NXP_TDA998X=m
+CONFIG_DRM_MALI_DISPLAY=m
+CONFIG_DRM_NOUVEAU=m
+CONFIG_DRM_RCAR_LVDS=m
+CONFIG_DRM_PANEL_SIMPLE=y
+CONFIG_DRM_PANEL_RAYDIUM_RM67191=y
+CONFIG_DRM_PANEL_RAYDIUM_RM67198=y
+CONFIG_DRM_PANEL_SEIKO_43WVF1G=y
+CONFIG_DRM_FSL_IMX_LVDS_BRIDGE=y
+CONFIG_DRM_SII902X=m
+CONFIG_DRM_I2C_ADV7511=y
+CONFIG_DRM_NWL_MIPI_DSI=y
+CONFIG_DRM_CDNS_HDMI_CEC=y
+CONFIG_DRM_DW_HDMI_I2S_AUDIO=m
+CONFIG_DRM_DW_HDMI_GP_AUDIO=y
+CONFIG_DRM_DW_HDMI_CEC=y
+CONFIG_DRM_ITE_IT6263=y
+CONFIG_DRM_IMX=y
+CONFIG_DRM_IMX_LCDIF_MUX_DISPLAY=y
+CONFIG_DRM_IMX_PARALLEL_DISPLAY=y
+CONFIG_DRM_IMX_TVE=y
+CONFIG_DRM_IMX_LDB=y
+CONFIG_DRM_IMX8QM_LDB=y
+CONFIG_DRM_IMX8QXP_LDB=y
+CONFIG_DRM_IMX8MP_LDB=y
+CONFIG_DRM_IMX_HDMI=y
+CONFIG_DRM_IMX_SEC_DSIM=y
+CONFIG_DRM_IMX_CDNS_MHDP=y
+CONFIG_DRM_IMX_DCSS=y
+CONFIG_DRM_ETNAVIV=m
+CONFIG_DRM_HISI_HIBMC=m
+CONFIG_DRM_HISI_KIRIN=m
+CONFIG_DRM_MXSFB=y
+CONFIG_DRM_PL111=m
+CONFIG_DRM_LIMA=m
+CONFIG_DRM_PANFROST=m
+CONFIG_FB_ARMCLCD=y
+CONFIG_FB_EFI=y
+CONFIG_BACKLIGHT_GENERIC=m
+CONFIG_BACKLIGHT_PWM=y
+CONFIG_BACKLIGHT_LP855X=m
+CONFIG_FRAMEBUFFER_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
+CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=y
+CONFIG_LOGO=y
+# CONFIG_LOGO_LINUX_MONO is not set
+# CONFIG_LOGO_LINUX_VGA16 is not set
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_DYNAMIC_MINORS=y
+CONFIG_SND_USB_AUDIO=m
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_FSL_DAI=m
+CONFIG_SND_SOC_FSL_EASRC=y
+CONFIG_SND_IMX_SOC=y
+CONFIG_SND_SOC_IMX_AK4458=y
+CONFIG_SND_SOC_IMX_AK5558=y
+CONFIG_SND_SOC_IMX_AK4497=y
+CONFIG_SND_SOC_IMX_WM8960=y
+CONFIG_SND_SOC_IMX_WM8524=y
+CONFIG_SND_SOC_IMX_CS42888=y
+CONFIG_SND_SOC_IMX_MICFIL=y
+CONFIG_SND_SOC_IMX_RPMSG=y
+CONFIG_SND_SOC_IMX_SGTL5000=y
+CONFIG_SND_SOC_IMX_MQS=y
+CONFIG_SND_SOC_IMX_SPDIF=y
+CONFIG_SND_SOC_IMX_AUDMIX=y
+CONFIG_SND_SOC_IMX_PDM_MIC=y
+CONFIG_SND_SOC_IMX_DSP=y
+CONFIG_SND_SOC_IMX_CDNHDMI=y
+CONFIG_SND_SOC_IMX_XCVR=y
+CONFIG_SND_SOC_SOF_TOPLEVEL=y
+CONFIG_SND_SOC_SOF_OF=m
+CONFIG_SND_SOC_SOF_IMX_TOPLEVEL=y
+CONFIG_SND_SOC_SOF_IMX8_SUPPORT=m
+CONFIG_SND_SOC_SOF_IMX8M_SUPPORT=m
+CONFIG_SND_SOC_AK4613=m
+CONFIG_SND_SOC_BT_SCO=y
+CONFIG_SND_SOC_DMIC=m
+CONFIG_SND_SOC_ES7134=m
+CONFIG_SND_SOC_ES7241=m
+CONFIG_SND_SOC_MAX98357A=m
+CONFIG_SND_SOC_PCM3168A_I2C=m
+CONFIG_SND_SOC_SGTL5000=y
+CONFIG_SND_SOC_SPDIF=m
+CONFIG_SND_SOC_TAS571X=m
+CONFIG_SND_SIMPLE_CARD=y
+CONFIG_SND_AUDIO_GRAPH_CARD=y
+CONFIG_I2C_HID=m
+CONFIG_USB=y
+CONFIG_USB_OTG=y
+CONFIG_USB_OTG_WHITELIST=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_HCD_PLATFORM=y
+CONFIG_USB_HCD_TEST_MODE=y
+CONFIG_USB_ACM=m
+CONFIG_USB_STORAGE=y
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_CDNS3_HOST=y
+CONFIG_USB_MUSB_HDRC=y
+CONFIG_USB_DWC3=y
+CONFIG_USB_DWC2=y
+CONFIG_USB_CHIPIDEA=y
+CONFIG_USB_CHIPIDEA_UDC=y
+CONFIG_USB_CHIPIDEA_HOST=y
+CONFIG_USB_ISP1760=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_CONSOLE=y
+CONFIG_USB_SERIAL_GENERIC=y
+CONFIG_USB_SERIAL_SIMPLE=y
+CONFIG_USB_SERIAL_FTDI_SIO=y
+CONFIG_USB_TEST=m
+CONFIG_USB_EHSET_TEST_FIXTURE=m
+CONFIG_USB_HSIC_USB3503=y
+CONFIG_NOP_USB_XCEIV=y
+CONFIG_USB_MXS_PHY=y
+CONFIG_USB_ULPI=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_SNP_UDC_PLAT=y
+CONFIG_USB_BDC_UDC=y
+#
+# Platform Support
+#
+CONFIG_USB_LIBCOMPOSITE=m
+CONFIG_USB_F_ACM=m
+CONFIG_USB_F_SS_LB=m
+CONFIG_USB_U_SERIAL=m
+CONFIG_USB_U_ETHER=m
+CONFIG_USB_U_AUDIO=m
+CONFIG_USB_F_SERIAL=m
+CONFIG_USB_F_OBEX=m
+CONFIG_USB_F_NCM=m
+CONFIG_USB_F_ECM=m
+CONFIG_USB_F_EEM=m
+CONFIG_USB_F_SUBSET=m
+CONFIG_USB_F_RNDIS=m
+CONFIG_USB_F_MASS_STORAGE=m
+CONFIG_USB_F_FS=m
+CONFIG_USB_F_UAC1=m
+CONFIG_USB_F_UAC2=m
+CONFIG_USB_F_MIDI=m
+CONFIG_USB_F_HID=m
+CONFIG_USB_CONFIGFS=m
+CONFIG_USB_CONFIGFS_SERIAL=y
+CONFIG_USB_CONFIGFS_ACM=y
+CONFIG_USB_CONFIGFS_OBEX=y
+CONFIG_USB_CONFIGFS_NCM=y
+CONFIG_USB_CONFIGFS_ECM=y
+CONFIG_USB_CONFIGFS_ECM_SUBSET=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_EEM=y
+CONFIG_USB_CONFIGFS_MASS_STORAGE=y
+CONFIG_USB_CONFIGFS_F_LB_SS=y
+CONFIG_USB_CONFIGFS_F_FS=y
+CONFIG_USB_CONFIGFS_F_UAC1=y
+# CONFIG_USB_CONFIGFS_F_UAC1_LEGACY is not set
+CONFIG_USB_CONFIGFS_F_UAC2=y
+CONFIG_USB_CONFIGFS_F_MIDI=y
+CONFIG_USB_CONFIGFS_F_HID=y
+# CONFIG_USB_CONFIGFS_F_UVC is not set
+CONFIG_USB_ZERO=m
+CONFIG_USB_AUDIO=m
+CONFIG_USB_ETH=m
+CONFIG_USB_MASS_STORAGE=m
+CONFIG_USB_G_SERIAL=m
+CONFIG_TYPEC=y
+CONFIG_TYPEC_TCPM=y
+CONFIG_TYPEC_TCPCI=y
+CONFIG_TYPEC_FUSB302=y
+CONFIG_TYPEC_SWITCH_GPIO=y
+CONFIG_MMC=y
+CONFIG_MMC_BLOCK_MINORS=32
+CONFIG_MMC_ARMMMCI=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_ACPI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_SDHCI_OF_ARASAN=y
+CONFIG_MMC_SDHCI_OF_ESDHC=y
+CONFIG_MMC_SDHCI_CADENCE=y
+CONFIG_MMC_SDHCI_ESDHC_IMX=y
+CONFIG_MMC_SDHCI_F_SDH30=y
+CONFIG_MMC_SPI=y
+CONFIG_MMC_DW=y
+CONFIG_MMC_DW_EXYNOS=y
+CONFIG_MMC_DW_HI3798CV200=y
+CONFIG_MMC_DW_K3=y
+CONFIG_MMC_SDHCI_XENON=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_PWM=y
+CONFIG_LEDS_SYSCON=y
+CONFIG_LEDS_TRIGGER_DISK=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_CPU=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_PANIC=y
+CONFIG_EDAC=y
+CONFIG_EDAC_GHES=y
+CONFIG_EDAC_SYNOPSYS=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_DS1307=y
+CONFIG_RTC_DRV_MAX77686=y
+CONFIG_RTC_DRV_RK808=m
+CONFIG_RTC_DRV_PCF85363=y
+CONFIG_RTC_DRV_RX8581=m
+CONFIG_RTC_DRV_S5M=y
+CONFIG_RTC_DRV_DS3232=y
+CONFIG_RTC_DRV_PCF2127=y
+CONFIG_RTC_DRV_EFI=y
+CONFIG_RTC_DRV_CROS_EC=y
+CONFIG_RTC_DRV_PL031=y
+CONFIG_RTC_DRV_SNVS=y
+CONFIG_RTC_DRV_IMX_SC=y
+CONFIG_DMADEVICES=y
+CONFIG_BCM_SBA_RAID=m
+CONFIG_FSL_EDMA=y
+CONFIG_FSL_EDMA_V3=y
+CONFIG_IMX_SDMA=y
+CONFIG_MV_XOR_V2=y
+CONFIG_MXS_DMA=y
+CONFIG_PL330_DMA=y
+CONFIG_QCOM_HIDMA_MGMT=y
+CONFIG_QCOM_HIDMA=y
+CONFIG_DMATEST=y
+CONFIG_UIO=y
+CONFIG_UIO_PCI_GENERIC=y
+CONFIG_UIO_IVSHMEM=y
+CONFIG_VFIO=y
+CONFIG_VFIO_PCI=y
+CONFIG_VFIO_FSL_MC=y
+CONFIG_VIRTIO_PCI=y
+CONFIG_VIRTIO_BALLOON=y
+CONFIG_VIRTIO_MMIO=y
+CONFIG_XEN_GNTDEV=y
+CONFIG_XEN_GRANT_DEV_ALLOC=y
+CONFIG_STAGING=y
+CONFIG_STAGING_MEDIA=y
+CONFIG_VIDEO_IMX_CAPTURE=y
+CONFIG_ION=y
+CONFIG_ION_SYSTEM_HEAP=y
+CONFIG_ION_CMA_HEAP=y
+CONFIG_FSL_DPAA2=y
+CONFIG_FSL_DPAA2_ETHSW=y
+CONFIG_FSL_DPAA2_MAC=y
+CONFIG_FSL_SDK_DPA=y
+CONFIG_FSL_PPFE=y
+CONFIG_FSL_PPFE_UTIL_DISABLED=y
+CONFIG_MFD_CROS_EC=y
+CONFIG_CROS_EC_I2C=y
+CONFIG_CROS_EC_SPI=y
+CONFIG_COMMON_CLK_VERSATILE=y
+CONFIG_CLK_SP810=y
+CONFIG_CLK_VEXPRESS_OSC=y
+CONFIG_COMMON_CLK_RK808=y
+CONFIG_COMMON_CLK_SCPI=y
+CONFIG_COMMON_CLK_CS2000_CP=y
+CONFIG_COMMON_CLK_S2MPS11=y
+CONFIG_COMMON_CLK_XGENE=y
+CONFIG_COMMON_CLK_PWM=y
+CONFIG_CLK_IMX8MM=y
+CONFIG_CLK_IMX8MN=y
+CONFIG_CLK_IMX8MP=y
+CONFIG_CLK_IMX8MQ=y
+CONFIG_CLK_IMX8QXP=y
+CONFIG_HWSPINLOCK=y
+CONFIG_ARM_MHU=y
+CONFIG_IMX_MBOX=y
+CONFIG_PLATFORM_MHU=y
+CONFIG_ARM_SMMU=y
+CONFIG_ARM_SMMU_V3=y
+CONFIG_REMOTEPROC=y
+CONFIG_IMX_REMOTEPROC=y
+CONFIG_RPMSG_QCOM_GLINK_RPM=y
+CONFIG_SOC_BRCMSTB=y
+CONFIG_FSL_MC_DPIO=y
+CONFIG_FSL_QIXIS=y
+CONFIG_IMX_SCU_SOC=y
+CONFIG_SECVIO_SC=y
+CONFIG_SOC_TI=y
+CONFIG_EXTCON_USB_GPIO=y
+CONFIG_EXTCON_USBC_CROS_EC=y
+CONFIG_IIO=y
+CONFIG_IMX8QXP_ADC=y
+CONFIG_IIO_CROS_EC_SENSORS_CORE=m
+CONFIG_IIO_CROS_EC_SENSORS=m
+CONFIG_IIO_CROS_EC_LIGHT_PROX=m
+CONFIG_IIO_CROS_EC_BARO=m
+CONFIG_PWM=y
+CONFIG_PWM_CROS_EC=m
+CONFIG_PWM_IMX27=y
+CONFIG_PHY_XGENE=y
+CONFIG_PHY_MIXEL_LVDS=y
+CONFIG_PHY_MIXEL_LVDS_COMBO=y
+CONFIG_PHY_FSL_IMX8MP_LVDS=y
+CONFIG_PHY_MIXEL_MIPI_DPHY=y
+CONFIG_PHY_SAMSUNG_HDMI_PHY=y
+CONFIG_PHY_QCOM_USB_HS=y
+CONFIG_PHY_SAMSUNG_USB2=y
+CONFIG_FSL_IMX8_DDR_PMU=y
+CONFIG_HISI_PMU=y
+CONFIG_NVMEM_IMX_OCOTP=y
+CONFIG_NVMEM_IMX_OCOTP_SCU=y
+CONFIG_FPGA=y
+CONFIG_FPGA_BRIDGE=m
+CONFIG_ALTERA_FREEZE_BRIDGE=m
+CONFIG_FPGA_REGION=m
+CONFIG_OF_FPGA_REGION=m
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+CONFIG_MUX_MMIO=y
+CONFIG_MXC_SIM=y
+CONFIG_MXC_EMVSIM=y
+CONFIG_MXC_MLB150=y
+CONFIG_EXT2_FS=y
+CONFIG_EXT3_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_BTRFS_FS=m
+CONFIG_BTRFS_FS_POSIX_ACL=y
+CONFIG_FANOTIFY=y
+CONFIG_FANOTIFY_ACCESS_PERMISSIONS=y
+CONFIG_QUOTA=y
+CONFIG_AUTOFS4_FS=y
+CONFIG_FUSE_FS=m
+CONFIG_CUSE=m
+CONFIG_OVERLAY_FS=m
+CONFIG_VFAT_FS=y
+CONFIG_HUGETLBFS=y
+CONFIG_CONFIGFS_FS=m
+CONFIG_EFIVAR_FS=y
+CONFIG_JFFS2_FS=y
+CONFIG_UBIFS_FS=y
+CONFIG_SQUASHFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_ROOT_NFS=y
+CONFIG_9P_FS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_SECURITY=y
+CONFIG_CRYPTO_USER=y
+CONFIG_CRYPTO_TEST=m
+#
+# Public-key cryptography
+#
+CONFIG_CRYPTO_RSA=y
+CONFIG_CRYPTO_ECC=y
+CONFIG_CRYPTO_ECDH=y
+CONFIG_CRYPTO_CHACHA20POLY1305=m
+CONFIG_CRYPTO_ECHAINIV=y
+CONFIG_CRYPTO_TLS=m
+CONFIG_CRYPTO_CBC=m
+CONFIG_CRYPTO_CFB=m
+CONFIG_CRYPTO_CTS=m
+CONFIG_CRYPTO_LRW=m
+CONFIG_CRYPTO_OFB=m
+CONFIG_CRYPTO_XTS=m
+CONFIG_CRYPTO_MD4=m
+CONFIG_CRYPTO_MD5=m
+CONFIG_CRYPTO_RMD128=m
+CONFIG_CRYPTO_RMD160=m
+CONFIG_CRYPTO_RMD256=m
+CONFIG_CRYPTO_RMD320=m
+CONFIG_CRYPTO_SHA512=m
+CONFIG_CRYPTO_TGR192=m
+CONFIG_CRYPTO_WP512=m
+CONFIG_CRYPTO_BLOWFISH=m
+CONFIG_CRYPTO_CAMELLIA=m
+CONFIG_CRYPTO_CAST5=m
+CONFIG_CRYPTO_CAST6=m
+CONFIG_CRYPTO_SERPENT=m
+CONFIG_CRYPTO_TWOFISH=m
+CONFIG_CRYPTO_ANSI_CPRNG=y
+CONFIG_CRYPTO_DEV_FSL_CAAM=y
+CONFIG_CRYPTO_DEV_FSL_CAAM_SM=y
+CONFIG_CRYPTO_DEV_FSL_CAAM_SM_TEST=m
+CONFIG_CRYPTO_DEV_FSL_CAAM_SECVIO=y
+CONFIG_CRYPTO_DEV_FSL_DPAA2_CAAM=y
+CONFIG_CRYPTO_PCBC=m
+CONFIG_CRYPTO_XCBC=m
+CONFIG_CRYPTO_VMAC=m
+CONFIG_CRYPTO_SM3=m
+CONFIG_CRYPTO_STREEBOG=m
+CONFIG_CRYPTO_ANUBIS=m
+CONFIG_CRYPTO_DES=m
+CONFIG_CRYPTO_FCRYPT=m
+CONFIG_CRYPTO_KHAZAD=m
+CONFIG_CRYPTO_SALSA20=m
+CONFIG_CRYPTO_SEED=m
+CONFIG_CRYPTO_SM4=m
+CONFIG_CRYPTO_TEA=m
+CONFIG_INDIRECT_PIO=y
+CONFIG_CMA_SIZE_MBYTES=320
+CONFIG_PRINTK_TIME=y
+CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_FS=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_DEBUG_KERNEL=y
+# CONFIG_SCHED_DEBUG is not set
+# CONFIG_DEBUG_PREEMPT is not set
+# CONFIG_FTRACE is not set
+CONFIG_MEMTEST=y
+CONFIG_CORESIGHT=y
+CONFIG_CORESIGHT_LINK_AND_SINK_TMC=y
+CONFIG_CORESIGHT_SOURCE_ETM4X=y
diff -Naur A/arch/arm64/configs/iw_rainbowg27m_uuu_defconfig B/arch/arm64/configs/iw_rainbowg27m_uuu_defconfig
--- A/arch/arm64/configs/iw_rainbowg27m_uuu_defconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/arch/arm64/configs/iw_rainbowg27m_uuu_defconfig	2020-08-21 13:50:05.383419927 +0530
@@ -0,0 +1,898 @@
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_AUDIT=y
+CONFIG_NO_HZ_IDLE=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_PREEMPT=y
+CONFIG_IRQ_TIME_ACCOUNTING=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_IKCONFIG=y
+CONFIG_IKCONFIG_PROC=y
+CONFIG_NUMA_BALANCING=y
+CONFIG_MEMCG=y
+CONFIG_MEMCG_SWAP=y
+CONFIG_BLK_CGROUP=y
+CONFIG_CGROUP_PIDS=y
+CONFIG_CGROUP_HUGETLB=y
+CONFIG_CPUSETS=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_CGROUP_PERF=y
+CONFIG_USER_NS=y
+CONFIG_SCHED_AUTOGROUP=y
+CONFIG_RELAY=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_KALLSYMS_ALL=y
+# CONFIG_COMPAT_BRK is not set
+CONFIG_PROFILING=y
+CONFIG_ARCH_LAYERSCAPE=y
+CONFIG_ARCH_MXC=y
+CONFIG_IWG27M=y
+CONFIG_ARCH_S32=y
+CONFIG_SOC_S32V234=y
+CONFIG_ARM64_VA_BITS_48=y
+CONFIG_SCHED_MC=y
+CONFIG_NUMA=y
+CONFIG_SECCOMP=y
+CONFIG_KEXEC=y
+CONFIG_CRASH_DUMP=y
+CONFIG_XEN=y
+CONFIG_FORCE_MAX_ZONEORDER=14
+CONFIG_COMPAT=y
+CONFIG_RANDOMIZE_BASE=y
+CONFIG_PM_DEBUG=y
+CONFIG_PM_TEST_SUSPEND=y
+CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
+CONFIG_ARM_CPUIDLE=y
+CONFIG_ARM_PSCI_CPUIDLE=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_STAT=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
+CONFIG_CPUFREQ_DT=y
+CONFIG_ACPI_CPPC_CPUFREQ=m
+CONFIG_ARM_SCPI_CPUFREQ=y
+CONFIG_ARM_IMX_CPUFREQ_DT=y
+CONFIG_QORIQ_CPUFREQ=y
+CONFIG_ARM_SCPI_PROTOCOL=y
+CONFIG_EFI_CAPSULE_LOADER=y
+CONFIG_IMX_DSP=y
+CONFIG_IMX_SCU=y
+CONFIG_IMX_SCU_PD=y
+CONFIG_IMX_SECO_MU=y
+CONFIG_ACPI=y
+CONFIG_ACPI_APEI=y
+CONFIG_ACPI_APEI_GHES=y
+CONFIG_ACPI_APEI_PCIEAER=y
+CONFIG_ACPI_APEI_MEMORY_FAILURE=y
+CONFIG_ACPI_APEI_EINJ=y
+CONFIG_VIRTUALIZATION=y
+CONFIG_KVM=y
+CONFIG_ARM64_CRYPTO=y
+CONFIG_CRYPTO_SHA1_ARM64_CE=y
+CONFIG_CRYPTO_SHA2_ARM64_CE=y
+CONFIG_CRYPTO_SHA512_ARM64_CE=m
+CONFIG_CRYPTO_SHA3_ARM64=m
+CONFIG_CRYPTO_SM3_ARM64_CE=m
+CONFIG_CRYPTO_GHASH_ARM64_CE=y
+CONFIG_CRYPTO_CRCT10DIF_ARM64_CE=m
+CONFIG_CRYPTO_AES_ARM64_CE_CCM=y
+CONFIG_CRYPTO_AES_ARM64_CE_BLK=y
+CONFIG_CRYPTO_CHACHA20_NEON=m
+CONFIG_CRYPTO_AES_ARM64_BS=m
+CONFIG_JUMP_LABEL=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
+CONFIG_KSM=y
+CONFIG_MEMORY_FAILURE=y
+CONFIG_TRANSPARENT_HUGEPAGE=y
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_BOOTP=y
+CONFIG_IPV6_SIT=m
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=m
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NETFILTER_XT_TARGET_CHECKSUM=m
+CONFIG_NETFILTER_XT_TARGET_LOG=m
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
+CONFIG_IP_NF_IPTABLES=m
+CONFIG_IP_NF_FILTER=m
+CONFIG_IP_NF_TARGET_REJECT=m
+CONFIG_IP_NF_NAT=m
+CONFIG_IP_NF_TARGET_MASQUERADE=m
+CONFIG_IP_NF_MANGLE=m
+CONFIG_IP6_NF_IPTABLES=m
+CONFIG_IP6_NF_FILTER=m
+CONFIG_IP6_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_MANGLE=m
+CONFIG_IP6_NF_NAT=m
+CONFIG_IP6_NF_TARGET_MASQUERADE=m
+CONFIG_BRIDGE=m
+CONFIG_BRIDGE_VLAN_FILTERING=y
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_VLAN_8021Q_MVRP=y
+CONFIG_LLC2=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_MULTIQ=y
+CONFIG_NET_SCH_CBS=y
+CONFIG_NET_SCH_TAPRIO=y
+CONFIG_NET_SCH_MQPRIO=y
+CONFIG_NET_CLS_BASIC=y
+CONFIG_NET_CLS_TCINDEX=y
+CONFIG_TSN=y
+CONFIG_NET_SWITCHDEV=y
+CONFIG_BPF_JIT=y
+CONFIG_CAN=y
+CONFIG_CAN_FLEXCAN=y
+CONFIG_BT=m
+CONFIG_BT_RFCOMM=m
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=m
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=m
+# CONFIG_BT_HS is not set
+# CONFIG_BT_LE is not set
+CONFIG_BT_LEDS=y
+# CONFIG_BT_DEBUGFS is not set
+CONFIG_BT_HCIBTUSB=m
+CONFIG_BT_HCIUART=m
+CONFIG_BT_HCIUART_H4=y
+CONFIG_BT_HCIUART_BCSP=y
+CONFIG_BT_HCIUART_ATH3K=y
+CONFIG_BT_HCIUART_LL=y
+CONFIG_BT_HCIUART_3WIRE=y
+CONFIG_BT_HCIUART_BCM=y
+CONFIG_BT_HCIUART_QCA=y
+CONFIG_BT_HCIVHCI=y
+CONFIG_CFG80211=y
+CONFIG_NL80211_TESTMODE=y
+CONFIG_CFG80211_WEXT=y
+CONFIG_MAC80211=y
+CONFIG_MAC80211_LEDS=y
+CONFIG_NET_9P=y
+CONFIG_NET_9P_VIRTIO=y
+CONFIG_PCI=y
+CONFIG_PCIEPORTBUS=y
+CONFIG_PCI_IOV=y
+CONFIG_HOTPLUG_PCI=y
+CONFIG_HOTPLUG_PCI_ACPI=y
+CONFIG_PCI_HOST_GENERIC=y
+CONFIG_PCI_XGENE=y
+CONFIG_PCIE_ALTERA=y
+CONFIG_PCIE_ALTERA_MSI=y
+CONFIG_PCI_HOST_THUNDER_PEM=y
+CONFIG_PCI_HOST_THUNDER_ECAM=y
+CONFIG_PCI_IMX6=y
+CONFIG_PCI_LAYERSCAPE=y
+CONFIG_PCI_HISI=y
+CONFIG_PCIE_KIRIN=y
+CONFIG_PCIE_LAYERSCAPE_GEN4=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_FW_LOADER_USER_HELPER=y
+CONFIG_FW_LOADER_USER_HELPER_FALLBACK=y
+CONFIG_BRCMSTB_GISB_ARB=y
+CONFIG_SIMPLE_PM_BUS=y
+CONFIG_VEXPRESS_CONFIG=y
+CONFIG_FSL_MC_BUS=y
+CONFIG_FSL_MC_UAPI_SUPPORT=y
+CONFIG_MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
+CONFIG_MTD_BLOCK=y
+CONFIG_MTD_CFI=y
+CONFIG_MTD_CFI_ADV_OPTIONS=y
+CONFIG_MTD_CFI_INTELEXT=y
+CONFIG_MTD_CFI_AMDSTD=y
+CONFIG_MTD_CFI_STAA=y
+CONFIG_MTD_PHYSMAP=y
+CONFIG_MTD_PHYSMAP_OF=y
+CONFIG_MTD_DATAFLASH=y
+CONFIG_MTD_SST25L=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_MTD_NAND_DENALI_DT=y
+CONFIG_MTD_NAND_GPMI_NAND=y
+CONFIG_MTD_NAND_FSL_IFC=y
+CONFIG_MTD_SPI_NOR=y
+# CONFIG_MTD_SPI_NOR_USE_4K_SECTORS is not set
+CONFIG_MTD_UBI=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_NBD=m
+CONFIG_XEN_BLKDEV_BACKEND=m
+CONFIG_VIRTIO_BLK=y
+CONFIG_BLK_DEV_NVME=y
+CONFIG_SENSORS_FXOS8700=y
+CONFIG_SENSORS_FXAS2100X=y
+CONFIG_SRAM=y
+CONFIG_EEPROM_AT24=y
+CONFIG_EEPROM_AT25=m
+# CONFIG_SCSI_PROC_FS is not set
+CONFIG_BLK_DEV_SD=y
+CONFIG_SCSI_SAS_ATA=y
+CONFIG_SCSI_HISI_SAS=y
+CONFIG_SCSI_HISI_SAS_PCI=y
+CONFIG_SCSI_MPT3SAS=m
+CONFIG_SCSI_UFSHCD=y
+CONFIG_SCSI_UFSHCD_PLATFORM=y
+CONFIG_ATA=y
+CONFIG_SATA_AHCI=y
+CONFIG_SATA_AHCI_PLATFORM=y
+CONFIG_AHCI_IMX=y
+CONFIG_AHCI_CEVA=y
+CONFIG_AHCI_XGENE=y
+CONFIG_AHCI_QORIQ=y
+CONFIG_SATA_SIL24=y
+CONFIG_PATA_PLATFORM=y
+CONFIG_PATA_OF_PLATFORM=y
+CONFIG_MD=y
+CONFIG_BLK_DEV_MD=m
+CONFIG_BLK_DEV_DM=m
+CONFIG_DM_MIRROR=m
+CONFIG_DM_ZERO=m
+CONFIG_NETDEVICES=y
+CONFIG_MACVLAN=m
+CONFIG_MACVTAP=m
+CONFIG_TUN=y
+CONFIG_VETH=m
+CONFIG_VIRTIO_NET=y
+CONFIG_AMD_XGBE=y
+CONFIG_ATL1C=m
+CONFIG_BNX2X=m
+CONFIG_MACB=y
+CONFIG_THUNDER_NIC_PF=y
+CONFIG_FEC=y
+CONFIG_FSL_SDK_DPAA_ETH=y
+CONFIG_FSL_DPAA2_ETH=y
+CONFIG_FSL_ENETC=y
+CONFIG_FSL_ENETC_VF=y
+CONFIG_FSL_ENETC_MDIO=y
+CONFIG_HIX5HD2_GMAC=y
+CONFIG_HNS_DSAF=y
+CONFIG_HNS_ENET=y
+CONFIG_HNS3=y
+CONFIG_HNS3_HCLGE=y
+CONFIG_HNS3_ENET=y
+CONFIG_E1000=y
+CONFIG_E1000E=y
+CONFIG_IGB=y
+CONFIG_IGBVF=y
+CONFIG_MVMDIO=y
+CONFIG_SKY2=y
+CONFIG_MLX4_EN=m
+CONFIG_MLX5_CORE=m
+CONFIG_MLX5_CORE_EN=y
+CONFIG_MSCC_OCELOT_SWITCH=y
+CONFIG_QCOM_EMAC=m
+CONFIG_SMC91X=y
+CONFIG_SMSC911X=y
+CONFIG_STMMAC_ETH=y
+CONFIG_MDIO_BITBANG=y
+CONFIG_MDIO_BUS_MUX_MULTIPLEXER=y
+CONFIG_AQUANTIA_PHY=y
+CONFIG_AT803X_PHY=y
+CONFIG_INPHI_PHY=y
+CONFIG_MARVELL_PHY=m
+CONFIG_MARVELL_10G_PHY=m
+CONFIG_MICREL_PHY=y
+CONFIG_MICROSEMI_PHY=y
+CONFIG_NXP_TJA11XX_PHY=y
+CONFIG_REALTEK_PHY=y
+CONFIG_ROCKCHIP_PHY=y
+CONFIG_VITESSE_PHY=y
+CONFIG_USB_PEGASUS=m
+CONFIG_USB_RTL8150=m
+CONFIG_USB_RTL8152=m
+CONFIG_USB_LAN78XX=m
+CONFIG_USB_USBNET=m
+CONFIG_USB_NET_DM9601=m
+CONFIG_USB_NET_SR9800=m
+CONFIG_USB_NET_SMSC75XX=m
+CONFIG_USB_NET_SMSC95XX=m
+CONFIG_USB_NET_PLUSB=m
+CONFIG_USB_NET_MCS7830=m
+CONFIG_BRCMUTIL=m
+CONFIG_BRCMFMAC=m
+CONFIG_BRCMFMAC_PROTO_BCDC=y
+CONFIG_BRCMFMAC_PROTO_MSGBUF=y
+CONFIG_BRCMFMAC_SDIO=y
+CONFIG_BRCMFMAC_PCIE=y
+CONFIG_HOSTAP=y
+CONFIG_MXMWIFIEX=m
+CONFIG_WL18XX=m
+CONFIG_WLCORE_SDIO=m
+CONFIG_IVSHMEM_NET=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_KEYBOARD_ADC=m
+CONFIG_KEYBOARD_GPIO=y
+CONFIG_KEYBOARD_SNVS_PWRKEY=y
+CONFIG_KEYBOARD_IMX_SC_PWRKEY=y
+CONFIG_KEYBOARD_CROS_EC=y
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_CST148=y
+CONFIG_TOUCHSCREEN_ATMEL_MXT=m
+CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_I2C=m
+CONFIG_HYN_CST3XX_TOUCHSCREEN_SUPPORT=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_MPL3115=y
+CONFIG_INPUT_ISL29023=y
+# CONFIG_SERIO_SERPORT is not set
+CONFIG_SERIO_AMBAKMI=y
+CONFIG_LEGACY_PTY_COUNT=16
+CONFIG_SERIAL_8250=y
+CONFIG_SERIAL_8250_CONSOLE=y
+CONFIG_SERIAL_8250_EXTENDED=y
+CONFIG_SERIAL_8250_SHARE_IRQ=y
+CONFIG_SERIAL_8250_DW=y
+CONFIG_SERIAL_OF_PLATFORM=y
+CONFIG_SERIAL_AMBA_PL011=y
+CONFIG_SERIAL_AMBA_PL011_CONSOLE=y
+CONFIG_SERIAL_IMX=y
+CONFIG_SERIAL_IMX_CONSOLE=y
+CONFIG_SERIAL_XILINX_PS_UART=y
+CONFIG_SERIAL_XILINX_PS_UART_CONSOLE=y
+CONFIG_SERIAL_FSL_LPUART=y
+CONFIG_SERIAL_FSL_LPUART_CONSOLE=y
+CONFIG_SERIAL_FSL_LINFLEXUART=y
+CONFIG_SERIAL_FSL_LINFLEXUART_CONSOLE=y
+CONFIG_SERIAL_DEV_BUS=y
+CONFIG_VIRTIO_CONSOLE=y
+CONFIG_IPMI_HANDLER=m
+CONFIG_IPMI_DEVICE_INTERFACE=m
+CONFIG_IPMI_SI=m
+CONFIG_TCG_TPM=y
+CONFIG_TCG_TIS_I2C_INFINEON=y
+CONFIG_I2C_CHARDEV=y
+CONFIG_I2C_MUX=y
+CONFIG_I2C_MUX_PCA954x=y
+CONFIG_I2C_DESIGNWARE_PLATFORM=y
+CONFIG_I2C_GPIO=m
+CONFIG_I2C_IMX=y
+CONFIG_I2C_IMX_LPI2C=y
+CONFIG_I2C_RK3X=y
+CONFIG_I2C_RPBUS=y
+CONFIG_I2C_CROS_EC_TUNNEL=y
+CONFIG_XEN_I2C_BACKEND=y
+CONFIG_I2C_SLAVE=y
+CONFIG_SPI=y
+CONFIG_SPI_FSL_LPSPI=y
+CONFIG_SPI_FSL_QUADSPI=y
+CONFIG_SPI_NXP_FLEXSPI=y
+CONFIG_SPI_IMX=y
+CONFIG_SPI_FSL_DSPI=y
+CONFIG_SPI_PL022=y
+CONFIG_SPI_ROCKCHIP=y
+CONFIG_SPI_SPIDEV=y
+CONFIG_SPI_SLAVE=y
+CONFIG_SPI_SLAVE_TIME=y
+CONFIG_SPI_SLAVE_SYSTEM_CONTROL=y
+CONFIG_SPMI=y
+CONFIG_PINCTRL_SINGLE=y
+CONFIG_PINCTRL_MAX77620=y
+CONFIG_PINCTRL_IMX8MM=y
+CONFIG_PINCTRL_IMX8MN=y
+CONFIG_PINCTRL_IMX8MP=y
+CONFIG_PINCTRL_IMX8MQ=y
+CONFIG_PINCTRL_IMX8QM=y
+CONFIG_PINCTRL_IMX8QXP=y
+CONFIG_PINCTRL_IMX8DXL=y
+CONFIG_PINCTRL_S32V234=y
+CONFIG_GPIOLIB=y
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_DWAPB=y
+CONFIG_IMX8_UNUSED_GPIO=y
+CONFIG_GPIO_MB86S7X=y
+CONFIG_GPIO_MPC8XXX=y
+CONFIG_GPIO_PL061=y
+CONFIG_GPIO_XGENE=y
+CONFIG_GPIO_MAX732X=y
+CONFIG_GPIO_PCA953X=y
+CONFIG_GPIO_PCA953X_IRQ=y
+CONFIG_GPIO_MAX77620=y
+CONFIG_POWER_AVS=y
+CONFIG_POWER_RESET_BRCMSTB=y
+CONFIG_POWER_RESET_VEXPRESS=y
+CONFIG_POWER_RESET_XGENE=y
+CONFIG_POWER_RESET_SYSCON=y
+CONFIG_SYSCON_REBOOT_MODE=y
+CONFIG_BATTERY_SBS=m
+CONFIG_BATTERY_BQ27XXX=y
+CONFIG_SENSORS_ARM_SCPI=y
+CONFIG_SENSORS_LM90=m
+CONFIG_SENSORS_PWM_FAN=m
+CONFIG_SENSORS_INA2XX=m
+CONFIG_SENSORS_INA3221=m
+CONFIG_THERMAL_WRITABLE_TRIPS=y
+CONFIG_THERMAL_GOV_POWER_ALLOCATOR=y
+CONFIG_CPU_THERMAL=y
+CONFIG_THERMAL_EMULATION=y
+CONFIG_IMX_SC_THERMAL=y
+CONFIG_DEVICE_THERMAL=y
+CONFIG_IMX8MM_THERMAL=y
+CONFIG_QORIQ_THERMAL=y
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_SYSFS=y
+#
+# Watchdog Device Drivers
+#
+CONFIG_SOFT_WATCHDOG=y
+CONFIG_ARM_SP805_WATCHDOG=y
+CONFIG_ARM_SBSA_WATCHDOG=y
+CONFIG_DW_WATCHDOG=y
+CONFIG_IMX2_WDT=y
+CONFIG_IMX_SC_WDT=y
+CONFIG_XEN_WDT=y
+CONFIG_MFD_BD9571MWV=y
+CONFIG_MFD_AXP20X_I2C=y
+CONFIG_MFD_IMX_AUDIOMIX=y
+CONFIG_MFD_HI6421_PMIC=y
+CONFIG_MFD_MAX77620=y
+CONFIG_MFD_RK808=y
+CONFIG_MFD_SEC_CORE=y
+CONFIG_MFD_ROHM_BD718XX=y
+CONFIG_MFD_PCA9450=y
+CONFIG_REGULATOR=y
+CONFIG_REGULATOR_FIXED_VOLTAGE=y
+CONFIG_REGULATOR_AXP20X=y
+CONFIG_REGULATOR_BD718XX=y
+CONFIG_REGULATOR_BD9571MWV=y
+CONFIG_REGULATOR_FAN53555=y
+CONFIG_REGULATOR_GPIO=y
+CONFIG_REGULATOR_HI6421V530=y
+CONFIG_REGULATOR_MAX77620=y
+CONFIG_REGULATOR_MAX8973=y
+CONFIG_REGULATOR_PCA9450=y
+CONFIG_REGULATOR_PFUZE100=y
+CONFIG_REGULATOR_PWM=y
+CONFIG_REGULATOR_QCOM_SPMI=y
+CONFIG_REGULATOR_RK808=y
+CONFIG_REGULATOR_S2MPS11=y
+CONFIG_REGULATOR_VCTRL=m
+CONFIG_RC_CORE=m
+CONFIG_RC_DECODERS=y
+CONFIG_RC_DEVICES=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_ANALOG_TV_SUPPORT=y
+CONFIG_MEDIA_DIGITAL_TV_SUPPORT=y
+CONFIG_MEDIA_CONTROLLER=y
+CONFIG_VIDEO_V4L2_SUBDEV_API=y
+# CONFIG_DVB_NET is not set
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=m
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_VIDEO_MX8_CAPTURE=y
+CONFIG_VIDEO_MXC_CAPTURE=y
+#
+# IMX8 Camera ISI/MIPI Features support
+#
+CONFIG_IMX8_MEDIA_DEVICE=y
+CONFIG_IMX8_CAPTURE_DRIVER=y
+CONFIG_IMX8_MIPI_CSI2=y
+CONFIG_IMX8_PARALLEL_CSI=y
+CONFIG_IMX8_MIPI_CSI2_YAV=y
+CONFIG_IMX8_JPEG=y
+CONFIG_IMX8_HDMI_RX=y
+CONFIG_VIDEO_MXC_CSI_CAMERA=y
+CONFIG_MXC_MIPI_CSI=y
+CONFIG_MXC_CAMERA_OV5640_MIPI_V2=y
+CONFIG_V4L_MEM2MEM_DRIVERS=y
+CONFIG_VIDEO_OV5640=y
+CONFIG_IMX_DPU_CORE=y
+CONFIG_IMX_LCDIF_CORE=y
+CONFIG_IMX_LCDIFV3_CORE=y
+CONFIG_DRM=y
+CONFIG_DRM_I2C_NXP_TDA998X=m
+CONFIG_DRM_MALI_DISPLAY=m
+CONFIG_DRM_NOUVEAU=m
+CONFIG_DRM_RCAR_LVDS=m
+CONFIG_DRM_PANEL_SIMPLE=y
+CONFIG_DRM_PANEL_RAYDIUM_RM67191=y
+CONFIG_DRM_PANEL_RAYDIUM_RM67198=y
+CONFIG_DRM_PANEL_SEIKO_43WVF1G=y
+CONFIG_DRM_FSL_IMX_LVDS_BRIDGE=y
+CONFIG_DRM_SII902X=m
+CONFIG_DRM_I2C_ADV7511=y
+CONFIG_DRM_NWL_MIPI_DSI=y
+CONFIG_DRM_CDNS_HDMI_CEC=y
+CONFIG_DRM_DW_HDMI_I2S_AUDIO=m
+CONFIG_DRM_DW_HDMI_GP_AUDIO=y
+CONFIG_DRM_DW_HDMI_CEC=y
+CONFIG_DRM_ITE_IT6263=y
+CONFIG_DRM_IMX=y
+CONFIG_DRM_IMX_LCDIF_MUX_DISPLAY=y
+CONFIG_DRM_IMX_PARALLEL_DISPLAY=y
+CONFIG_DRM_IMX_TVE=y
+CONFIG_DRM_IMX_LDB=y
+CONFIG_DRM_IMX8QM_LDB=y
+CONFIG_DRM_IMX8QXP_LDB=y
+CONFIG_DRM_IMX8MP_LDB=y
+CONFIG_DRM_IMX_HDMI=y
+CONFIG_DRM_IMX_SEC_DSIM=y
+CONFIG_DRM_IMX_CDNS_MHDP=y
+CONFIG_DRM_IMX_DCSS=y
+CONFIG_DRM_ETNAVIV=m
+CONFIG_DRM_HISI_HIBMC=m
+CONFIG_DRM_HISI_KIRIN=m
+CONFIG_DRM_MXSFB=y
+CONFIG_DRM_PL111=m
+CONFIG_DRM_LIMA=m
+CONFIG_DRM_PANFROST=m
+CONFIG_FB_ARMCLCD=y
+CONFIG_FB_EFI=y
+CONFIG_BACKLIGHT_GENERIC=m
+CONFIG_BACKLIGHT_PWM=y
+CONFIG_BACKLIGHT_LP855X=m
+CONFIG_FRAMEBUFFER_CONSOLE=y
+CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY=y
+CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=y
+CONFIG_LOGO=y
+# CONFIG_LOGO_LINUX_MONO is not set
+# CONFIG_LOGO_LINUX_VGA16 is not set
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_DYNAMIC_MINORS=y
+CONFIG_SND_USB_AUDIO=m
+CONFIG_SND_SOC=y
+CONFIG_SND_SOC_FSL_DAI=m
+CONFIG_SND_SOC_FSL_EASRC=y
+CONFIG_SND_IMX_SOC=y
+CONFIG_SND_SOC_IMX_AK4458=y
+CONFIG_SND_SOC_IMX_AK5558=y
+CONFIG_SND_SOC_IMX_AK4497=y
+CONFIG_SND_SOC_IMX_WM8960=y
+CONFIG_SND_SOC_IMX_WM8524=y
+CONFIG_SND_SOC_IMX_CS42888=y
+CONFIG_SND_SOC_IMX_MICFIL=y
+CONFIG_SND_SOC_IMX_RPMSG=y
+CONFIG_SND_SOC_IMX_SGTL5000=y
+CONFIG_SND_SOC_IMX_MQS=y
+CONFIG_SND_SOC_IMX_SPDIF=y
+CONFIG_SND_SOC_IMX_AUDMIX=y
+CONFIG_SND_SOC_IMX_PDM_MIC=y
+CONFIG_SND_SOC_IMX_DSP=y
+CONFIG_SND_SOC_IMX_CDNHDMI=y
+CONFIG_SND_SOC_IMX_XCVR=y
+CONFIG_SND_SOC_SOF_TOPLEVEL=y
+CONFIG_SND_SOC_SOF_OF=m
+CONFIG_SND_SOC_SOF_IMX_TOPLEVEL=y
+CONFIG_SND_SOC_SOF_IMX8_SUPPORT=m
+CONFIG_SND_SOC_SOF_IMX8M_SUPPORT=m
+CONFIG_SND_SOC_AK4613=m
+CONFIG_SND_SOC_BT_SCO=y
+CONFIG_SND_SOC_DMIC=m
+CONFIG_SND_SOC_ES7134=m
+CONFIG_SND_SOC_ES7241=m
+CONFIG_SND_SOC_MAX98357A=m
+CONFIG_SND_SOC_PCM3168A_I2C=m
+CONFIG_SND_SOC_SGTL5000=y
+CONFIG_SND_SOC_SPDIF=m
+CONFIG_SND_SOC_TAS571X=m
+CONFIG_SND_SIMPLE_CARD=y
+CONFIG_SND_AUDIO_GRAPH_CARD=y
+CONFIG_I2C_HID=m
+CONFIG_USB=y
+CONFIG_USB_OTG=y
+CONFIG_USB_OTG_WHITELIST=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_HCD_PLATFORM=y
+CONFIG_USB_OHCI_HCD=y
+CONFIG_USB_OHCI_HCD_PLATFORM=y
+CONFIG_USB_HCD_TEST_MODE=y
+CONFIG_USB_ACM=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_CDNS3_HOST=y
+CONFIG_USB_MUSB_HDRC=y
+CONFIG_USB_DWC3=y
+CONFIG_USB_DWC2=y
+CONFIG_USB_CHIPIDEA=y
+CONFIG_USB_CHIPIDEA_UDC=y
+CONFIG_USB_CHIPIDEA_HOST=y
+CONFIG_USB_ISP1760=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_CONSOLE=y
+CONFIG_USB_SERIAL_GENERIC=y
+CONFIG_USB_SERIAL_SIMPLE=y
+CONFIG_USB_SERIAL_FTDI_SIO=y
+CONFIG_USB_TEST=m
+CONFIG_USB_EHSET_TEST_FIXTURE=m
+CONFIG_USB_HSIC_USB3503=y
+CONFIG_NOP_USB_XCEIV=y
+CONFIG_USB_MXS_PHY=y
+CONFIG_USB_ULPI=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_SNP_UDC_PLAT=y
+CONFIG_USB_BDC_UDC=y
+#
+# Platform Support
+#
+CONFIG_USB_LIBCOMPOSITE=y
+CONFIG_USB_F_SS_LB=y
+CONFIG_USB_U_SERIAL=y
+CONFIG_USB_F_SERIAL=y
+CONFIG_USB_F_MASS_STORAGE=y
+CONFIG_USB_F_FS=y
+CONFIG_USB_CONFIGFS=y
+CONFIG_USB_CONFIGFS_SERIAL=y
+CONFIG_USB_CONFIGFS_ACM=y
+CONFIG_USB_CONFIGFS_OBEX=y
+CONFIG_USB_CONFIGFS_NCM=y
+CONFIG_USB_CONFIGFS_ECM=y
+CONFIG_USB_CONFIGFS_ECM_SUBSET=y
+CONFIG_USB_CONFIGFS_RNDIS=y
+CONFIG_USB_CONFIGFS_EEM=y
+CONFIG_USB_CONFIGFS_MASS_STORAGE=y
+CONFIG_USB_CONFIGFS_F_LB_SS=y
+CONFIG_USB_CONFIGFS_F_FS=y
+CONFIG_USB_CONFIGFS_F_UAC1=y
+# CONFIG_USB_CONFIGFS_F_UAC1_LEGACY is not set
+CONFIG_USB_CONFIGFS_F_UAC2=y
+CONFIG_USB_CONFIGFS_F_MIDI=y
+CONFIG_USB_CONFIGFS_F_HID=y
+# CONFIG_USB_CONFIGFS_F_UVC is not set
+CONFIG_USB_ZERO=m
+CONFIG_USB_AUDIO=m
+CONFIG_USB_ETH=m
+CONFIG_USB_MASS_STORAGE=m
+CONFIG_USB_G_SERIAL=m
+CONFIG_TYPEC=y
+CONFIG_TYPEC_TCPM=y
+CONFIG_TYPEC_TCPCI=y
+CONFIG_TYPEC_FUSB302=y
+CONFIG_TYPEC_SWITCH_GPIO=y
+CONFIG_MMC=y
+CONFIG_MMC_BLOCK_MINORS=32
+CONFIG_MMC_ARMMMCI=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_ACPI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_SDHCI_OF_ARASAN=y
+CONFIG_MMC_SDHCI_OF_ESDHC=y
+CONFIG_MMC_SDHCI_CADENCE=y
+CONFIG_MMC_SDHCI_ESDHC_IMX=y
+CONFIG_MMC_SDHCI_F_SDH30=y
+CONFIG_MMC_SPI=y
+CONFIG_MMC_DW=y
+CONFIG_MMC_DW_EXYNOS=y
+CONFIG_MMC_DW_HI3798CV200=y
+CONFIG_MMC_DW_K3=y
+CONFIG_MMC_SDHCI_XENON=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_PWM=y
+CONFIG_LEDS_SYSCON=y
+CONFIG_LEDS_TRIGGER_DISK=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_CPU=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_PANIC=y
+CONFIG_EDAC=y
+CONFIG_EDAC_GHES=y
+CONFIG_EDAC_SYNOPSYS=y
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_DS1307=y
+CONFIG_RTC_DRV_MAX77686=y
+CONFIG_RTC_DRV_RK808=m
+CONFIG_RTC_DRV_PCF85363=y
+CONFIG_RTC_DRV_RX8581=m
+CONFIG_RTC_DRV_S5M=y
+CONFIG_RTC_DRV_DS3232=y
+CONFIG_RTC_DRV_PCF2127=y
+CONFIG_RTC_DRV_EFI=y
+CONFIG_RTC_DRV_CROS_EC=y
+CONFIG_RTC_DRV_PL031=y
+CONFIG_RTC_DRV_SNVS=y
+CONFIG_RTC_DRV_IMX_SC=y
+CONFIG_DMADEVICES=y
+CONFIG_BCM_SBA_RAID=m
+CONFIG_FSL_EDMA=y
+CONFIG_FSL_EDMA_V3=y
+CONFIG_IMX_SDMA=y
+CONFIG_MV_XOR_V2=y
+CONFIG_MXS_DMA=y
+CONFIG_PL330_DMA=y
+CONFIG_QCOM_HIDMA_MGMT=y
+CONFIG_QCOM_HIDMA=y
+CONFIG_DMATEST=y
+CONFIG_UIO=y
+CONFIG_UIO_PCI_GENERIC=y
+CONFIG_UIO_IVSHMEM=y
+CONFIG_VFIO=y
+CONFIG_VFIO_PCI=y
+CONFIG_VFIO_FSL_MC=y
+CONFIG_VIRTIO_PCI=y
+CONFIG_VIRTIO_BALLOON=y
+CONFIG_VIRTIO_MMIO=y
+CONFIG_XEN_GNTDEV=y
+CONFIG_XEN_GRANT_DEV_ALLOC=y
+CONFIG_STAGING=y
+CONFIG_STAGING_MEDIA=y
+CONFIG_VIDEO_IMX_CAPTURE=y
+CONFIG_ION=y
+CONFIG_ION_SYSTEM_HEAP=y
+CONFIG_ION_CMA_HEAP=y
+CONFIG_FSL_DPAA2=y
+CONFIG_FSL_DPAA2_ETHSW=y
+CONFIG_FSL_DPAA2_MAC=y
+CONFIG_FSL_SDK_DPA=y
+CONFIG_FSL_PPFE=y
+CONFIG_FSL_PPFE_UTIL_DISABLED=y
+CONFIG_MFD_CROS_EC=y
+CONFIG_CROS_EC_I2C=y
+CONFIG_CROS_EC_SPI=y
+CONFIG_COMMON_CLK_VERSATILE=y
+CONFIG_CLK_SP810=y
+CONFIG_CLK_VEXPRESS_OSC=y
+CONFIG_COMMON_CLK_RK808=y
+CONFIG_COMMON_CLK_SCPI=y
+CONFIG_COMMON_CLK_CS2000_CP=y
+CONFIG_COMMON_CLK_S2MPS11=y
+CONFIG_COMMON_CLK_XGENE=y
+CONFIG_COMMON_CLK_PWM=y
+CONFIG_CLK_IMX8MM=y
+CONFIG_CLK_IMX8MN=y
+CONFIG_CLK_IMX8MP=y
+CONFIG_CLK_IMX8MQ=y
+CONFIG_CLK_IMX8QXP=y
+CONFIG_HWSPINLOCK=y
+CONFIG_ARM_MHU=y
+CONFIG_IMX_MBOX=y
+CONFIG_PLATFORM_MHU=y
+CONFIG_ARM_SMMU=y
+CONFIG_ARM_SMMU_V3=y
+CONFIG_REMOTEPROC=y
+CONFIG_IMX_REMOTEPROC=y
+CONFIG_RPMSG_QCOM_GLINK_RPM=y
+CONFIG_SOC_BRCMSTB=y
+CONFIG_FSL_MC_DPIO=y
+CONFIG_FSL_QIXIS=y
+CONFIG_IMX_SCU_SOC=y
+CONFIG_SECVIO_SC=y
+CONFIG_SOC_TI=y
+CONFIG_EXTCON_USB_GPIO=y
+CONFIG_EXTCON_USBC_CROS_EC=y
+CONFIG_IIO=y
+CONFIG_IMX8QXP_ADC=y
+CONFIG_IIO_CROS_EC_SENSORS_CORE=m
+CONFIG_IIO_CROS_EC_SENSORS=m
+CONFIG_IIO_CROS_EC_LIGHT_PROX=m
+CONFIG_IIO_CROS_EC_BARO=m
+CONFIG_PWM=y
+CONFIG_PWM_CROS_EC=m
+CONFIG_PWM_IMX27=y
+CONFIG_PHY_XGENE=y
+CONFIG_PHY_MIXEL_LVDS=y
+CONFIG_PHY_MIXEL_LVDS_COMBO=y
+CONFIG_PHY_FSL_IMX8MP_LVDS=y
+CONFIG_PHY_MIXEL_MIPI_DPHY=y
+CONFIG_PHY_SAMSUNG_HDMI_PHY=y
+CONFIG_PHY_QCOM_USB_HS=y
+CONFIG_PHY_SAMSUNG_USB2=y
+CONFIG_FSL_IMX8_DDR_PMU=y
+CONFIG_HISI_PMU=y
+CONFIG_NVMEM_IMX_OCOTP=y
+CONFIG_NVMEM_IMX_OCOTP_SCU=y
+CONFIG_FPGA=y
+CONFIG_FPGA_BRIDGE=m
+CONFIG_ALTERA_FREEZE_BRIDGE=m
+CONFIG_FPGA_REGION=m
+CONFIG_OF_FPGA_REGION=m
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+CONFIG_MUX_MMIO=y
+CONFIG_MXC_SIM=y
+CONFIG_MXC_EMVSIM=y
+CONFIG_MXC_MLB150=y
+CONFIG_EXT2_FS=y
+CONFIG_EXT3_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_BTRFS_FS=m
+CONFIG_BTRFS_FS_POSIX_ACL=y
+CONFIG_FANOTIFY=y
+CONFIG_FANOTIFY_ACCESS_PERMISSIONS=y
+CONFIG_QUOTA=y
+CONFIG_AUTOFS4_FS=y
+CONFIG_FUSE_FS=m
+CONFIG_CUSE=m
+CONFIG_OVERLAY_FS=m
+CONFIG_VFAT_FS=y
+CONFIG_HUGETLBFS=y
+CONFIG_CONFIGFS_FS=y
+CONFIG_EFIVAR_FS=y
+CONFIG_JFFS2_FS=y
+CONFIG_UBIFS_FS=y
+CONFIG_SQUASHFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_V4_1=y
+CONFIG_NFS_V4_2=y
+CONFIG_ROOT_NFS=y
+CONFIG_9P_FS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_SECURITY=y
+CONFIG_CRYPTO_USER=y
+CONFIG_CRYPTO_TEST=m
+#
+# Public-key cryptography
+#
+CONFIG_CRYPTO_RSA=y
+CONFIG_CRYPTO_ECC=y
+CONFIG_CRYPTO_ECDH=y
+CONFIG_CRYPTO_CHACHA20POLY1305=m
+CONFIG_CRYPTO_ECHAINIV=y
+CONFIG_CRYPTO_TLS=m
+CONFIG_CRYPTO_CBC=m
+CONFIG_CRYPTO_CFB=m
+CONFIG_CRYPTO_CTS=m
+CONFIG_CRYPTO_LRW=m
+CONFIG_CRYPTO_OFB=m
+CONFIG_CRYPTO_XTS=m
+CONFIG_CRYPTO_MD4=m
+CONFIG_CRYPTO_MD5=m
+CONFIG_CRYPTO_RMD128=m
+CONFIG_CRYPTO_RMD160=m
+CONFIG_CRYPTO_RMD256=m
+CONFIG_CRYPTO_RMD320=m
+CONFIG_CRYPTO_SHA512=m
+CONFIG_CRYPTO_TGR192=m
+CONFIG_CRYPTO_WP512=m
+CONFIG_CRYPTO_BLOWFISH=m
+CONFIG_CRYPTO_CAMELLIA=m
+CONFIG_CRYPTO_CAST5=m
+CONFIG_CRYPTO_CAST6=m
+CONFIG_CRYPTO_SERPENT=m
+CONFIG_CRYPTO_TWOFISH=m
+CONFIG_CRYPTO_ANSI_CPRNG=y
+CONFIG_CRYPTO_DEV_FSL_CAAM=y
+CONFIG_CRYPTO_DEV_FSL_CAAM_SM=y
+CONFIG_CRYPTO_DEV_FSL_CAAM_SM_TEST=m
+CONFIG_CRYPTO_DEV_FSL_CAAM_SECVIO=y
+CONFIG_CRYPTO_DEV_FSL_DPAA2_CAAM=y
+CONFIG_CRYPTO_PCBC=m
+CONFIG_CRYPTO_XCBC=m
+CONFIG_CRYPTO_VMAC=m
+CONFIG_CRYPTO_SM3=m
+CONFIG_CRYPTO_STREEBOG=m
+CONFIG_CRYPTO_ANUBIS=m
+CONFIG_CRYPTO_DES=m
+CONFIG_CRYPTO_FCRYPT=m
+CONFIG_CRYPTO_KHAZAD=m
+CONFIG_CRYPTO_SALSA20=m
+CONFIG_CRYPTO_SEED=m
+CONFIG_CRYPTO_SM4=m
+CONFIG_CRYPTO_TEA=m
+CONFIG_INDIRECT_PIO=y
+CONFIG_CMA_SIZE_MBYTES=320
+CONFIG_PRINTK_TIME=y
+CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_FS=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_DEBUG_KERNEL=y
+# CONFIG_SCHED_DEBUG is not set
+# CONFIG_DEBUG_PREEMPT is not set
+# CONFIG_FTRACE is not set
+CONFIG_MEMTEST=y
+CONFIG_CORESIGHT=y
+CONFIG_CORESIGHT_LINK_AND_SINK_TMC=y
+CONFIG_CORESIGHT_SOURCE_ETM4X=y
diff -Naur A/arch/arm64/Kconfig.platforms B/arch/arm64/Kconfig.platforms
--- A/arch/arm64/Kconfig.platforms	2020-08-13 11:41:28.822785187 +0530
+++ B/arch/arm64/Kconfig.platforms	2020-08-13 12:12:47.178889192 +0530
@@ -182,6 +182,14 @@
 	  This enables support for the ARMv8 based SoCs in the
 	  NXP i.MX family.
 
+config IWG27M
+	bool "Enable Support for iWave IWG27M"
+	depends on ARCH_MXC
+	default y
+	help
+	  This enables support for the iWave's IWG27M Platform. If you don't
+	  know what to do here, say N
+
 config HAVE_IMX_BUSFREQ
 	bool "i.MX8M busfreq"
 
diff -Naur A/drivers/ata/ahci.h B/drivers/ata/ahci.h
--- A/drivers/ata/ahci.h	2020-08-13 11:41:35.454853147 +0530
+++ B/drivers/ata/ahci.h	2020-08-13 12:12:47.178889192 +0530
@@ -421,6 +421,11 @@
 void ahci_error_handler(struct ata_port *ap);
 u32 ahci_handle_port_intr(struct ata_host *host, u32 irq_masked);
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: Added for SATA activity LED support */
+void imx8_iwg27m_sata_act_led_flip(int value);
+#endif
+
 static inline void __iomem *__ahci_port_base(struct ata_host *host,
 					     unsigned int port_no)
 {
diff -Naur A/drivers/ata/ahci_imx.c B/drivers/ata/ahci_imx.c
--- A/drivers/ata/ahci_imx.c	2020-08-13 11:41:35.454853147 +0530
+++ B/drivers/ata/ahci_imx.c	2020-08-13 12:12:47.178889192 +0530
@@ -23,6 +23,11 @@
 
 #define DRV_NAME "ahci-imx"
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: Added for SATA activity LED support */
+int act_led_gpio;
+#endif
+
 enum {
 	/* Timer 1-ms Register */
 	IMX_TIMER1MS				= 0x00e0,
@@ -1057,7 +1062,12 @@
 };
 
 static const struct ata_port_info ahci_imx_port_info = {
+#ifdef CONFIG_IWG27M
+	/* IWG27M: SATA: Adding sw activity led support */
+	.flags          = AHCI_FLAG_COMMON | ATA_FLAG_SW_ACTIVITY,
+#else
 	.flags		= AHCI_FLAG_COMMON,
+#endif
 	.pio_mask	= ATA_PIO4,
 	.udma_mask	= ATA_UDMA6,
 	.port_ops	= &ahci_imx_ops,
@@ -1231,6 +1241,15 @@
 	return reg_value;
 }
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: Added for SATA activity LED support */
+void imx8_iwg27m_sata_act_led_flip(int value)
+{
+	if (gpio_is_valid(act_led_gpio))
+		gpio_set_value(act_led_gpio, value);
+}
+#endif
+
 static struct scsi_host_template ahci_platform_sht = {
 	AHCI_SHT(DRV_NAME),
 };
@@ -1350,6 +1369,19 @@
 		return imxpriv->clkreq_gpio;
 	}
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: Added for SATA activity LED support */
+	act_led_gpio = of_get_named_gpio(np, "sata-act-gpios", 0);
+	if (gpio_is_valid(act_led_gpio)) {
+		devm_gpio_request_one(dev, act_led_gpio,
+				GPIOF_OUT_INIT_LOW,
+				"SATA ACT LED");
+		gpio_set_value(act_led_gpio, 1);
+	} else if (act_led_gpio == -EPROBE_DEFER) {
+		return act_led_gpio;
+	}
+#endif
+
 	return 0;
 }
 
diff -Naur A/drivers/ata/libahci.c B/drivers/ata/libahci.c
--- A/drivers/ata/libahci.c	2020-08-13 11:41:35.458853189 +0530
+++ B/drivers/ata/libahci.c	2020-08-13 12:12:47.178889192 +0530
@@ -992,10 +992,22 @@
 		/* get the current LED state */
 		activity_led_state = led_message & EM_MSG_LED_VALUE_ON;
 
+#ifdef CONFIG_IWG27M
+		/* IWG27M: Added for SATA activity LED support */
+		if (activity_led_state){
+			imx8_iwg27m_sata_act_led_flip(activity_led_state);
+			activity_led_state = 0;
+		}
+		else {
+			imx8_iwg27m_sata_act_led_flip(activity_led_state);
+			activity_led_state = 1;
+		}
+#else
 		if (activity_led_state)
 			activity_led_state = 0;
 		else
 			activity_led_state = 1;
+#endif
 
 		/* clear old state */
 		led_message &= ~EM_MSG_LED_VALUE_ACTIVITY;
@@ -1024,6 +1036,11 @@
 	emp->link = link;
 	timer_setup(&emp->timer, ahci_sw_activity_blink, 0);
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: Added for SATA activity LED support */
+	emp->blink_policy = BLINK_OFF;
+#endif
+
 	/* check our blink policy and set flag for link if it's enabled */
 	if (emp->blink_policy)
 		link->flags |= ATA_LFLAG_SW_ACTIVITY;
diff -Naur A/drivers/firmware/imx/scu-pd.c B/drivers/firmware/imx/scu-pd.c
--- A/drivers/firmware/imx/scu-pd.c	2020-08-13 11:41:36.558864460 +0530
+++ B/drivers/firmware/imx/scu-pd.c	2020-08-13 12:12:47.178889192 +0530
@@ -159,7 +159,12 @@
 	{ "adc", IMX_SC_R_ADC_0, 1, true, 0 },
 	{ "lcd", IMX_SC_R_LCD_0, 1, true, 0 },
 	{ "lcd0-pwm", IMX_SC_R_LCD_0_PWM_0, 1, true, 0 },
+#ifdef CONFIG_IWG27M
+	/* IWG27M: LPUART: Adding LPUART4 Support */
+	{ "lpuart", IMX_SC_R_UART_0, 5, true, 0 },
+#else
 	{ "lpuart", IMX_SC_R_UART_0, 4, true, 0 },
+#endif
 	{ "sim", IMX_SC_R_EMVSIM_0, 2, true, 0 },
 	{ "lpspi", IMX_SC_R_SPI_0, 4, true, 0 },
 	{ "irqstr_dsp", IMX_SC_R_IRQSTR_DSP, 1, false, 0 },
@@ -194,9 +199,12 @@
 	{ "mipi0-pwm0", IMX_SC_R_MIPI_0_PWM_0, 1, false, 0 },
 	{ "mipi0-i2c", IMX_SC_R_MIPI_0_I2C_0, 2, true, 0 },
 
+#ifndef CONFIG_IWG27M
+	/* IWG27M: Removing duplicate power domains */
 	{ "mipi1", IMX_SC_R_MIPI_1, 1, 0 },
 	{ "mipi1-pwm0", IMX_SC_R_MIPI_1_PWM_0, 1, 0 },
 	{ "mipi1-i2c", IMX_SC_R_MIPI_1_I2C_0, 2, 1 },
+#endif
 
 	/* LVDS SS */
 	{ "lvds0", IMX_SC_R_LVDS_0, 1, false, 0 },
diff -Naur A/drivers/gpio/gpio-mxc.c B/drivers/gpio/gpio-mxc.c
--- A/drivers/gpio/gpio-mxc.c	2020-08-13 11:41:36.582864706 +0530
+++ B/drivers/gpio/gpio-mxc.c	2020-08-13 12:12:47.178889192 +0530
@@ -10,6 +10,10 @@
 #include <linux/clk.h>
 #include <linux/err.h>
 #include <linux/init.h>
+#ifdef CONFIG_IWG27M
+/* IWG27M: GPIO: Correcting the GPIO driver initialization sequence */
+#include <linux/module.h>
+#endif
 #include <linux/interrupt.h>
 #include <linux/io.h>
 #include <linux/irq.h>
@@ -895,4 +899,9 @@
 
 	return platform_driver_register(&mxc_gpio_driver);
 }
+#ifdef CONFIG_IWG27M
+/* IWG27M: GPIO: Correcting the GPIO driver initialization sequence */
+module_init(gpio_mxc_init);
+#else
 subsys_initcall(gpio_mxc_init);
+#endif
diff -Naur A/drivers/gpio/gpio-unused.c B/drivers/gpio/gpio-unused.c
--- A/drivers/gpio/gpio-unused.c	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/gpio/gpio-unused.c	2020-08-13 12:12:47.178889192 +0530
@@ -0,0 +1,121 @@
+/*
+ * Copyright (c) 2020 iWave Systems Technologies Pvt. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; If not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+ 
+/*
+ * @file gpio-unused.c
+ *
+ * @brief Simple driver to set the unused GPIOs as input
+ *
+ * @ingroup GPIO
+ */
+
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/of_platform.h>
+#include <linux/of_gpio.h>
+
+/* 
+ * iw_gpio_probe - Probe method for the GPIO device.
+ * @np: pointer to device tree node
+ *
+ * This function probes the Unused GPIOs in the device tree. It request GPIOs
+ * as input. It returns 0, if all the GPIOs is requested as input
+ * or a negative value if there is an error.
+ */
+
+static int iw_gpio_probe(struct platform_device *pdev)
+{
+       struct device_node *np = pdev->dev.of_node;
+       int i,val,err,num_ctrl;
+       unsigned *ctrl;
+       
+       /* Fill GPIO pin array */
+       num_ctrl = of_gpio_count(np);
+       if (num_ctrl <= 0) {
+               dev_err(&pdev->dev, "gpios DT property empty / missing\n");
+               return -ENODEV;
+       }
+       ctrl = devm_kzalloc(&pdev->dev, num_ctrl * sizeof(unsigned),
+                       GFP_KERNEL);
+       if (!ctrl)
+               return -ENOMEM;
+       for (i = 0; i < num_ctrl; i++) {
+
+               val = of_get_gpio(np, i);
+               if (val < 0)
+                       return val;
+               ctrl[i] = val;
+       }
+
+       for (i = 0; i < num_ctrl; i++) {
+               err = devm_gpio_request(&pdev->dev, ctrl[i],
+                               "Unused GPIOs as i/p");
+               if (err)
+                       return err;
+               err = gpio_direction_input(ctrl[i]);
+               if (err)
+                       return err;
+       }
+
+       return 0;
+}
+
+static int iw_gpio_remove(struct platform_device *pdev)
+{
+       /* Platform not registerd return silently */
+       return 0;
+}
+
+#ifdef CONFIG_OF
+static const struct of_device_id iwgpio_match[] = {
+       {.compatible = "iwave,unused-gpios"},
+       {}
+};
+MODULE_DEVICE_TABLE(of, iwgpio_match);
+#else
+#define iwgpio_match NULL
+#endif
+
+static struct platform_driver iwgpio_driver = {
+       .driver = {
+               .name   = "iw_gpio",
+               .owner  = THIS_MODULE,
+               .of_match_table = of_match_ptr(iwgpio_match),
+       },
+       .probe          = iw_gpio_probe,
+       .remove         = iw_gpio_remove,
+};
+
+static int __init iwgpio_init(void)
+{
+       return platform_driver_register(&iwgpio_driver);
+}
+subsys_initcall(iwgpio_init);
+
+static void __exit iwgpio_exit(void)
+{
+       platform_driver_unregister(&iwgpio_driver);
+}
+module_exit(iwgpio_exit);
+
+MODULE_AUTHOR("iWave Systems Technologies Pvt.Ltd");
+MODULE_DESCRIPTION("iWave unused GPIO Driver");
+MODULE_VERSION("0.1");
+MODULE_LICENSE("GPL v2");
diff -Naur A/drivers/gpio/Kconfig B/drivers/gpio/Kconfig
--- A/drivers/gpio/Kconfig	2020-08-13 11:41:36.574864623 +0530
+++ B/drivers/gpio/Kconfig	2020-08-13 12:12:47.178889192 +0530
@@ -383,6 +383,12 @@
 	select GPIO_GENERIC
 	select GENERIC_IRQ_CHIP
 
+config IMX8_UNUSED_GPIO
+	def_bool y
+	depends on OF_GPIO && IWG27M
+	help
+	 Say yes here to set the unused GPIOs as input in iW-RainboW-G27M platform.
+
 config GPIO_MXS
 	def_bool y
 	depends on ARCH_MXS
diff -Naur A/drivers/gpio/Makefile B/drivers/gpio/Makefile
--- A/drivers/gpio/Makefile	2020-08-13 11:41:36.574864623 +0530
+++ B/drivers/gpio/Makefile	2020-08-13 12:12:47.178889192 +0530
@@ -99,6 +99,7 @@
 obj-$(CONFIG_GPIO_MT7621)		+= gpio-mt7621.o
 obj-$(CONFIG_GPIO_MVEBU)		+= gpio-mvebu.o
 obj-$(CONFIG_GPIO_MXC)			+= gpio-mxc.o
+obj-$(CONFIG_IMX8_UNUSED_GPIO)		+= gpio-unused.o
 obj-$(CONFIG_GPIO_MXS)			+= gpio-mxs.o
 obj-$(CONFIG_GPIO_OCTEON)		+= gpio-octeon.o
 obj-$(CONFIG_GPIO_OMAP)			+= gpio-omap.o
diff -Naur A/drivers/gpu/drm/bridge/cadence/cdns-hdmi-core.c B/drivers/gpu/drm/bridge/cadence/cdns-hdmi-core.c
--- A/drivers/gpu/drm/bridge/cadence/cdns-hdmi-core.c	2020-08-13 11:41:40.390903724 +0530
+++ B/drivers/gpu/drm/bridge/cadence/cdns-hdmi-core.c	2020-09-05 13:17:28.018223671 +0530
@@ -246,6 +246,55 @@
 	}
 }
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+static struct drm_display_mode edid_cea_modes[] = {
+        /* 3 - 720x480@60Hz */
+        { DRM_MODE("720x480", DRM_MODE_TYPE_DRIVER, 27000, 720, 736,
+                   798, 858, 0, 480, 489, 495, 525, 0,
+                   DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC),
+          .vrefresh = 60, .picture_aspect_ratio = HDMI_PICTURE_ASPECT_16_9, },
+        /* 4 - 1280x720@60Hz */
+        { DRM_MODE("1280x720", DRM_MODE_TYPE_DRIVER, 74250, 1280, 1390,
+                   1430, 1650, 0, 720, 725, 730, 750, 0,
+                   DRM_MODE_FLAG_PHSYNC | DRM_MODE_FLAG_PVSYNC),
+          .vrefresh = 60, .picture_aspect_ratio = HDMI_PICTURE_ASPECT_16_9, },
+        /* 16 - 1920x1080@60Hz */
+        { DRM_MODE("1920x1080", DRM_MODE_TYPE_DRIVER, 148500, 1920, 2008,
+                   2052, 2200, 0, 1080, 1084, 1089, 1125, 0,
+                   DRM_MODE_FLAG_PHSYNC | DRM_MODE_FLAG_PVSYNC),
+          .vrefresh = 60, .picture_aspect_ratio = HDMI_PICTURE_ASPECT_16_9, },
+        /* 97 - 3840x2160@60Hz */
+        { DRM_MODE("3840x2160", DRM_MODE_TYPE_DRIVER, 594000,
+                   3840, 4016, 4104, 4400, 0,
+                   2160, 2168, 2178, 2250, 0,
+                   DRM_MODE_FLAG_PHSYNC | DRM_MODE_FLAG_PVSYNC),
+          .vrefresh = 60, .picture_aspect_ratio = HDMI_PICTURE_ASPECT_16_9, },
+        /* 96 - 3840x2160@30Hz */
+        { DRM_MODE("3840x2160", DRM_MODE_TYPE_DRIVER, 297000,
+                   3840, 4016, 4104, 4400, 0,
+                   2160, 2168, 2178, 2250, 0,
+                   DRM_MODE_FLAG_PHSYNC | DRM_MODE_FLAG_PVSYNC),
+          .vrefresh = 30, .picture_aspect_ratio = HDMI_PICTURE_ASPECT_16_9, },
+};
+
+static int imx_hdp_default_video_modes(struct drm_connector *connector)
+{
+        struct drm_display_mode *mode;
+        int i;
+
+        for (i = 0; i < ARRAY_SIZE(edid_cea_modes); i++) {
+                mode = drm_mode_create(connector->dev);
+                if (!mode)
+                        return -EINVAL;
+                drm_mode_copy(mode, &edid_cea_modes[i]);
+                mode->type |= DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+                drm_mode_probed_add(connector, mode);
+        }
+        return i;
+}
+#endif
+
 static int cdns_hdmi_connector_get_modes(struct drm_connector *connector)
 {
 	struct cdns_mhdp_device *mhdp =
@@ -253,6 +302,30 @@
 	int num_modes = 0;
 	struct edid *edid;
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+	if (!mhdp->no_edid) {
+		edid = drm_do_get_edid(&mhdp->connector.base,
+				cdns_hdmi_get_edid_block, mhdp);
+		if (edid) {
+			dev_info(mhdp->dev, "%x,%x,%x,%x,%x,%x,%x,%x\n",
+					edid->header[0], edid->header[1],
+					edid->header[2], edid->header[3],
+					edid->header[4], edid->header[5],
+					edid->header[6], edid->header[7]);
+			drm_connector_update_edid_property(connector, edid);
+			num_modes = drm_add_edid_modes(connector, edid);
+			kfree(edid);
+		} else {
+			dev_info(mhdp->dev, "failed to get edid, use default video modes\n");
+			num_modes = imx_hdp_default_video_modes(connector);
+			mhdp->no_edid = true;
+		}
+	} else {
+		dev_warn(mhdp->dev, "No EDID function, use default video mode\n");
+		num_modes = imx_hdp_default_video_modes(connector);
+	}
+#else
 	edid = drm_do_get_edid(&mhdp->connector.base,
 				   cdns_hdmi_get_edid_block, mhdp);
 	if (edid) {
@@ -265,6 +338,7 @@
 		num_modes = drm_add_edid_modes(connector, edid);
 		kfree(edid);
 	}
+#endif
 
 	if (num_modes == 0)
 		DRM_ERROR("Invalid edid\n");
@@ -361,10 +435,29 @@
 	u32 vic;
 	int ret;
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+	struct drm_cmdline_mode *cmdline_mode;
+	struct drm_connector *connector = &mhdp->connector.base;
+	cmdline_mode = &connector->cmdline_mode;
+#endif
+
 	/* We don't support double-clocked and Interlaced modes */
 	if (mode->flags & DRM_MODE_FLAG_DBLCLK ||
 			mode->flags & DRM_MODE_FLAG_INTERLACE)
 		return MODE_BAD;
+#ifdef CONFIG_IWG27M
+	/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+        /* cmdline mode is the max support video mode when edid disabled
+         * Add max support pixel rate to 297MHz in case no DDC function with no EDID */
+        if (mhdp->no_edid) {
+                if (cmdline_mode->xres != 0 &&
+                        cmdline_mode->xres < mode->hdisplay)
+                        return MODE_BAD_HVALUE;
+                if (mode->clock > 297000)
+                        return MODE_CLOCK_HIGH;
+        }
+#endif
 
 	/* MAX support pixel clock rate 594MHz */
 	if (mode->clock > 594000)
@@ -674,6 +767,11 @@
 		return ret;
 	}
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+	mhdp->no_edid = of_property_read_bool(pdev->dev.of_node, "fsl,no_edid");
+#endif
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(cdns_hdmi_bind);
diff -Naur A/drivers/gpu/drm/drm_connector.c B/drivers/gpu/drm/drm_connector.c
--- A/drivers/gpu/drm/drm_connector.c	2020-08-13 11:41:36.682865730 +0530
+++ B/drivers/gpu/drm/drm_connector.c	2020-08-13 12:12:47.178889192 +0530
@@ -69,6 +69,11 @@
 	struct ida ida;
 };
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: DRM: Store Display DRM connector type globally */
+int connect_type;
+#endif
+
 /*
  * Connector and encoder types.
  */
@@ -201,6 +206,11 @@
 	struct ida *connector_ida =
 		&drm_connector_enum_list[connector_type].ida;
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: DRM: Store Display DRM connector type globally */
+	connect_type = connector_type;
+#endif
+
 	WARN_ON(drm_drv_uses_atomic_modeset(dev) &&
 		(!funcs->atomic_destroy_state ||
 		 !funcs->atomic_duplicate_state));
diff -Naur A/drivers/gpu/drm/panel/Kconfig B/drivers/gpu/drm/panel/Kconfig
--- A/drivers/gpu/drm/panel/Kconfig	2020-08-13 11:41:41.314913192 +0530
+++ B/drivers/gpu/drm/panel/Kconfig	2020-08-13 12:12:47.178889192 +0530
@@ -193,6 +193,15 @@
 	  Say Y here if you want to enable support for Raydium RM67191 FHD
 	  (1080x1920) DSI panel.
 
+config DRM_PANEL_RAYDIUM_RM67198
+	tristate "Raydium RM67198 FHD panel"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for Raydium RM67198 FHD
+	  (1080x1920) DSI panel.
+
 config DRM_PANEL_RAYDIUM_RM68200
 	tristate "Raydium RM68200 720x1280 DSI video mode panel"
 	depends on OF
diff -Naur A/drivers/gpu/drm/panel/Makefile B/drivers/gpu/drm/panel/Makefile
--- A/drivers/gpu/drm/panel/Makefile	2020-08-13 11:41:41.314913192 +0530
+++ B/drivers/gpu/drm/panel/Makefile	2020-08-13 12:12:47.178889192 +0530
@@ -18,6 +18,7 @@
 obj-$(CONFIG_DRM_PANEL_PANASONIC_VVX10F034N00) += panel-panasonic-vvx10f034n00.o
 obj-$(CONFIG_DRM_PANEL_RASPBERRYPI_TOUCHSCREEN) += panel-raspberrypi-touchscreen.o
 obj-$(CONFIG_DRM_PANEL_RAYDIUM_RM67191) += panel-raydium-rm67191.o
+obj-$(CONFIG_DRM_PANEL_RAYDIUM_RM67198) += panel-raydium-rm67198.o
 obj-$(CONFIG_DRM_PANEL_RAYDIUM_RM68200) += panel-raydium-rm68200.o
 obj-$(CONFIG_DRM_PANEL_ROCKTECH_JH057N00900) += panel-rocktech-jh057n00900.o
 obj-$(CONFIG_DRM_PANEL_RONBO_RB070D30) += panel-ronbo-rb070d30.o
diff -Naur A/drivers/gpu/drm/panel/panel-raydium-rm67198.c B/drivers/gpu/drm/panel/panel-raydium-rm67198.c
--- A/drivers/gpu/drm/panel/panel-raydium-rm67198.c	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/gpu/drm/panel/panel-raydium-rm67198.c	2020-08-13 12:12:47.178889192 +0530
@@ -0,0 +1,646 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Raydium RM67198 MIPI-DSI panel driver
+ *
+ * Copyright (C) 2020 iWave System Technologies Pvt Ltd.
+ */
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regulator/consumer.h>
+
+#include <video/mipi_display.h>
+#include <video/of_videomode.h>
+#include <video/videomode.h>
+
+#include <drm/drm_crtc.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_panel.h>
+#include <drm/drm_print.h>
+
+/* Panel specific color-format bits */
+#define COL_FMT_16BPP 0x55
+#define COL_FMT_18BPP 0x66
+#define COL_FMT_24BPP 0x77
+
+/* Write Manufacture Command Set Control */
+#define WRMAUCCTR 0xFE
+
+/* Manufacturer Command Set pages (CMD2) */
+struct cmd_set_entry {
+	u8 cmd;
+	u8 param;
+};
+
+/*
+ * There is no description in the Reference Manual about these commands.
+ * We received them from vendor, so just use them as is.
+ */
+static const struct cmd_set_entry manufacturer_cmd_set[] = {
+	{0xFE, 0xD0},
+	{0x40, 0x02},
+	{0x4B, 0x4C},
+	{0x49, 0x01},
+	{0xFE, 0x70},
+	{0x48, 0x05},
+	{0x52, 0x00},
+	{0x5A, 0xFF},
+	{0x5C, 0xF6},
+	{0x5D, 0x07},
+	{0x7D, 0x35},
+	{0x86, 0x07},
+	{0xA7, 0x02},
+	{0xA9, 0x2C},
+	{0xFE, 0xA0},
+	{0x2B, 0x18},
+	{0xFE, 0x90},
+	{0x26, 0x10},
+	{0x28, 0x20},
+	{0x2A, 0x40},
+	{0x2D, 0x60},
+	{0x30, 0x70},
+	{0x32, 0x80},
+	{0x34, 0x90},
+	{0x36, 0x98},
+	{0x38, 0xA0},
+	{0x3A, 0xC0},
+	{0x3D, 0xE0},
+	{0x40, 0xF0},
+	{0x42, 0x00},
+	{0x43, 0x01},
+	{0x44, 0x40},
+	{0x45, 0x01},
+	{0x46, 0x80},
+	{0x47, 0x01},
+	{0x48, 0xC0},
+	{0x49, 0x01},
+	{0x4A, 0x00},
+	{0x4B, 0x02},
+	{0x4C, 0x40},
+	{0x4D, 0x02},
+	{0x4E, 0x80},
+	{0x4F, 0x02},
+	{0x50, 0x00},
+	{0x51, 0x03},
+	{0x52, 0x80},
+	{0x53, 0x03},
+	{0x54, 0x00},
+	{0x55, 0x04},
+	{0x56, 0x8D},
+	{0x58, 0x04},
+	{0x59, 0x20},
+	{0x5A, 0x05},
+	{0x5B, 0xBD},
+	{0x5C, 0x05},
+	{0x5D, 0x63},
+	{0x5E, 0x06},
+	{0x5F, 0x13},
+	{0x60, 0x07},
+	{0x61, 0xCD},
+	{0x62, 0x07},
+	{0x63, 0x91},
+	{0x64, 0x08},
+	{0x65, 0x60},
+	{0x66, 0x09},
+	{0x67, 0x38},
+	{0x68, 0x0A},
+	{0x69, 0x1A},
+	{0x6A, 0x0B},
+	{0x6B, 0x07},
+	{0x6C, 0x0C},
+	{0x6D, 0xFE},
+	{0x6E, 0x0C},
+	{0x6F, 0x00},
+	{0x70, 0x0E},
+	{0x71, 0x0C},
+	{0x72, 0x0F},
+	{0x73, 0x96},
+	{0x74, 0x0F},
+	{0x75, 0xDC},
+	{0x76, 0x0F},
+	{0x77, 0xFF},
+	{0x78, 0x0F},
+	{0x79, 0x00},
+	{0x7A, 0x00},
+	{0x7B, 0x00},
+	{0x7C, 0x01},
+	{0x7D, 0x02},
+	{0x7E, 0x04},
+	{0x7F, 0x08},
+	{0x80, 0x10},
+	{0x81, 0x20},
+	{0x82, 0x30},
+	{0x83, 0x40},
+	{0x84, 0x50},
+	{0x85, 0x60},
+	{0x86, 0x70},
+	{0x87, 0x78},
+	{0x88, 0x88},
+	{0x89, 0x96},
+	{0x8A, 0xA3},
+	{0x8B, 0xAF},
+	{0x8C, 0xBA},
+	{0x8D, 0xC4},
+	{0x8E, 0xCE},
+	{0x8F, 0xD7},
+	{0x90, 0xE0},
+	{0x91, 0xE8},
+	{0x92, 0xF0},
+	{0x93, 0xF8},
+	{0x94, 0xFF},
+	{0x99, 0x20},
+	{0xFE, 0x00},
+	{0xC2, 0x08},
+	{0x35, 0x00},
+	{0x36, 0x02},
+	{0x11, 0x00},
+	{0x29, 0x00},
+};
+
+static const u32 rad_bus_formats[] = {
+	MEDIA_BUS_FMT_RGB888_1X24,
+	MEDIA_BUS_FMT_RGB666_1X18,
+	MEDIA_BUS_FMT_RGB565_1X16,
+};
+
+static const u32 rad_bus_flags = DRM_BUS_FLAG_DE_LOW |
+				 DRM_BUS_FLAG_PIXDATA_NEGEDGE;
+
+struct rad_panel {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+
+	struct gpio_desc *reset;
+	struct backlight_device *backlight;
+
+	struct regulator_bulk_data *supplies;
+	unsigned int num_supplies;
+
+	bool prepared;
+	bool enabled;
+};
+
+static const struct drm_display_mode default_mode = {
+	.clock = 132000,
+	.hdisplay = 1080,
+	.hsync_start = 1080 + 20,
+	.hsync_end = 1080 + 20 + 2,
+	.htotal = 1080 + 20 + 2 + 34,
+	.vdisplay = 1920,
+	.vsync_start = 1920 + 10,
+	.vsync_end = 1920 + 10 + 2,
+	.vtotal = 1920 + 10 + 2 + 4,
+	.vrefresh = 60,
+	.width_mm = 68,
+	.height_mm = 121,
+	.flags = DRM_MODE_FLAG_NHSYNC |
+		 DRM_MODE_FLAG_NVSYNC,
+};
+
+static inline struct rad_panel *to_rad_panel(struct drm_panel *panel)
+{
+	return container_of(panel, struct rad_panel, panel);
+}
+
+static int rad_panel_push_cmd_list(struct mipi_dsi_device *dsi)
+{
+	size_t i;
+	size_t count = ARRAY_SIZE(manufacturer_cmd_set);
+	int ret = 0;
+
+	for (i = 0; i < count; i++) {
+		const struct cmd_set_entry *entry = &manufacturer_cmd_set[i];
+		u8 buffer[2] = { entry->cmd, entry->param };
+
+		ret = mipi_dsi_generic_write(dsi, &buffer, sizeof(buffer));
+		if (ret < 0)
+			return ret;
+	}
+
+	return ret;
+};
+
+static int color_format_from_dsi_format(enum mipi_dsi_pixel_format format)
+{
+	switch (format) {
+	case MIPI_DSI_FMT_RGB565:
+		return COL_FMT_16BPP;
+	case MIPI_DSI_FMT_RGB666:
+	case MIPI_DSI_FMT_RGB666_PACKED:
+		return COL_FMT_18BPP;
+	case MIPI_DSI_FMT_RGB888:
+		return COL_FMT_24BPP;
+	default:
+		return COL_FMT_24BPP; /* for backward compatibility */
+	}
+};
+
+static int rad_panel_prepare(struct drm_panel *panel)
+{
+	struct rad_panel *rad = to_rad_panel(panel);
+	int ret;
+
+	if (rad->prepared)
+		return 0;
+
+	ret = regulator_bulk_enable(rad->num_supplies, rad->supplies);
+	if (ret)
+		return ret;
+
+	if (rad->reset) {
+		gpiod_set_value_cansleep(rad->reset, 0);
+		usleep_range(18000, 20000);
+	}
+
+	rad->prepared = true;
+
+	return 0;
+}
+
+static int rad_panel_unprepare(struct drm_panel *panel)
+{
+	struct rad_panel *rad = to_rad_panel(panel);
+	int ret;
+
+	if (!rad->prepared)
+		return 0;
+
+	/*
+	 * Right after asserting the reset, we need to release it, so that the
+	 * touch driver can have an active connection with the touch controller
+	 * even after the display is turned off.
+	 */
+	if (rad->reset) {
+		gpiod_set_value_cansleep(rad->reset, 1);
+		usleep_range(15000, 17000);
+		gpiod_set_value_cansleep(rad->reset, 0);
+	}
+
+	ret = regulator_bulk_disable(rad->num_supplies, rad->supplies);
+	if (ret)
+		return ret;
+
+	rad->prepared = false;
+
+	return 0;
+}
+
+static int rad_panel_enable(struct drm_panel *panel)
+{
+	struct rad_panel *rad = to_rad_panel(panel);
+	struct mipi_dsi_device *dsi = rad->dsi;
+	struct device *dev = &dsi->dev;
+	int color_format = color_format_from_dsi_format(dsi->format);
+	int ret;
+
+	if (rad->enabled)
+		return 0;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	ret = rad_panel_push_cmd_list(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to send MCS (%d)\n", ret);
+		goto fail;
+	}
+
+	/* Select User Command Set table (CMD1) */
+	ret = mipi_dsi_generic_write(dsi, (u8[]){ WRMAUCCTR, 0x00 }, 2);
+	if (ret < 0)
+		goto fail;
+
+	/* Software reset */
+	ret = mipi_dsi_dcs_soft_reset(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to do Software Reset (%d)\n", ret);
+		goto fail;
+	}
+
+	usleep_range(15000, 17000);
+
+	/* Set DSI mode */
+	ret = mipi_dsi_generic_write(dsi, (u8[]){ 0xC2, 0x0B }, 2);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set DSI mode (%d)\n", ret);
+		goto fail;
+	}
+	/* Set tear ON */
+	ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set tear ON (%d)\n", ret);
+		goto fail;
+	}
+	/* Set tear scanline */
+	ret = mipi_dsi_dcs_set_tear_scanline(dsi, 0x380);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set tear scanline (%d)\n", ret);
+		goto fail;
+	}
+	/* Set pixel format */
+	ret = mipi_dsi_dcs_set_pixel_format(dsi, color_format);
+	DRM_DEV_DEBUG_DRIVER(dev, "Interface color format set to 0x%x\n",
+			     color_format);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set pixel format (%d)\n", ret);
+		goto fail;
+	}
+	/* Exit sleep mode */
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to exit sleep mode (%d)\n", ret);
+		goto fail;
+	}
+
+	usleep_range(5000, 7000);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set display ON (%d)\n", ret);
+		goto fail;
+	}
+
+	backlight_enable(rad->backlight);
+
+	rad->enabled = true;
+
+	return 0;
+
+fail:
+	gpiod_set_value_cansleep(rad->reset, 1);
+
+	return ret;
+}
+
+static int rad_panel_disable(struct drm_panel *panel)
+{
+	struct rad_panel *rad = to_rad_panel(panel);
+	struct mipi_dsi_device *dsi = rad->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	if (!rad->enabled)
+		return 0;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	backlight_disable(rad->backlight);
+
+	usleep_range(10000, 12000);
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set display OFF (%d)\n", ret);
+		return ret;
+	}
+
+	usleep_range(5000, 10000);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to enter sleep mode (%d)\n", ret);
+		return ret;
+	}
+
+	rad->enabled = false;
+
+	return 0;
+}
+
+static int rad_panel_get_modes(struct drm_panel *panel)
+{
+	struct drm_connector *connector = panel->connector;
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(panel->drm, &default_mode);
+	if (!mode) {
+		DRM_DEV_ERROR(panel->dev, "failed to add mode %ux%ux@%u\n",
+			      default_mode.hdisplay, default_mode.vdisplay,
+			      default_mode.vrefresh);
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(panel->connector, mode);
+
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	connector->display_info.bus_flags = rad_bus_flags;
+
+	drm_display_info_set_bus_formats(&connector->display_info,
+					 rad_bus_formats,
+					 ARRAY_SIZE(rad_bus_formats));
+	return 1;
+}
+
+static int rad_bl_get_brightness(struct backlight_device *bl)
+{
+	struct mipi_dsi_device *dsi = bl_get_data(bl);
+	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
+	u16 brightness;
+	int ret;
+
+	if (!rad->prepared)
+		return 0;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_get_display_brightness(dsi, &brightness);
+	if (ret < 0)
+		return ret;
+
+	bl->props.brightness = brightness;
+
+	return brightness & 0xff;
+}
+
+static int rad_bl_update_status(struct backlight_device *bl)
+{
+	struct mipi_dsi_device *dsi = bl_get_data(bl);
+	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
+	int ret = 0;
+
+	if (!rad->prepared)
+		return 0;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_brightness(dsi, bl->props.brightness);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static const struct backlight_ops rad_bl_ops = {
+	.update_status = rad_bl_update_status,
+	.get_brightness = rad_bl_get_brightness,
+};
+
+static const struct drm_panel_funcs rad_panel_funcs = {
+	.prepare = rad_panel_prepare,
+	.unprepare = rad_panel_unprepare,
+	.enable = rad_panel_enable,
+	.disable = rad_panel_disable,
+	.get_modes = rad_panel_get_modes,
+};
+
+static const char * const rad_supply_names[] = {
+	"v3p3",
+	"v1p8",
+};
+
+static int rad_init_regulators(struct rad_panel *rad)
+{
+	struct device *dev = &rad->dsi->dev;
+	int i;
+
+	rad->num_supplies = ARRAY_SIZE(rad_supply_names);
+	rad->supplies = devm_kcalloc(dev, rad->num_supplies,
+				     sizeof(*rad->supplies), GFP_KERNEL);
+	if (!rad->supplies)
+		return -ENOMEM;
+
+	for (i = 0; i < rad->num_supplies; i++)
+		rad->supplies[i].supply = rad_supply_names[i];
+
+	return devm_regulator_bulk_get(dev, rad->num_supplies, rad->supplies);
+};
+
+static int rad_panel_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct device_node *np = dev->of_node;
+	struct rad_panel *panel;
+	struct backlight_properties bl_props;
+	int ret;
+	u32 video_mode;
+
+	panel = devm_kzalloc(&dsi->dev, sizeof(*panel), GFP_KERNEL);
+	if (!panel)
+		return -ENOMEM;
+
+	mipi_dsi_set_drvdata(dsi, panel);
+
+	panel->dsi = dsi;
+
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags =  MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO;
+
+	ret = of_property_read_u32(np, "video-mode", &video_mode);
+	if (!ret) {
+		switch (video_mode) {
+		case 0:
+			/* burst mode */
+			dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_BURST;
+			break;
+		case 1:
+			/* non-burst mode with sync event */
+			break;
+		case 2:
+			/* non-burst mode with sync pulse */
+			dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
+			break;
+		default:
+			dev_warn(dev, "invalid video mode %d\n", video_mode);
+			break;
+		}
+	}
+
+	ret = of_property_read_u32(np, "dsi-lanes", &dsi->lanes);
+	if (ret) {
+		dev_err(dev, "Failed to get dsi-lanes property (%d)\n", ret);
+		return ret;
+	}
+
+	panel->reset = devm_gpiod_get_optional(dev, "reset",
+					       GPIOD_OUT_LOW |
+					       GPIOD_FLAGS_BIT_NONEXCLUSIVE);
+	if (IS_ERR(panel->reset)) {
+		ret = PTR_ERR(panel->reset);
+		dev_err(dev, "Failed to get reset gpio (%d)\n", ret);
+		return ret;
+	}
+	gpiod_set_value_cansleep(panel->reset, 1);
+
+	memset(&bl_props, 0, sizeof(bl_props));
+	bl_props.type = BACKLIGHT_RAW;
+	bl_props.brightness = 255;
+	bl_props.max_brightness = 255;
+
+	panel->backlight = devm_backlight_device_register(dev, dev_name(dev),
+							  dev, dsi, &rad_bl_ops,
+							  &bl_props);
+	if (IS_ERR(panel->backlight)) {
+		ret = PTR_ERR(panel->backlight);
+		dev_err(dev, "Failed to register backlight (%d)\n", ret);
+		return ret;
+	}
+
+	ret = rad_init_regulators(panel);
+	if (ret)
+		return ret;
+
+	drm_panel_init(&panel->panel);
+	panel->panel.funcs = &rad_panel_funcs;
+	panel->panel.dev = dev;
+	dev_set_drvdata(dev, panel);
+
+	ret = drm_panel_add(&panel->panel);
+	if (ret)
+		return ret;
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret)
+		drm_panel_remove(&panel->panel);
+
+	return ret;
+}
+
+static int rad_panel_remove(struct mipi_dsi_device *dsi)
+{
+	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret)
+		DRM_DEV_ERROR(dev, "Failed to detach from host (%d)\n",
+			      ret);
+
+	drm_panel_remove(&rad->panel);
+
+	return 0;
+}
+
+static void rad_panel_shutdown(struct mipi_dsi_device *dsi)
+{
+	struct rad_panel *rad = mipi_dsi_get_drvdata(dsi);
+
+	rad_panel_disable(&rad->panel);
+	rad_panel_unprepare(&rad->panel);
+}
+
+static const struct of_device_id rad_of_match[] = {
+	{ .compatible = "raydium,rm67198", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, rad_of_match);
+
+static struct mipi_dsi_driver rad_panel_driver = {
+	.driver = {
+		.name = "panel-raydium-rm67198",
+		.of_match_table = rad_of_match,
+	},
+	.probe = rad_panel_probe,
+	.remove = rad_panel_remove,
+	.shutdown = rad_panel_shutdown,
+};
+module_mipi_dsi_driver(rad_panel_driver);
+
+MODULE_AUTHOR("iWave System Technologies");
+MODULE_DESCRIPTION("Raydium RM67198 MIPI DSI panel");
+MODULE_LICENSE("GPL v2");
diff -Naur A/drivers/input/touchscreen/cst148/hyn_cst148_ASJ_G1548FH107GG_MA1_A_fw.h B/drivers/input/touchscreen/cst148/hyn_cst148_ASJ_G1548FH107GG_MA1_A_fw.h
--- A/drivers/input/touchscreen/cst148/hyn_cst148_ASJ_G1548FH107GG_MA1_A_fw.h	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/input/touchscreen/cst148/hyn_cst148_ASJ_G1548FH107GG_MA1_A_fw.h	2020-08-13 12:12:47.182889118 +0530
@@ -0,0 +1,1553 @@
+
+#ifndef __CST3xx_FW_H__
+#define __CST3xx_FW_H__
+
+  unsigned char cst3_fw[] ={
+    0x98,0xE0,0x07,0x01,0xA8,0xE8,0x03,0x00,0x00,0x00,0x00,0x00,0xA8,0xA8,0x03,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x78,0xA8,0x06,0x00,0x78,0xA8,0x07,0x00,0x00,0x00,0x00,0x00,
+    0x80,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x18,0x01,0x00,0x80,0x07,0xC0,0x17,
+    0x82,0x07,0xC0,0x07,0x01,0x65,0x40,0x86,0xC1,0x41,0xC0,0x20,0xC5,0x68,0x31,0x12,
+    0xF5,0x38,0x33,0x5A,0x32,0xA2,0x32,0xEA,0x10,0x62,0x8D,0x0E,0x81,0x07,0xC0,0x97,
+    0x30,0xF2,0xF3,0x79,0x65,0x7E,0x30,0xB2,0x31,0x09,0x10,0x9A,0x87,0x06,0xD0,0xD8,
+    0x35,0x12,0x35,0x5A,0x18,0x9A,0x39,0xC2,0xF0,0x22,0x06,0x00,0xF0,0x22,0x07,0x00,
+    0xD0,0x81,0x98,0x16,0x43,0xC6,0x0B,0xC6,0xC2,0xD6,0x3F,0x90,0x99,0x0E,0x40,0x86,
+    0x08,0x86,0xA9,0x0E,0x40,0x23,0x00,0x63,0x38,0x82,0x03,0x00,0x18,0x01,0x20,0x01,
+    0x28,0x01,0x30,0x01,0xD0,0x81,0x98,0x0E,0x0F,0xC6,0xC3,0xDE,0x38,0x90,0x9A,0x06,
+    0x08,0x86,0xA9,0x06,0x03,0x5B,0x38,0x82,0xAE,0xFD,0x30,0x02,0x30,0x02,0xEE,0xFD,
+    0xA8,0x85,0xE8,0x85,0x83,0x2F,0xE8,0xAF,0x37,0x8A,0xB8,0xFF,0xF8,0xAF,0x87,0x0F,
+    0xC0,0xDF,0x82,0x2F,0xEF,0x6F,0xBC,0xFF,0xF8,0x9F,0x87,0x2F,0xE8,0x9F,0x04,0x00,
+    0xAF,0x85,0x6F,0xFA,0x39,0x01,0xE0,0x43,0x36,0x4A,0xC9,0x01,0x38,0x30,0x32,0x42,
+    0x84,0x01,0xF4,0x1B,0xF4,0x23,0xEE,0x53,0xC0,0x01,0x73,0x01,0xDD,0x16,0xE0,0x6B,
+    0x48,0x68,0x87,0x6E,0xAA,0x7B,0xA0,0x3B,0x10,0xD2,0x8C,0x46,0x47,0xAA,0x17,0xF9,
+    0x41,0x04,0x90,0x69,0x10,0x82,0x94,0x16,0xA8,0x63,0x04,0x09,0xAF,0x43,0xEA,0x85,
+    0x30,0x6A,0xE8,0x4B,0xE6,0x48,0x92,0x4D,0xAF,0x4B,0x49,0xF9,0x8D,0x0E,0x10,0x12,
+    0x82,0x16,0xE0,0x0B,0x48,0x09,0x88,0x1E,0xA9,0x5B,0xAD,0x7B,0xA7,0x3B,0xEA,0x85,
+    0x4F,0x09,0x8C,0xE6,0x0A,0x09,0xA0,0x0B,0xE8,0x85,0xAF,0x85,0x66,0x22,0xE7,0x01,
+    0x00,0x0F,0x80,0x0F,0xE3,0xEF,0xEC,0x03,0x47,0x01,0x80,0xD6,0xEF,0x85,0xA8,0xC5,
+    0x00,0x21,0x80,0x0F,0xE0,0x3F,0x04,0x09,0x84,0x0F,0xE0,0x27,0x79,0xF2,0x46,0xC3,
+    0x0C,0x01,0x19,0x42,0x00,0xC3,0x01,0x11,0x83,0x0F,0xE0,0x8F,0x61,0xDA,0x56,0x03,
+    0x29,0x41,0x18,0x42,0x17,0x03,0x49,0x03,0x1F,0x42,0x09,0x03,0x15,0x2B,0x4B,0x03,
+    0x1D,0x42,0x09,0x03,0x4D,0x03,0x1B,0x42,0x0B,0x03,0x4B,0x03,0x35,0x21,0x18,0x82,
+    0x0B,0x03,0x4B,0x03,0x42,0x00,0x02,0x00,0x09,0x03,0x4B,0x03,0x19,0x42,0x09,0x03,
+    0x49,0x03,0x19,0x82,0x09,0x03,0x49,0x03,0x08,0x09,0x18,0x42,0x0F,0x03,0x41,0x03,
+    0x1F,0x42,0x05,0x03,0x45,0x03,0x1F,0x82,0x07,0x03,0x47,0x03,0x1F,0x42,0x04,0x03,
+    0x45,0x03,0x1D,0x42,0x05,0x03,0x45,0x03,0x1D,0x82,0x05,0x03,0x45,0x03,0x1B,0x42,
+    0x03,0x03,0x43,0x03,0x1B,0x82,0x05,0x03,0x44,0x03,0x1D,0x42,0x03,0x03,0x45,0x03,
+    0x1B,0x42,0x04,0x03,0x82,0x0F,0xE0,0x77,0x82,0x0F,0xE0,0x57,0x82,0x0F,0xE0,0x87,
+    0x48,0xDA,0x05,0x01,0x1D,0x43,0x4C,0x03,0x1D,0x42,0x0D,0x03,0x10,0x2B,0x03,0x11,
+    0x81,0x0F,0xE0,0x87,0x41,0xC3,0x09,0x01,0x19,0x42,0x00,0xC3,0x00,0x21,0x80,0x0F,
+    0xE0,0xF7,0x00,0x09,0x80,0x0F,0xE0,0xDF,0x42,0x03,0x41,0x00,0x01,0x00,0x02,0x03,
+    0x40,0x03,0x0F,0x09,0x1F,0x42,0x00,0x03,0x4C,0x03,0x1B,0x42,0x09,0x03,0x4B,0x03,
+    0x19,0x42,0x0C,0x03,0x41,0x03,0x1D,0x42,0x05,0x03,0x45,0x03,0x1D,0x82,0x01,0x03,
+    0x41,0x03,0x1B,0x42,0x03,0x03,0x43,0x03,0x1B,0x82,0x01,0x03,0x48,0x0B,0x03,0x61,
+    0x1B,0x0A,0x08,0x0B,0x48,0x0B,0x19,0x0A,0x0F,0x0B,0x41,0x0B,0x1F,0x0A,0x00,0x0B,
+    0x40,0xDA,0x14,0x09,0xE0,0x0B,0x18,0x8A,0xA7,0x0B,0xE8,0xC5,0x42,0xC2,0xC4,0x01,
+    0xE4,0x0B,0x44,0xD2,0x80,0x01,0x4A,0x01,0x84,0x3E,0x48,0xD2,0x07,0x0B,0x0A,0xF9,
+    0x57,0xB2,0x8C,0x89,0x90,0x01,0x14,0x8B,0x04,0x17,0x48,0xB2,0xCA,0xE1,0x00,0x0B,
+    0x08,0xF9,0x8F,0xA1,0x00,0x0B,0x0E,0x11,0x0C,0x0B,0x08,0x0B,0x0A,0x21,0x08,0x0B,
+    0x0C,0x51,0x18,0x0B,0x0A,0x81,0x18,0x0B,0x08,0x01,0x18,0x0B,0x38,0x82,0xAB,0x85,
+    0x40,0x3A,0xE4,0x03,0x38,0x00,0x86,0x8E,0x00,0xE1,0x81,0x0F,0xC4,0xFF,0x43,0x22,
+    0x09,0x01,0xC0,0x01,0xAF,0x0B,0xBC,0xFF,0xFC,0x8F,0x4E,0x0A,0x56,0x32,0xCC,0x01,
+    0x40,0x32,0x84,0x1F,0xE0,0xC7,0x06,0x01,0x82,0x0F,0xC0,0x67,0xE8,0x85,0xA8,0x85,
+    0x41,0xDA,0xC3,0x01,0xEB,0x03,0x66,0xD2,0x40,0x01,0x88,0x4E,0x36,0x02,0xC1,0x01,
+    0xE0,0x03,0x44,0x29,0xC9,0x26,0xE0,0x03,0x38,0x00,0xA0,0x0E,0xB8,0xFF,0xFF,0xEF,
+    0xE0,0x03,0x39,0x00,0xAB,0x2E,0x00,0xE9,0x00,0x00,0x86,0x2F,0xDF,0x67,0xBB,0xFF,
+    0xFB,0xF7,0xE0,0x03,0xE7,0x03,0x0B,0xE9,0x03,0x42,0xA0,0x03,0x40,0xA2,0xC3,0x03,
+    0x40,0x01,0x80,0x16,0x85,0x0F,0xD8,0x67,0x38,0xE7,0xEF,0x85,0xAB,0x85,0x48,0x52,
+    0x04,0x01,0x00,0x43,0x4E,0x32,0xCB,0x01,0xAC,0x43,0xEA,0x43,0x81,0x0F,0xC0,0xF7,
+    0xE8,0x85,0xA8,0x85,0x30,0x22,0x48,0x01,0x80,0x3E,0x60,0x01,0x80,0x16,0x30,0x82,
+    0xC0,0x01,0x01,0x3F,0x31,0x82,0x80,0x01,0x00,0x27,0x60,0x01,0x84,0x0E,0xF0,0x80,
+    0x04,0x07,0xE0,0x80,0x0A,0x01,0xF0,0x0A,0x48,0x01,0xD0,0x06,0x16,0x4A,0x0A,0x40,
+    0x0A,0x01,0xF0,0x8A,0x83,0x2F,0xD8,0x97,0x40,0xF9,0xEB,0x06,0x00,0xF9,0x63,0x01,
+    0x87,0x16,0x08,0xF9,0x88,0x09,0xD0,0x40,0xEA,0x85,0x48,0xCA,0x00,0x01,0x80,0x43,
+    0x3F,0x82,0xAB,0xC5,0x52,0xBA,0x5A,0xC2,0xD0,0xC3,0x46,0x01,0x80,0x1E,0x0A,0x01,
+    0x2B,0x01,0x20,0x81,0x76,0x52,0xF2,0x01,0xD8,0x83,0x45,0x01,0x83,0x06,0x20,0x01,
+    0x00,0x01,0x00,0x47,0x3E,0x01,0xF8,0xBA,0x78,0x51,0xD8,0x0E,0xE4,0x48,0x92,0x4D,
+    0xE2,0x90,0xE4,0x00,0x95,0x05,0x14,0x02,0x9A,0xA6,0x57,0x62,0x48,0x41,0x90,0x3E,
+    0x48,0x29,0x98,0x16,0xD2,0xC3,0x36,0x00,0x8F,0x16,0xE8,0x83,0x40,0x11,0xC8,0x46,
+    0xD4,0xC3,0x46,0x01,0x88,0x06,0x28,0x09,0x06,0x09,0x94,0xC3,0x00,0xA1,0x80,0x83,
+    0x00,0x5F,0xC0,0x83,0x40,0x01,0x80,0x16,0xF0,0x00,0x82,0x83,0x06,0x2F,0xD0,0xC3,
+    0x40,0x09,0x8C,0x06,0x2C,0x09,0x00,0x01,0x90,0xC3,0x6E,0x01,0x81,0x5E,0x60,0x9A,
+    0x42,0x03,0x41,0x00,0x01,0x00,0x02,0x03,0x00,0x41,0x81,0x2F,0xD1,0x27,0x47,0x03,
+    0x08,0x09,0x18,0x42,0x07,0x03,0xE9,0xC5,0xA9,0xC5,0x47,0x4A,0xC2,0x01,0xE4,0x03,
+    0x41,0x01,0x80,0xDE,0x62,0x32,0xE1,0x01,0x40,0x03,0x41,0x01,0x81,0xB6,0x31,0x0A,
+    0xC9,0x01,0x44,0x52,0x80,0x17,0xC8,0x57,0x34,0x32,0xF1,0x01,0xF1,0x93,0x33,0x0A,
+    0x1B,0x11,0xC8,0x01,0x28,0x01,0x50,0x01,0x80,0x6E,0x50,0xF2,0x38,0xF9,0x47,0x94,
+    0xBD,0x69,0x11,0xD2,0x90,0x1E,0x78,0xDA,0xE1,0x90,0x02,0xD4,0x05,0x1F,0xF0,0x13,
+    0xAA,0x93,0xA5,0x5B,0xA9,0xAB,0xE9,0x93,0x50,0x41,0x88,0x0E,0x50,0xAA,0x00,0xAC,
+    0x40,0xF9,0x8F,0xA6,0xF5,0x03,0xAD,0x83,0xA1,0x5B,0xAA,0xAB,0x00,0x01,0x10,0x79,
+    0x28,0x59,0x5B,0xB2,0x0D,0x68,0xF3,0xA3,0x01,0x37,0x08,0x21,0x1E,0x0A,0xC2,0x48,
+    0xC8,0x48,0xAA,0x53,0xE6,0x00,0x92,0x05,0x17,0x22,0xC4,0xB6,0xEF,0xC5,0x47,0xF1,
+    0x80,0xE6,0x47,0x01,0x82,0xD6,0xF7,0x08,0x4F,0x01,0x91,0xBE,0x08,0x01,0x1C,0x42,
+    0x48,0x6A,0x98,0x43,0x40,0x2A,0x40,0x0B,0x42,0x48,0x02,0x48,0x00,0x0B,0x00,0xBF,
+    0x00,0xA0,0x06,0x01,0x00,0x50,0x00,0x01,0x10,0x00,0x00,0x42,0xF8,0x00,0x06,0x42,
+    0x18,0x00,0x02,0x42,0x80,0x60,0x05,0x00,0x80,0x00,0x01,0x01,0x00,0x80,0x07,0x01,
+    0x00,0x10,0x00,0x01,0x38,0xA0,0x01,0x01,0x80,0x60,0x00,0x01,0x00,0x30,0x00,0x01,
+    0x42,0x92,0xE3,0x0B,0x1A,0xCA,0xA0,0x0B,0xEF,0xC5,0xAF,0xC5,0x38,0x01,0x00,0x01,
+    0x80,0x04,0x00,0x01,0x08,0x01,0xD0,0x04,0x03,0x98,0x52,0x6A,0xC3,0xD8,0x54,0x6A,
+    0xC0,0xD8,0x34,0xE2,0x28,0x01,0x10,0x01,0xF0,0xD2,0xC4,0x80,0x92,0x05,0xE0,0x48,
+    0x95,0x4D,0x10,0xD2,0xE8,0x06,0x30,0xBA,0x9B,0x01,0xE1,0x68,0x90,0x6D,0x6F,0xE1,
+    0x98,0x8E,0x87,0x2F,0xD0,0x5F,0x94,0x35,0x28,0x01,0x70,0x01,0xE8,0x76,0x00,0x01,
+    0xF5,0x02,0x11,0x82,0xDF,0x2E,0x78,0x88,0xCA,0x48,0x84,0x48,0xD1,0x00,0x02,0x04,
+    0x00,0x57,0x40,0x01,0xE8,0x46,0x08,0x09,0x00,0x0C,0x01,0x2F,0x01,0x01,0xF0,0x02,
+    0x10,0x82,0xE5,0x0E,0xD9,0x00,0x04,0x04,0x68,0x01,0x88,0x8E,0x0B,0x01,0xF1,0x0A,
+    0x49,0x41,0xD1,0xE6,0x01,0xC0,0xC3,0xC0,0x08,0x29,0x80,0x2F,0xD3,0x3F,0xFB,0x0A,
+    0x11,0x42,0xEC,0xA6,0x7A,0x40,0xC6,0x00,0x80,0x00,0xD2,0x40,0x01,0x04,0x01,0x77,
+    0x68,0xD9,0x88,0xA6,0x01,0xC0,0xC3,0xC0,0x08,0x29,0x80,0x2F,0xD0,0xBF,0x0A,0x01,
+    0xF4,0x0A,0x13,0x42,0xE9,0x1E,0x31,0x02,0xC0,0x01,0x11,0x01,0xF1,0x12,0x54,0x41,
+    0xD6,0xEE,0x78,0x40,0xC2,0x00,0x82,0x00,0xD1,0x40,0x00,0x04,0x01,0xBF,0x08,0x01,
+    0xF1,0x0A,0x4B,0x41,0xD3,0x9E,0x00,0xC0,0xC0,0xC0,0x09,0x29,0x81,0x2F,0xD0,0xF7,
+    0x0B,0x01,0xF0,0x0A,0x10,0x42,0xEC,0x56,0x31,0x02,0xC1,0x01,0x14,0x01,0xF0,0x12,
+    0x50,0x41,0xD1,0x26,0x7A,0x40,0xC6,0x00,0x80,0x00,0xD2,0x40,0x01,0x04,0xA1,0x01,
+    0xE7,0x68,0x93,0x6D,0x6D,0xE1,0x98,0x06,0xC2,0x04,0xE0,0x00,0x90,0x05,0x86,0x04,
+    0xC0,0x04,0x40,0x81,0x93,0x06,0x38,0xE7,0xE8,0xC5,0xAF,0x85,0x40,0x5A,0x11,0x09,
+    0xE0,0x0B,0x18,0x8A,0xA0,0x0B,0x30,0x22,0xE2,0x01,0x01,0x57,0xBB,0xFF,0xF7,0xF7,
+    0x40,0x4A,0xC1,0x03,0x40,0x01,0x80,0x1E,0x48,0x22,0x01,0xC1,0xCA,0x01,0xAE,0x43,
+    0x41,0x12,0x51,0x32,0x4E,0x12,0xC1,0x01,0x87,0x27,0xC0,0x27,0xB9,0xFF,0xF7,0x7F,
+    0x49,0xF2,0x50,0x12,0xC8,0x01,0x46,0xF2,0x86,0x27,0xD0,0x4F,0x48,0xDA,0x50,0xFA,
+    0xC8,0x01,0x46,0xDA,0x84,0x2F,0xC8,0x77,0x48,0xC2,0x40,0xCA,0xC8,0x01,0x86,0x27,
+    0xF8,0x87,0x4E,0xB2,0x46,0xB2,0xC8,0x01,0x87,0x27,0xF0,0x37,0xBA,0xFF,0xFF,0x2F,
+    0xE8,0x03,0x47,0x01,0x88,0x26,0x40,0xB2,0x42,0x0B,0x40,0x48,0x00,0x48,0x02,0x0B,
+    0x48,0x72,0x40,0x7A,0xC8,0x01,0x86,0x27,0xF0,0x7F,0x4B,0x62,0x16,0x01,0xC8,0x01,
+    0x40,0x5A,0x58,0x82,0x87,0x17,0xF8,0xDF,0xB8,0xFF,0xEF,0x97,0x48,0x3A,0x40,0x42,
+    0xC8,0x01,0x86,0x0F,0xF7,0x27,0xBA,0xFF,0xF0,0xBF,0x85,0x07,0xDF,0x3F,0xB9,0xFF,
+    0xF7,0x77,0xE8,0x03,0x45,0x31,0x88,0x8E,0xE8,0x85,0x00,0x00,0x00,0xA0,0x06,0x01,
+    0x00,0x80,0x07,0x01,0x30,0x20,0x02,0x00,0x00,0x10,0x00,0x01,0x80,0x00,0x01,0x01,
+    0xF8,0x00,0x06,0x42,0x28,0xD8,0x01,0x00,0xA8,0x85,0x33,0x22,0xE8,0x03,0x85,0x07,
+    0xF1,0x2F,0x43,0x9A,0x2C,0x01,0x00,0x2B,0xAD,0x2B,0x03,0xB1,0xAF,0x2A,0xB8,0xFF,
+    0xEC,0xAF,0xA5,0x01,0xFA,0x03,0x31,0x08,0x42,0x72,0x71,0x48,0x1C,0x0B,0x5C,0x0B,
+    0x02,0x48,0x1A,0x0B,0x09,0x2B,0xFE,0x0B,0x30,0x48,0xA8,0x16,0x0E,0x09,0x04,0x0B,
+    0x1B,0x2B,0xE8,0x85,0xAD,0x85,0x87,0x9D,0x42,0x32,0xC1,0x01,0x42,0x0B,0x40,0x48,
+    0x00,0x48,0x02,0x0B,0x51,0x22,0x49,0x2A,0x40,0x2A,0x81,0x0F,0xC9,0x9F,0x61,0x1A,
+    0x35,0x2A,0xA9,0x01,0x01,0xBF,0x41,0x0A,0xBE,0xFF,0xFF,0x77,0x52,0x03,0x81,0x01,
+    0xE7,0x03,0x40,0x79,0x80,0x0E,0x51,0xEA,0x48,0xEA,0x00,0x01,0x58,0xD2,0x80,0x07,
+    0xF8,0x2F,0x53,0xD2,0x48,0xD2,0x00,0x09,0x58,0xBA,0x80,0x07,0xF9,0xFF,0x52,0x03,
+    0x80,0x01,0xE2,0x03,0x40,0x59,0x8D,0x86,0x40,0xB2,0x48,0xAA,0x88,0x21,0x12,0x01,
+    0xD5,0x3B,0xD7,0x1B,0x18,0xFA,0x42,0x5C,0x44,0x34,0xD8,0xD8,0x04,0x1C,0xE0,0x00,
+    0xE2,0x48,0xE4,0x90,0x95,0x95,0x14,0xD2,0x99,0xAE,0x57,0x03,0x80,0x01,0xE2,0x03,
+    0x40,0x59,0x85,0x2E,0x50,0x42,0x48,0x4A,0x40,0x4A,0x58,0x0D,0x82,0x0F,0xC0,0xB7,
+    0x40,0x0D,0x80,0x07,0xDF,0xF7,0xEA,0x43,0x46,0x31,0x80,0x26,0x87,0x9D,0xE9,0x85,
+    0x10,0x00,0x00,0x42,0x00,0x01,0x00,0x42,0x80,0x00,0x01,0x01,0x00,0xA0,0x00,0x01,
+    0x00,0x80,0x07,0x01,0x38,0xA0,0x01,0x01,0x4C,0xFA,0x6F,0x54,0x82,0x13,0x68,0x54,
+    0x80,0x13,0x32,0x52,0x92,0x01,0xF5,0x93,0x80,0x13,0xCC,0x4B,0x83,0x0B,0x3E,0x82,
+    0xA8,0x85,0xF7,0x2C,0x65,0xC2,0xF7,0x23,0x11,0x22,0xCC,0x6E,0x23,0x21,0x19,0x02,
+    0x60,0xB2,0xCF,0x38,0x06,0xD9,0x08,0x00,0xC2,0xC0,0x41,0x24,0x40,0x2C,0x4C,0x09,
+    0x8A,0x26,0x40,0x0C,0x21,0x69,0x09,0x20,0xD4,0x08,0x93,0x65,0x50,0x09,0x88,0x26,
+    0x40,0x0C,0x14,0x29,0x12,0x90,0xD0,0x88,0x93,0x6D,0x0C,0x59,0x0B,0x48,0xC2,0xC8,
+    0xEA,0x53,0xE8,0x4B,0x0A,0x90,0x00,0x48,0x18,0x52,0x80,0xD3,0x4A,0x08,0x81,0xCB,
+    0x4C,0x48,0x81,0xCB,0x09,0x08,0x39,0x50,0x78,0x90,0x18,0x8A,0x86,0xCB,0x46,0x04,
+    0x89,0xC3,0xC0,0x83,0xE9,0x00,0x82,0x83,0xEF,0x85,0xAF,0x85,0x80,0x35,0x0C,0x01,
+    0x00,0xFD,0x46,0x2E,0x90,0x24,0x80,0x1C,0x42,0xDA,0xF6,0x2B,0xF0,0x1B,0x04,0x01,
+    0x66,0xEA,0x56,0xF2,0xC5,0x33,0x71,0x59,0x82,0x1E,0xE0,0x00,0x94,0x05,0x14,0x82,
+    0x9E,0xC6,0x47,0xAA,0x80,0x01,0x85,0x2C,0xE8,0x03,0x46,0x11,0x8E,0x2E,0x50,0xC2,
+    0x40,0x83,0x30,0x09,0x18,0x82,0x01,0x83,0x06,0x27,0x40,0xAA,0x42,0x13,0x40,0x90,
+    0x00,0x90,0x02,0x13,0x01,0xF9,0x87,0x03,0x68,0x01,0x80,0xD6,0x08,0x01,0x50,0x1D,
+    0x03,0x01,0x28,0x59,0x63,0x4A,0x0E,0x68,0x01,0x77,0x30,0x21,0x19,0x32,0xCA,0xB0,
+    0xCD,0xB0,0xEB,0xB3,0x70,0x09,0x88,0x2E,0x82,0x83,0xE0,0x48,0x92,0x4D,0xE6,0x90,
+    0x48,0x29,0x80,0x1E,0xE6,0x00,0x92,0x05,0x17,0xC2,0x9C,0x76,0x50,0x2A,0x06,0x19,
+    0x80,0x83,0x88,0x0C,0x60,0x02,0x6E,0x1D,0x35,0x01,0x78,0xDA,0xB9,0x01,0x06,0x0F,
+    0x70,0x01,0x88,0x9E,0x50,0x15,0x90,0x04,0x11,0x01,0xC0,0x43,0x30,0x1A,0x31,0x8A,
+    0xBB,0xFF,0xFF,0xB7,0xE5,0x68,0xE3,0xC3,0xCE,0x0C,0x48,0x00,0x08,0x00,0x1E,0x42,
+    0x8D,0x03,0x03,0x59,0x8D,0x03,0xED,0x20,0xE0,0x20,0x03,0x4F,0x50,0x15,0x90,0x04,
+    0x11,0x01,0xC0,0x43,0x30,0x1A,0x31,0x8A,0xBB,0xFF,0xFF,0x17,0xE3,0x68,0xEB,0x20,
+    0xE7,0xB0,0x93,0xB5,0xC4,0x0C,0x10,0x32,0x9D,0xD6,0xE6,0xC3,0x1E,0x01,0x4C,0x08,
+    0x48,0x01,0x80,0x96,0xC8,0x0C,0x48,0x01,0x81,0x36,0x80,0x03,0xEB,0xC3,0x81,0x03,
+    0x05,0x59,0x85,0x03,0xE0,0x20,0x05,0x37,0x81,0x03,0xE9,0xC3,0x83,0x03,0x8B,0x1B,
+    0x05,0x59,0x8D,0x03,0xEB,0x20,0xE5,0x20,0x00,0x2F,0xC0,0x0C,0x40,0x09,0xC8,0x16,
+    0x01,0x59,0x85,0x03,0xE1,0x20,0x33,0x02,0xB9,0xFF,0xFF,0x77,0x42,0xF2,0x44,0x0B,
+    0x10,0x01,0x1A,0x8A,0x04,0x0B,0x4A,0xEA,0x40,0x43,0x1A,0xC2,0x00,0x43,0xC2,0x2C,
+    0xE8,0x03,0x46,0x11,0x8C,0x2E,0x40,0xB2,0x42,0x0B,0x40,0x48,0x00,0x48,0x02,0x0B,
+    0x04,0x27,0x48,0x9A,0x40,0x43,0x10,0x09,0x18,0x82,0x00,0x43,0xE0,0xC3,0x0B,0x11,
+    0x1B,0x42,0xA0,0xC3,0x87,0x35,0xE8,0x85,0xAC,0xFD,0x87,0x0D,0xF8,0x54,0x30,0x32,
+    0x34,0x62,0x68,0x2A,0xA8,0x01,0x56,0x09,0x88,0x4E,0x00,0x0F,0x82,0x0F,0xC0,0xC7,
+    0xE2,0x43,0x31,0x00,0xA9,0xD6,0xE7,0x43,0x08,0xF9,0x05,0x42,0xA0,0x43,0x01,0x09,
+    0x34,0x22,0x54,0x32,0x01,0x8F,0x61,0x01,0xC3,0x2E,0xF0,0x00,0x08,0x01,0x1F,0x42,
+    0x09,0x83,0x32,0x0A,0x07,0x17,0x00,0xF9,0x09,0x83,0x0A,0x01,0x1C,0x01,0x08,0x9B,
+    0x00,0x01,0x00,0x4F,0x78,0x01,0x88,0x16,0x1E,0x01,0x00,0x9B,0x01,0x17,0xC0,0x9B,
+    0x07,0x9B,0xCE,0xB0,0xE4,0x00,0x92,0x05,0x17,0x42,0x9C,0x9E,0x30,0x02,0x43,0x01,
+    0x80,0x26,0x00,0xA1,0x00,0x83,0x04,0x01,0x30,0x22,0x04,0x0F,0x04,0x21,0x00,0x83,
+    0xD4,0x00,0x93,0x25,0x44,0x83,0x0A,0x01,0x1A,0x42,0x00,0x83,0xE2,0x43,0x31,0x00,
+    0xA9,0xE6,0xE7,0x43,0x08,0xF9,0x05,0x42,0xA0,0x43,0x61,0x01,0x88,0x5E,0xC6,0x24,
+    0x40,0x09,0x88,0x2E,0x04,0x01,0x00,0x83,0x44,0x83,0x0A,0x01,0x1A,0x42,0x00,0x83,
+    0x87,0x2D,0xE8,0x85,0xAC,0x9D,0x87,0x1D,0x20,0x01,0x00,0x01,0x80,0x0C,0x70,0x15,
+    0x42,0xCA,0xEA,0x03,0xEE,0x00,0x92,0x3D,0x6E,0xBA,0xAA,0x01,0x00,0xAF,0x81,0x07,
+    0xF9,0xFF,0xE7,0x43,0x30,0x00,0xA2,0x1E,0x42,0x9A,0xEA,0x03,0x17,0xC2,0x9D,0xB6,
+    0x42,0x8A,0xEA,0x03,0x10,0xC2,0x9D,0x06,0x21,0x11,0xE0,0x43,0x08,0xF9,0x05,0x42,
+    0xA2,0x43,0x41,0xB2,0x46,0x0B,0x14,0x79,0x00,0x8A,0x48,0x09,0x88,0x9E,0x08,0x01,
+    0x0E,0x0B,0x44,0x0B,0x83,0x8B,0xE1,0xB0,0xE7,0x20,0x93,0x25,0x60,0x11,0x88,0x56,
+    0x30,0x5A,0xD3,0xCB,0xD4,0x1C,0x10,0x8A,0x8A,0x2E,0xD0,0xCB,0xD4,0x24,0x10,0x8A,
+    0x88,0x0E,0x08,0x09,0x8F,0x0C,0x08,0x01,0x08,0x0B,0x0A,0x01,0x08,0x0B,0x0C,0x81,
+    0x02,0x0B,0x44,0x0B,0x10,0x01,0x1C,0x8A,0x00,0x0B,0x62,0x11,0x88,0x4E,0xC6,0x0C,
+    0x39,0xB7,0x4D,0xCA,0x58,0x54,0x84,0x13,0x12,0x01,0x80,0x13,0xE4,0x4B,0x82,0x0B,
+    0x4A,0xDA,0x89,0x01,0x5E,0x53,0x84,0x13,0x58,0x53,0x8A,0x13,0x12,0x89,0x88,0x13,
+    0x14,0x19,0x88,0x13,0x4E,0x53,0x8E,0x13,0x48,0x53,0x94,0x13,0x4A,0x4B,0x92,0x0B,
+    0x0C,0x11,0x90,0x0B,0x3F,0x82,0xAB,0x85,0x80,0x4D,0x34,0x22,0x30,0x01,0x00,0x01,
+    0x80,0x2C,0x38,0x01,0x4C,0x42,0xD1,0x43,0xD2,0x4B,0x1E,0x42,0x81,0x14,0x40,0x3A,
+    0x80,0x81,0x80,0x24,0xC0,0x81,0x80,0x1C,0x60,0x09,0x80,0x0E,0x60,0x29,0x88,0x76,
+    0x60,0x09,0x88,0x1E,0x70,0x52,0xB1,0x2C,0x78,0x52,0x01,0x27,0x73,0x52,0xE1,0x80,
+    0x81,0x2C,0x78,0x42,0xF8,0x01,0x42,0x35,0xB9,0xFF,0xF7,0xB7,0x00,0x3F,0x60,0x21,
+    0x89,0x2E,0x70,0x32,0x47,0x35,0xB8,0xFF,0xF9,0xE7,0x7D,0x12,0xB8,0x81,0x6B,0xB2,
+    0xA9,0x01,0xE6,0x43,0x08,0xF9,0x05,0x42,0xA1,0x43,0xE1,0x43,0x08,0x01,0x19,0x42,
+    0xA0,0x43,0x49,0xCA,0x42,0x43,0x12,0x01,0x1A,0x82,0x00,0x43,0x4A,0xBA,0x40,0x43,
+    0x10,0x01,0x1C,0x82,0x00,0x43,0x4A,0x92,0x40,0x43,0x10,0x09,0x18,0x82,0x00,0x43,
+    0x0C,0x09,0x00,0x01,0xBA,0xFF,0xFF,0xB7,0x42,0x09,0x88,0x6E,0x62,0x21,0x88,0x66,
+    0x10,0x09,0x90,0x04,0x30,0x82,0x19,0x01,0xCF,0x14,0xB8,0xFF,0xF0,0xAF,0x17,0x09,
+    0x90,0x04,0x10,0x01,0x08,0x59,0x00,0xDF,0x00,0xA0,0x00,0x01,0x00,0x80,0x07,0x01,
+    0xFF,0xFF,0xFF,0xFF,0x00,0xF8,0x07,0x00,0x78,0x60,0x06,0x01,0xE8,0x60,0x02,0x00,
+    0xF8,0x00,0x06,0x42,0x00,0x38,0x00,0x01,0x00,0x00,0x06,0x42,0x80,0x01,0x06,0x42,
+    0x18,0xA0,0x01,0x01,0x68,0xA0,0x04,0x01,0x38,0xA0,0x01,0x01,0x58,0xA0,0x01,0x01,
+    0x40,0x35,0x30,0x9A,0xBE,0xFF,0xF7,0x87,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0x81,
+    0x30,0xC2,0x31,0x9A,0xBE,0xFF,0xF7,0x47,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0xE1,
+    0x40,0x82,0x36,0x9A,0xBE,0xFF,0xF7,0x07,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0x81,
+    0x30,0x9A,0xC0,0x24,0xBD,0xFF,0xF7,0xC7,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0x81,
+    0x18,0x09,0xC0,0x1C,0xBD,0xFF,0xF7,0x87,0x00,0x27,0x62,0x09,0x80,0x0E,0x60,0x29,
+    0x88,0x06,0x62,0x09,0x88,0x76,0x10,0x09,0x91,0x04,0x30,0x82,0x18,0x01,0xC8,0x14,
+    0xBD,0xFF,0xF7,0x17,0x10,0x01,0x90,0x04,0x30,0x9A,0xC8,0x14,0xC7,0x2C,0xB8,0xFF,
+    0xF0,0xDF,0x04,0x7F,0x10,0x11,0x90,0x04,0x11,0x09,0x30,0x82,0x18,0x01,0xC8,0x14,
+    0xBC,0xFF,0xF7,0x97,0x10,0x11,0x90,0x04,0x10,0x01,0x30,0x9A,0xC8,0x14,0xC0,0x2C,
+    0xBC,0xFF,0xF7,0x57,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0x21,0x40,0x35,0x30,0x9A,
+    0xBC,0xFF,0xF7,0x17,0x10,0x09,0x90,0x04,0x12,0x01,0x08,0xC1,0x30,0xC2,0x31,0x9A,
+    0xBB,0xFF,0xF7,0xD7,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0x81,0x30,0x9A,0xC0,0x24,
+    0xBB,0xFF,0xF7,0x97,0x10,0x09,0x90,0x04,0x10,0x01,0x08,0x81,0x18,0x09,0xC0,0x1C,
+    0xBB,0xFF,0xF7,0x57,0xE6,0x43,0x09,0xF9,0x01,0x42,0xA0,0x43,0x40,0x12,0x45,0x0B,
+    0x42,0x48,0x02,0x48,0x05,0x0B,0x40,0x0A,0x0A,0x01,0x0F,0x0B,0x0C,0x01,0x00,0x0B,
+    0x44,0x0B,0x12,0x01,0x1A,0x8A,0x00,0x0B,0x87,0x4D,0xE8,0x85,0xAC,0x85,0x63,0xE2,
+    0xE8,0x03,0x2F,0x01,0x40,0x09,0x80,0x16,0xE8,0x03,0x47,0x29,0x8C,0x5E,0x70,0xCA,
+    0xC0,0x83,0x41,0x11,0x9F,0x26,0xE8,0x03,0xBF,0xFF,0xF7,0xEF,0x83,0xAB,0xE9,0x85,
+    0xE1,0x00,0x82,0x83,0xEF,0x85,0xEB,0x03,0x40,0x21,0x88,0x26,0xBF,0xFF,0xF7,0x9F,
+    0x07,0x19,0xA8,0x03,0xEF,0x85,0xEB,0x03,0x47,0x19,0x80,0xDE,0xE8,0x03,0x47,0x31,
+    0x84,0xC6,0x47,0x5A,0xC2,0x01,0xF5,0x03,0x40,0x01,0x88,0x3E,0x41,0x42,0x84,0x01,
+    0xF0,0x0B,0x48,0x31,0x9C,0x3E,0xE0,0x03,0x30,0x00,0xA8,0x26,0x43,0x22,0xC4,0x01,
+    0xE0,0x03,0x42,0x01,0x84,0x86,0x48,0x22,0xC0,0x43,0x40,0x01,0x82,0x16,0xF7,0x00,
+    0x84,0x43,0x40,0x12,0x85,0x2B,0x08,0x59,0x8A,0x0B,0x8C,0x2B,0x48,0xD2,0x43,0x43,
+    0x10,0x09,0x18,0x82,0x03,0x43,0xE8,0x85,0xBA,0xFF,0xEF,0xFF,0xEF,0x85,0xAB,0xC5,
+    0x20,0x01,0x30,0x1A,0x03,0x09,0x48,0xB2,0x69,0xCA,0x33,0x01,0x59,0x51,0x80,0xE6,
+    0xE3,0x4E,0x78,0xC2,0xE0,0xD3,0x81,0x27,0xF8,0x47,0x61,0x52,0x22,0x09,0x39,0x61,
+    0x62,0x52,0x71,0x61,0x63,0x92,0x41,0x72,0x15,0x31,0xC0,0x01,0x52,0x03,0x80,0x01,
+    0x59,0xC9,0x80,0xAE,0xE0,0x4E,0x58,0x59,0x80,0x56,0x59,0x61,0x80,0x66,0x59,0x69,
+    0x88,0xBE,0x01,0x29,0xA8,0x43,0x26,0x09,0x00,0x9F,0x59,0xD1,0x81,0x6E,0x59,0x01,
+    0x8E,0x7E,0xA9,0x53,0x25,0x09,0x08,0x59,0xA1,0x0B,0x00,0x57,0x06,0x39,0xA8,0x43,
+    0x00,0x3F,0x81,0x07,0xE9,0xFF,0x07,0x27,0x19,0x12,0xA0,0xD3,0x00,0x0F,0x01,0x41,
+    0x19,0x12,0xA0,0xD3,0x00,0xEF,0x00,0x11,0xA8,0x43,0x26,0x09,0x00,0xCF,0x00,0x01,
+    0xA9,0x43,0x46,0x43,0x19,0x82,0x01,0x43,0x06,0x9F,0xA8,0x43,0x20,0x09,0x00,0x87,
+    0x06,0x19,0xA8,0x43,0x20,0x09,0x00,0x67,0x06,0x21,0xA8,0x43,0x20,0x09,0x00,0x47,
+    0xA8,0x53,0x26,0x09,0x08,0x69,0xA6,0x0B,0x06,0x1F,0xA8,0x53,0x27,0x09,0x08,0x79,
+    0xA0,0x0B,0x60,0x01,0x82,0x66,0x40,0x82,0x40,0x0B,0x30,0x48,0xAE,0x2E,0x08,0x81,
+    0x02,0x0B,0x08,0x81,0x00,0x0B,0x08,0x81,0x01,0x0B,0x40,0x43,0x19,0x82,0x05,0x43,
+    0xEF,0xC5,0xAF,0x8D,0x82,0x15,0x44,0x4A,0x82,0x0C,0x40,0x0A,0xC4,0x01,0xD5,0x2B,
+    0xD0,0x33,0x0E,0x01,0xAA,0x0B,0x62,0x1A,0xE5,0x0B,0x11,0xF9,0x01,0x8A,0xA0,0x0B,
+    0xE1,0x0B,0x11,0x01,0x19,0x8A,0xA0,0x0B,0x4E,0xFA,0x89,0x01,0x42,0x53,0x1A,0x01,
+    0x1A,0xD2,0x00,0x53,0x52,0xAA,0x41,0x8B,0x18,0x01,0x1C,0xCA,0x01,0x8B,0x4A,0x92,
+    0x40,0x53,0x18,0x09,0x18,0xD2,0x00,0x53,0x52,0x03,0x80,0x01,0xE7,0x0B,0x48,0x79,
+    0x80,0xAE,0xE1,0x03,0x41,0x69,0x8E,0x16,0x08,0xA9,0x00,0x91,0xBE,0xFF,0xEF,0x57,
+    0x41,0x09,0x88,0xDE,0x33,0x42,0x19,0x82,0x00,0x38,0x12,0x09,0x90,0xCD,0x95,0x04,
+    0x18,0x01,0xC0,0x0C,0xBB,0xFF,0xEF,0x47,0x40,0x6A,0x11,0x09,0x90,0x04,0x10,0x01,
+    0x90,0xCD,0x35,0x9A,0xBB,0xFF,0xEF,0x07,0xC0,0x14,0x10,0x09,0xC8,0x48,0xED,0x48,
+    0x92,0x04,0x00,0x48,0x10,0x01,0x18,0x09,0xBA,0xFF,0xEF,0xB7,0x00,0xF7,0x08,0xA1,
+    0x07,0x91,0xB8,0xFF,0xE8,0x3F,0x45,0x09,0x8B,0xC6,0x18,0xAA,0x13,0x09,0x20,0x40,
+    0x60,0x08,0x90,0x04,0x30,0x9A,0xC0,0x0C,0xBA,0xFF,0xEF,0x37,0x00,0x77,0x08,0xB1,
+    0x07,0x91,0xB8,0xFF,0xE8,0xBF,0x44,0x09,0x88,0x46,0xC0,0x14,0x15,0x09,0xC8,0x48,
+    0xEA,0x48,0x00,0x48,0x30,0x9A,0x90,0x04,0xB9,0xFF,0xEF,0xB7,0xE6,0x03,0x09,0xF9,
+    0x01,0x42,0xA0,0x03,0x40,0x42,0x40,0x0B,0x42,0x48,0x02,0x48,0x00,0x0B,0x40,0x3A,
+    0x0A,0x01,0x0F,0x0B,0x0C,0x01,0x00,0x0B,0x44,0x0B,0x12,0x01,0x1A,0x8A,0x00,0x0B,
+    0xE8,0xF5,0x07,0x00,0x68,0xA0,0x01,0x01,0xF8,0x00,0x06,0x42,0x80,0x01,0x06,0x42,
+    0x00,0xA0,0x05,0x01,0x00,0x00,0x00,0x01,0x00,0x38,0x00,0x01,0x78,0x60,0x06,0x01,
+    0x10,0x00,0x00,0x42,0x00,0xA0,0x06,0x01,0x00,0x00,0x00,0x42,0x38,0xA0,0x01,0x01,
+    0x08,0xA0,0x01,0x01,0x52,0x3A,0x43,0x83,0x03,0x83,0x42,0x3A,0xEF,0x0B,0x4A,0xF9,
+    0x92,0x16,0xE8,0x0B,0xE2,0x48,0xAA,0x0B,0xE8,0x03,0x42,0xC1,0x90,0x0E,0x00,0x01,
+    0x03,0x83,0x3C,0x82,0x4C,0x0A,0x4B,0x53,0x58,0xFA,0xE2,0xC3,0x1C,0x12,0x0C,0x53,
+    0x10,0x43,0x02,0x09,0xAB,0xC3,0x3A,0x82,0xAA,0x85,0x40,0xE2,0x84,0x01,0x42,0x0B,
+    0x10,0x01,0x1C,0x8A,0x02,0x0B,0x54,0xD2,0x4A,0xBA,0x42,0xD2,0x85,0x27,0xD0,0x77,
+    0xEF,0x85,0xA8,0xC5,0x46,0xA2,0x82,0x01,0xE2,0x0B,0x78,0xBA,0x30,0x48,0xAC,0x46,
+    0xE2,0x0B,0x10,0x01,0x18,0x8A,0xA0,0x0B,0x44,0xC3,0x0B,0x01,0x1B,0x42,0x04,0xC3,
+    0xE8,0xC5,0x17,0x01,0x0D,0xD3,0x45,0xCB,0x6E,0x5A,0x02,0x79,0x01,0x0A,0x30,0x72,
+    0x59,0x72,0xB2,0x01,0x61,0x44,0x57,0x63,0x48,0x09,0x80,0xDE,0x48,0x29,0x80,0x46,
+    0x4B,0x41,0x88,0x86,0x8F,0x93,0x43,0xCB,0x38,0x48,0x8E,0x16,0x05,0x81,0x00,0xC3,
+    0xED,0xC5,0x0F,0xD3,0x10,0xC2,0x8C,0x16,0x07,0x29,0x05,0xC3,0x01,0x3F,0xE0,0x0A,
+    0x02,0xCB,0xE7,0x00,0x97,0x05,0x24,0x44,0x40,0x89,0x9A,0x06,0x20,0x5C,0x07,0xA1,
+    0x07,0xC3,0xED,0xC5,0xC8,0x8B,0x4B,0x11,0x91,0xF6,0x61,0xEA,0x48,0x01,0x88,0x2E,
+    0x43,0xC3,0x07,0x04,0x41,0xDA,0x11,0x43,0x22,0x54,0x07,0xD7,0x43,0xC3,0x47,0x0C,
+    0x10,0x48,0xC0,0x40,0x91,0x25,0x44,0xC2,0x06,0x24,0x00,0x89,0x11,0x00,0xD0,0x00,
+    0x40,0x01,0xC1,0x76,0x97,0x05,0xBF,0xFF,0xF1,0x17,0x44,0xA2,0x12,0x22,0x8C,0x46,
+    0x00,0x09,0x80,0x07,0xC8,0x5F,0x04,0xC1,0xA9,0x43,0x43,0x6A,0x08,0x09,0x80,0x0B,
+    0x01,0xFF,0x41,0x2A,0x86,0x01,0xED,0x03,0x08,0x69,0x18,0x48,0x40,0x01,0x88,0x36,
+    0xD2,0x00,0x43,0x81,0xC7,0x0E,0x20,0x44,0x07,0x9F,0x21,0x5C,0x01,0x8F,0x41,0x42,
+    0xC1,0x00,0x41,0x19,0xC7,0x1E,0x20,0x44,0x41,0x32,0x11,0x43,0x03,0x4F,0xD1,0x00,
+    0x41,0xB1,0xC1,0x36,0x21,0x44,0x07,0x27,0x4C,0xE2,0x10,0x42,0x87,0x0E,0x41,0xCB,
+    0xA0,0x0A,0x41,0xEA,0x48,0xEA,0x40,0x04,0xCC,0x11,0x16,0x42,0x8F,0x86,0x60,0x44,
+    0x40,0x61,0x8A,0x6E,0x50,0x5B,0xE1,0xE2,0x4A,0x7A,0x88,0x01,0x60,0x01,0x8C,0x1E,
+    0x02,0x09,0xA0,0x43,0x00,0x27,0x00,0x97,0xE0,0xC2,0x40,0x01,0x8A,0x06,0xA0,0x53,
+    0x62,0x44,0xE7,0x00,0x97,0x05,0x24,0x44,0x40,0x89,0x9A,0x16,0x06,0x01,0x18,0x02,
+    0x23,0x44,0xCF,0x83,0xE3,0x00,0x8A,0x83,0x05,0x81,0x00,0xC3,0xED,0xC5,0x07,0xD3,
+    0xE8,0xC5,0x07,0x00,0x10,0x00,0x00,0x42,0x00,0xA0,0x00,0x01,0xF8,0x00,0x06,0x42,
+    0x80,0x00,0x01,0x01,0x00,0x80,0x07,0x01,0x80,0x01,0x06,0x42,0xF8,0xFF,0x07,0x00,
+    0x00,0x10,0x00,0x01,0x78,0x60,0x06,0x01,0x00,0x40,0x00,0x01,0x88,0x76,0x00,0x00,
+    0x77,0x81,0xF8,0xFF,0xF8,0x02,0x07,0x00,0xA8,0x85,0x80,0x07,0xC8,0x1F,0x65,0x32,
+    0xE8,0x03,0x47,0x01,0x80,0x26,0x40,0x31,0x8F,0xD6,0xBF,0xFF,0xD7,0x5F,0x3E,0xBF,
+    0xBA,0xFF,0xD7,0x1F,0x38,0xA7,0x07,0x00,0x00,0xA0,0x05,0x01,0xAE,0xC5,0x67,0xEA,
+    0x03,0x81,0x86,0x03,0x11,0x11,0x80,0x13,0x37,0x01,0x80,0x33,0x05,0x29,0x80,0x03,
+    0x03,0x41,0x89,0x03,0x07,0x69,0x89,0x03,0x05,0x69,0x88,0x03,0x11,0x02,0x32,0x3A,
+    0xBD,0x01,0x15,0xC4,0x05,0xA1,0x1D,0x04,0x09,0x09,0x30,0x02,0x80,0x01,0x8A,0x0B,
+    0x88,0x0B,0x0A,0x41,0x88,0x0B,0x1C,0x51,0x88,0x1B,0x1E,0xA1,0x91,0x1B,0x18,0x01,
+    0x90,0x1B,0x1C,0x81,0x90,0x1B,0x9E,0x0B,0x98,0x13,0x17,0xE1,0x97,0x13,0x95,0x1B,
+    0x98,0x13,0x13,0x81,0x9D,0x13,0x99,0x33,0xA1,0x0B,0x09,0x81,0xA0,0x0B,0x83,0x33,
+    0x84,0x33,0x82,0x33,0x84,0x33,0x0E,0x29,0x90,0x0B,0x02,0x51,0x29,0x04,0x01,0x69,
+    0x09,0x00,0x30,0x2A,0xA9,0x01,0x06,0x44,0x00,0x29,0x10,0x00,0x01,0x44,0x03,0x69,
+    0x13,0x00,0x00,0x43,0x45,0xE2,0x05,0x43,0x01,0x51,0x98,0x43,0x30,0x02,0x09,0x51,
+    0x80,0x91,0x86,0x27,0xE0,0x2F,0x00,0x51,0xB0,0xC3,0x0D,0xF1,0xB7,0xCB,0xAF,0xF3,
+    0x34,0x02,0x81,0x01,0xA6,0x33,0xA0,0x33,0x10,0x81,0xA8,0x13,0x12,0x51,0xA8,0x13,
+    0x16,0x41,0x1E,0x14,0x18,0xF9,0x9F,0x11,0x06,0xDC,0x19,0x71,0xA9,0x1B,0x1C,0x91,
+    0xAF,0x1B,0x1E,0x11,0xB2,0x1B,0xB0,0x0B,0x1A,0xA1,0x88,0x1B,0x1C,0x41,0x89,0x1B,
+    0x1E,0x21,0x8B,0x1B,0x09,0x14,0x12,0x41,0x90,0x13,0x98,0x0B,0x0A,0x29,0x98,0x0B,
+    0x0B,0xF9,0x8F,0x49,0x08,0x0C,0x0E,0x51,0xB3,0x0B,0x35,0x34,0x0A,0x09,0xA0,0x0B,
+    0x15,0x21,0xB0,0x53,0x1B,0x31,0xB0,0x5B,0x09,0x99,0x0E,0x0C,0x24,0xE1,0xB1,0x23,
+    0xB4,0x1B,0xA6,0x33,0x08,0x19,0xBC,0x0B,0x28,0x01,0x30,0x0A,0xCE,0x01,0x9B,0x6B,
+    0xA2,0x6B,0x88,0x01,0xB2,0x63,0xB0,0x63,0x24,0x81,0xB2,0x63,0x26,0x51,0xB0,0x63,
+    0xB8,0x53,0x10,0xB1,0xBC,0x53,0xBA,0x5B,0x48,0xA2,0x04,0x0B,0x8C,0x2B,0x48,0xA2,
+    0xC6,0x01,0x34,0x0B,0x88,0x91,0x38,0x0B,0x8A,0xE1,0x3E,0x0B,0x0C,0x01,0x41,0x8A,
+    0x85,0x27,0xD8,0x77,0x41,0x7A,0x0C,0x01,0xC0,0x01,0x82,0x27,0xDC,0x4F,0x4D,0x62,
+    0x46,0x6A,0xCC,0xE1,0x00,0x0B,0xCE,0xE1,0x01,0x0B,0x8C,0x61,0x0A,0x0B,0x88,0x01,
+    0x0D,0x0B,0xCA,0x61,0x03,0x0B,0xCA,0x81,0x07,0x0B,0x88,0xF9,0x8C,0x69,0x0C,0x0B,
+    0xCC,0xF9,0xCF,0x89,0x10,0x0B,0xFA,0x48,0x10,0x0B,0xF8,0x48,0x0F,0x0B,0xEE,0xC5,
+    0xA8,0x85,0x01,0x01,0x63,0xDA,0x4B,0xDA,0xA4,0xE1,0xF6,0x5B,0x01,0x8F,0x08,0x21,
+    0x18,0x0A,0xCA,0x50,0x08,0x59,0x2B,0x79,0x0A,0x48,0xC2,0x88,0xA8,0x6B,0x28,0x01,
+    0xAC,0x6B,0xAA,0x6B,0x0E,0xD9,0x08,0x48,0xC2,0x88,0x02,0x6C,0x02,0x6C,0xE4,0x00,
+    0x94,0x05,0x16,0x1A,0xC0,0x5E,0x07,0x01,0x13,0xF9,0x2F,0x49,0x08,0x68,0x03,0x37,
+    0x00,0x08,0xCA,0x48,0xC8,0x48,0x8A,0x53,0x8A,0x53,0xE2,0x00,0x94,0x05,0x16,0x1A,
+    0xC1,0xB6,0xEF,0x85,0xA3,0x85,0x51,0x3A,0x90,0x01,0x0E,0x01,0x16,0x8C,0xD0,0x01,
+    0xAA,0x8B,0xB6,0x8B,0x35,0x9A,0x98,0x01,0xB4,0xCB,0x18,0xCC,0xBA,0xCB,0xB4,0xCB,
+    0x22,0x09,0xA8,0xA3,0xA9,0x8B,0xD8,0x01,0xF4,0xDB,0xAE,0x9B,0x31,0x9A,0x98,0x01,
+    0xA1,0xCB,0x9A,0x01,0xA6,0xE3,0x98,0xCB,0xA1,0xA3,0x24,0x41,0x88,0xA3,0x40,0x09,
+    0x8A,0x16,0xA0,0xCB,0xE5,0x85,0x39,0x9F,0xE3,0x85,0x39,0x82,0x0A,0x08,0x42,0xDA,
+    0x41,0x13,0x18,0x01,0x04,0xD2,0x90,0x41,0x04,0x13,0x10,0xD0,0x1A,0x8A,0x08,0x0B,
+    0x40,0x0B,0x42,0x0B,0x14,0x41,0x18,0x8A,0x00,0x0B,0x08,0x01,0x03,0x0B,0x3C,0x82,
+    0xAA,0x85,0x40,0x9A,0x40,0x0B,0x30,0x48,0xA2,0x2E,0x08,0x81,0x06,0x0B,0x08,0x81,
+    0x04,0x0B,0x08,0x81,0x02,0x0B,0x48,0x72,0x8C,0x01,0x46,0x53,0x38,0x90,0x78,0x90,
+    0x04,0x53,0x44,0x53,0x18,0x81,0x19,0xD2,0x02,0x53,0x5C,0x52,0x12,0x09,0x06,0xD3,
+    0x16,0x91,0x01,0x13,0x44,0x42,0x42,0x23,0x10,0x61,0x18,0xA2,0x02,0x23,0x44,0x23,
+    0x1A,0xA2,0x00,0x23,0x4C,0x23,0x1A,0xA2,0x08,0x23,0x4A,0x23,0x18,0xA2,0x08,0x23,
+    0x40,0x23,0x1E,0xA2,0x02,0x23,0x46,0x43,0x10,0x01,0x1A,0x82,0x04,0x43,0x02,0xD1,
+    0x07,0xC3,0x00,0x01,0x08,0xC3,0xEA,0x85,0x40,0xDA,0x41,0x13,0x08,0x09,0x18,0x52,
+    0x00,0x13,0x48,0x13,0x18,0x52,0x0C,0x13,0x4C,0x13,0x1A,0x52,0x0E,0x13,0x42,0x13,
+    0x1E,0x52,0x00,0x13,0x39,0x82,0x43,0xAA,0x58,0x0B,0x10,0x21,0x18,0x8A,0x18,0x0B,
+    0x5A,0x0B,0x10,0x01,0x18,0x8A,0x18,0x0B,0x5C,0x13,0x08,0x01,0x18,0x52,0x18,0x13,
+    0x40,0x5A,0x11,0x01,0x80,0x01,0x06,0x13,0x40,0x13,0x1A,0x52,0x01,0x13,0x4A,0x3A,
+    0x41,0x43,0x10,0x01,0x18,0x82,0x00,0x43,0x38,0x82,0xAB,0x85,0x08,0x09,0x00,0x31,
+    0x85,0x07,0xD0,0xB7,0x08,0x11,0x00,0x21,0x85,0x07,0xD0,0x97,0x00,0x09,0x80,0x07,
+    0xD0,0x77,0x06,0x31,0x86,0x07,0xD0,0x5F,0x00,0x21,0x80,0x07,0xD0,0x47,0x86,0x07,
+    0xD0,0xEF,0xEE,0x85,0xA8,0x85,0x43,0xC2,0x4A,0x92,0xC0,0xA1,0x17,0x43,0xB8,0xFF,
+    0xF0,0x2F,0x03,0x09,0xBA,0xFF,0xFF,0x77,0x07,0xA1,0xB8,0xFF,0xFF,0x7F,0xBB,0xFF,
+    0xFF,0xFF,0xBB,0xFF,0xFF,0x07,0xBE,0xFF,0xFF,0x7F,0xBD,0xFF,0xFF,0xB7,0xBE,0xF7,
+    0xF8,0x67,0x6A,0x9A,0x23,0x01,0x80,0x63,0x42,0x5A,0x08,0x81,0xC0,0xA1,0x82,0x27,
+    0xD0,0x0F,0x45,0x4A,0xC6,0xA1,0x90,0x23,0x85,0x63,0x01,0x64,0x07,0x64,0x03,0x64,
+    0xE8,0x85,0x03,0x00,0x00,0xA0,0x00,0x01,0x68,0xB1,0x05,0x00,0xF8,0xFF,0x07,0x04,
+    0xF0,0x42,0x00,0x00,0x68,0xA0,0x04,0x01,0x80,0x00,0x01,0x01,0x10,0x00,0x00,0x42,
+    0x00,0x00,0x00,0x42,0x80,0x01,0x06,0x42,0xF8,0x00,0x06,0x42,0x18,0x00,0x02,0x42,
+    0x00,0x30,0x00,0x01,0xA8,0x85,0x80,0x07,0xD0,0xEF,0xEA,0x85,0xAF,0x85,0xB8,0xFF,
+    0xF0,0x9F,0xE8,0x85,0xA8,0x7D,0x80,0x04,0x88,0x0C,0xC0,0x0C,0x80,0x14,0xC0,0x04,
+    0x83,0x1C,0x30,0x42,0x40,0x7E,0x80,0x25,0xE8,0x05,0x00,0x00,0xAC,0xFD,0x87,0x1D,
+    0x30,0x32,0x00,0x01,0x82,0x14,0x00,0x9F,0x44,0xFA,0x0F,0x01,0x0C,0x0B,0x26,0x01,
+    0xC2,0x14,0x00,0x28,0x7F,0xE2,0x4F,0xC3,0x1F,0x02,0x09,0xC3,0xD0,0x6C,0x90,0x04,
+    0x14,0x09,0x08,0x01,0x30,0x82,0xD9,0x64,0x85,0x1F,0xE8,0x37,0xF8,0x82,0x33,0x0A,
+    0xCF,0x99,0x49,0xC9,0x99,0x3E,0x40,0x91,0xE7,0x16,0x48,0xC3,0x1F,0x02,0x0D,0xC3,
+    0x40,0x20,0x63,0x01,0x88,0x36,0xD7,0x6C,0x90,0x04,0x10,0x09,0x09,0x01,0x34,0x82,
+    0xD8,0x64,0x80,0x1F,0xEB,0x8F,0xFC,0xA2,0xD0,0x6C,0x90,0x04,0x14,0x09,0x08,0x01,
+    0x30,0x82,0xD9,0x64,0x84,0x1F,0xE8,0x47,0xF8,0xBA,0xD3,0x6C,0x90,0x04,0x10,0x09,
+    0x09,0x01,0x34,0x82,0xD8,0x64,0x80,0x1F,0xED,0xFF,0x13,0x3A,0xE9,0x16,0x30,0x02,
+    0x30,0xE2,0x31,0x3A,0xFD,0x82,0x13,0xC2,0xE3,0x0E,0x98,0xBA,0x05,0x17,0x10,0x02,
+    0xDB,0x06,0x98,0xA2,0x46,0xE2,0x4E,0x03,0xDE,0x8A,0x0B,0x00,0xC0,0x00,0xCA,0x24,
+    0x00,0x44,0xC0,0x24,0xE0,0x00,0x84,0x24,0xC2,0x14,0xE0,0x00,0x90,0x05,0x86,0x14,
+    0xC8,0x2C,0xC0,0x14,0x15,0x42,0x9C,0x3E,0x87,0x3D,0xE8,0x85,0xAC,0xFD,0x87,0x7D,
+    0x30,0xA2,0x30,0xEA,0xD8,0x0B,0x8B,0x6C,0xD0,0x0B,0x8F,0x64,0x40,0x01,0x80,0x6E,
+    0x48,0x72,0x06,0x99,0x07,0x43,0x12,0xF9,0x58,0x5A,0x96,0x81,0x10,0xD3,0x06,0x43,
+    0x00,0xC1,0x83,0x27,0xC8,0x47,0xFE,0x84,0xB8,0x21,0x02,0xCF,0x40,0x3A,0x0E,0x19,
+    0x04,0x0B,0x0A,0x19,0x06,0x0B,0x48,0x32,0xC2,0x84,0xC0,0x38,0x11,0x01,0x30,0x5A,
+    0x30,0x8A,0x00,0x09,0x82,0x17,0xE0,0x7F,0x31,0x01,0x30,0x1A,0x14,0x09,0x08,0x01,
+    0x40,0x1D,0xA8,0x04,0x81,0x1F,0xE8,0x87,0xE7,0xB0,0x93,0xB5,0x77,0x91,0x99,0xA6,
+    0x40,0xD2,0x45,0x0B,0x10,0x11,0x18,0x8A,0x04,0x0B,0x00,0xE1,0xE8,0x02,0x30,0x00,
+    0xAD,0xE6,0x43,0xC2,0x08,0x01,0x80,0x0B,0x31,0x12,0x31,0x4A,0x00,0x11,0x80,0x17,
+    0xD9,0xBF,0x34,0x1A,0xA8,0x04,0x08,0x01,0x00,0x11,0xD0,0x84,0x84,0x17,0xE0,0x0F,
+    0x30,0x01,0xC0,0x64,0x00,0x00,0x82,0x74,0x01,0xBF,0x30,0x5A,0x30,0x92,0x09,0x01,
+    0x00,0x09,0x80,0x17,0xE0,0x07,0xA9,0x0C,0xA1,0x04,0x30,0xCA,0x40,0x1D,0xD8,0x84,
+    0xD7,0x64,0xB8,0xFF,0xF8,0x1F,0xC2,0x74,0xC8,0x38,0x0E,0x09,0x31,0x5A,0x31,0x92,
+    0x30,0x42,0x80,0x17,0xE3,0x87,0xE0,0xB0,0x90,0xB5,0xC7,0x6C,0x17,0x32,0x9C,0x26,
+    0x30,0x1A,0xA9,0x04,0x08,0x01,0x00,0x19,0xD0,0x84,0x80,0x17,0xE1,0xD7,0x32,0x12,
+    0x30,0x4A,0x01,0x01,0x83,0x17,0xD8,0x27,0xD8,0x03,0x45,0x01,0x84,0xF6,0x41,0xCA,
+    0x08,0x09,0x80,0x0B,0x31,0x12,0x31,0x4A,0x00,0x11,0x80,0x17,0xD9,0xCF,0x32,0x5A,
+    0x08,0x01,0x00,0x09,0xD0,0x6C,0x80,0x17,0xD9,0x77,0x37,0x1A,0xA8,0x04,0x00,0x11,
+    0xD0,0x84,0xC8,0x6C,0x81,0x17,0xE0,0xEF,0xA8,0x0C,0xA0,0x04,0xD9,0x13,0x35,0xCA,
+    0x40,0x1D,0xD8,0x84,0xB8,0xFF,0xFF,0x57,0xDA,0x03,0x05,0x00,0xC9,0x30,0x36,0x1A,
+    0xA8,0x04,0x00,0x19,0xD0,0x84,0xC8,0x6C,0x81,0x17,0xE0,0x5F,0x09,0x09,0x30,0x5A,
+    0x30,0x42,0xD0,0x6C,0x86,0x17,0xD8,0x7F,0x31,0x12,0x31,0x4A,0x00,0x01,0x80,0x17,
+    0xDC,0x7F,0x41,0x02,0x08,0x01,0x80,0x0B,0xD8,0x03,0x05,0x27,0x01,0x37,0x00,0x8C,
+    0xE2,0xB0,0xE5,0x00,0x90,0x05,0xD6,0x64,0x17,0x82,0x9C,0xC6,0x50,0xBA,0x43,0x83,
+    0x0C,0x11,0x18,0x42,0x00,0x83,0x80,0x9D,0xEF,0x85,0xAF,0xFD,0x80,0x1D,0x34,0x7A,
+    0x50,0x01,0x80,0x16,0x00,0x01,0x80,0x0C,0x00,0x0F,0x00,0x09,0x80,0x0C,0x28,0x01,
+    0x00,0x47,0xCA,0x64,0x02,0x40,0xC5,0x30,0x30,0x52,0x09,0x19,0xD8,0x6C,0xC0,0x0C,
+    0x85,0x17,0xD8,0x0F,0x00,0x41,0x81,0x27,0xC8,0x37,0x20,0x09,0xC4,0x34,0x80,0x01,
+    0x81,0x14,0x60,0x81,0x9F,0x36,0x08,0xF9,0x40,0x1A,0x8B,0x11,0x1B,0x0B,0x40,0x08,
+    0x18,0x0B,0x02,0x0F,0x42,0x02,0x1B,0x23,0x02,0xF9,0x4F,0xFA,0x82,0x89,0x8F,0x01,
+    0x10,0x43,0x00,0x11,0x87,0x27,0xC0,0x7F,0xC4,0x14,0xE0,0x03,0x40,0x01,0x80,0x3E,
+    0x00,0x51,0x80,0x27,0xC1,0x47,0x47,0x83,0x40,0x03,0x30,0x00,0xA8,0x86,0x00,0x5F,
+    0x02,0xF9,0x4F,0xAA,0x82,0x89,0x8C,0x01,0x10,0x43,0x00,0x09,0x86,0x27,0xC0,0xDF,
+    0x40,0x83,0x41,0x03,0x30,0x00,0xA0,0x1E,0xE7,0x20,0x93,0x25,0x66,0xF9,0xCB,0x86,
+    0x05,0xE4,0xE1,0xF8,0x30,0x52,0x09,0x09,0xD8,0x6C,0xC0,0x0C,0x83,0x17,0xD8,0x1F,
+    0xE7,0x68,0x93,0x6D,0xC4,0x1C,0x10,0x2A,0x9F,0x9E,0x35,0x2F,0xAC,0x85,0x87,0x4D,
+    0x30,0x6A,0x30,0xA2,0x02,0x91,0xEC,0x02,0x08,0xF9,0x8F,0x09,0x40,0x01,0x80,0x0E,
+    0x30,0x7A,0x00,0x0F,0x39,0x19,0x10,0xF8,0xD0,0x43,0x87,0x44,0xD0,0x53,0x95,0x3C,
+    0x98,0x24,0xC0,0x44,0x06,0x00,0xC2,0x00,0x80,0x2C,0xD0,0x3C,0x04,0x90,0xC2,0x00,
+    0x81,0x1C,0x40,0xCA,0x12,0x81,0x05,0x13,0x18,0x0B,0x30,0x01,0x01,0x67,0x48,0x03,
+    0x02,0x88,0xC5,0x00,0x40,0x03,0x00,0x3B,0x31,0x1A,0x31,0x92,0x08,0x09,0x00,0x01,
+    0x81,0x17,0xD8,0x8F,0xE7,0xB0,0x93,0xB5,0xC4,0x44,0x10,0x32,0x98,0x7E,0x37,0x01,
+    0x03,0x67,0x48,0x03,0x02,0x88,0xC5,0x00,0x40,0x03,0x00,0x3B,0x09,0x09,0x30,0x1A,
+    0x30,0x92,0x31,0x42,0x80,0x17,0xD8,0xFF,0xE7,0xB0,0x93,0xB5,0xC4,0x3C,0x10,0x32,
+    0x9D,0x7E,0xDF,0x43,0x41,0x01,0x80,0x16,0x46,0x1A,0x41,0x0B,0x90,0x4D,0x8C,0x14,
+    0x4E,0x4C,0x01,0x0B,0x48,0x1A,0x01,0x09,0x85,0x43,0xD8,0x43,0x80,0x34,0x30,0x01,
+    0x01,0x67,0x50,0x03,0x02,0x88,0xC5,0x00,0x40,0x03,0x00,0x3B,0x31,0x1A,0x31,0x92,
+    0x08,0x09,0x00,0x01,0x87,0x17,0xD0,0xFF,0xE7,0xB0,0x93,0xB5,0xC4,0x34,0x10,0x32,
+    0x98,0x7E,0x4F,0xC2,0x00,0x01,0x80,0x43,0x40,0x9A,0xC8,0x14,0x01,0x0B,0x4E,0x0B,
+    0x89,0x04,0x30,0x5A,0x10,0x09,0xA0,0x0C,0xC8,0x24,0xC0,0x44,0xB9,0xFF,0xFF,0xAF,
+    0x48,0x0B,0x8B,0x04,0x30,0x5A,0x11,0x01,0xA0,0x0C,0xC8,0x2C,0xC7,0x3C,0xB8,0xFF,
+    0xFD,0x67,0xD9,0x43,0x40,0x01,0x80,0xEE,0x77,0x3A,0x40,0x83,0x91,0x3D,0x4C,0x44,
+    0x00,0x83,0x47,0x42,0x08,0x09,0x80,0x0B,0xD9,0x43,0x55,0x0B,0x89,0x04,0x30,0x5A,
+    0x10,0x09,0xA0,0x0C,0xC8,0x1C,0x00,0x3F,0x00,0x01,0x00,0x42,0x18,0x00,0x04,0x42,
+    0x30,0x20,0x02,0x00,0x00,0x80,0x00,0x01,0xB8,0xFF,0xFF,0x7F,0x40,0xD2,0x08,0x01,
+    0x87,0x0B,0x00,0xBB,0x48,0xCA,0x00,0x01,0x10,0x43,0x48,0xC2,0xC8,0x01,0x1A,0x43,
+    0x87,0x4D,0xE8,0x85,0xA8,0xC5,0x37,0x1A,0x30,0x42,0x30,0xBA,0xD6,0x23,0xD4,0x2B,
+    0x4A,0x9A,0xC0,0xC8,0x89,0x04,0x30,0xD2,0x30,0xCA,0x80,0x17,0xF8,0x5F,0x31,0x01,
+    0x00,0x3F,0x08,0x09,0x31,0xDA,0x31,0x92,0x30,0x42,0x80,0x17,0xD3,0x27,0xE5,0xB0,
+    0x95,0xB5,0x17,0x32,0x98,0xAE,0xCF,0x04,0x10,0x01,0x18,0x01,0x00,0x4F,0x00,0x01,
+    0x00,0x1F,0x80,0x5B,0xE2,0x48,0xE2,0x00,0x95,0x05,0x16,0x42,0x9A,0xCE,0xE7,0x90,
+    0x95,0x95,0x16,0x12,0x9F,0x9E,0xEF,0xC5,0x00,0x80,0x00,0x01,0x00,0x01,0x02,0x42,
+    0x50,0x20,0x02,0x00,0x49,0x32,0x41,0x2A,0x05,0x43,0x9E,0xFF,0x7F,0x04,0x3A,0xF7,
+    0x94,0x15,0x3A,0x00,0x77,0x18,0x06,0xF9,0x04,0xC2,0x3C,0x48,0x74,0x48,0x00,0xCA,
+    0x50,0x01,0xD0,0x5E,0x38,0x90,0x78,0x90,0xD4,0x41,0x40,0x98,0x54,0xE2,0x00,0xD8,
+    0xC6,0xD0,0x4C,0x9B,0x18,0x1A,0x1C,0x5A,0x0B,0x9B,0x3E,0x82,0x40,0x98,0x54,0xCA,
+    0x04,0xD8,0xC4,0xD0,0x44,0x9B,0x18,0x1A,0x18,0x5A,0x00,0x9B,0x3A,0x82,0x93,0x05,
+    0x36,0x10,0x76,0x90,0x0C,0x09,0x00,0x8A,0x48,0x00,0x52,0x9A,0x04,0x00,0xC4,0x00,
+    0x03,0x0B,0x38,0x82,0x96,0x05,0x32,0x10,0x70,0x90,0x0E,0x09,0x00,0x8A,0x54,0x72,
+    0x4C,0x00,0x02,0x00,0x94,0x01,0xC4,0x00,0x03,0x0B,0x38,0x82,0xB3,0x15,0x3B,0x82,
+    0xFB,0x85,0x39,0x82,0x40,0x32,0x48,0x0B,0x10,0x21,0x18,0x8A,0x0B,0x0B,0x38,0x82,
+    0x48,0x1A,0x48,0x43,0x14,0x21,0x18,0x82,0x0B,0x43,0x38,0x82,0x07,0x20,0x28,0xD0,
+    0x68,0x07,0x00,0x07,0x20,0x07,0x00,0x07,0x08,0x07,0x00,0x07,0xAC,0xFD,0x87,0x4D,
+    0xD0,0x94,0x30,0x22,0xE8,0x43,0x86,0x0C,0xF0,0x6B,0xC4,0x64,0x08,0x01,0x80,0x0B,
+    0x00,0x01,0x00,0x8F,0x0A,0x21,0x19,0x0A,0x18,0x59,0xCB,0x48,0x0E,0xD8,0xC2,0x48,
+    0xE8,0x4B,0x48,0x79,0x80,0x36,0x80,0x83,0xE0,0x90,0xCA,0x64,0xD8,0x64,0xC0,0x4B,
+    0xE0,0x48,0x82,0xCB,0xE6,0x00,0x92,0x05,0x17,0x42,0x9D,0x5E,0xC0,0x64,0xC0,0x03,
+    0x80,0x44,0x40,0x01,0x88,0x0E,0x80,0x6D,0xE8,0x85,0xC7,0x44,0x40,0x09,0x88,0x1E,
+    0xC0,0x0C,0x40,0x09,0x8F,0x06,0x38,0xB7,0x00,0x01,0x80,0x34,0x80,0x2C,0xC8,0x44,
+    0xC4,0x0C,0x10,0x0A,0x88,0x8E,0x02,0x01,0x30,0x01,0x08,0x01,0x88,0x1C,0x88,0x14,
+    0x1A,0x49,0x0B,0xD8,0x00,0x4F,0x10,0x31,0x18,0x52,0xCA,0x90,0xC0,0x90,0x5E,0xBC,
+    0xC2,0xC0,0x59,0x94,0xCA,0xB0,0xE4,0x48,0x90,0x4D,0xD6,0x0C,0x17,0x8A,0x9C,0x96,
+    0xC8,0x0C,0x80,0x1F,0xF8,0x5F,0x84,0x24,0x30,0x82,0xC9,0x0C,0x84,0x1F,0xF8,0x37,
+    0x30,0x32,0x08,0x01,0x00,0x01,0x00,0xFF,0x1A,0x59,0x0B,0xD8,0x02,0x0F,0xE0,0x48,
+    0x91,0x4D,0x16,0x21,0x18,0x52,0xCA,0x90,0xC0,0x90,0xEE,0x93,0x57,0x79,0x80,0xB6,
+    0x12,0x21,0x19,0x52,0x18,0xD9,0xC8,0x90,0x0E,0xD8,0xC6,0x90,0x1E,0x61,0xF0,0x9A,
+    0xFE,0x1C,0xC8,0xD8,0x98,0x1C,0x18,0x71,0xF0,0x9A,0xD6,0x14,0xC0,0xD0,0x94,0x14,
+    0xE6,0x48,0x92,0x4D,0xE6,0x00,0x92,0x05,0xD4,0x44,0x10,0x12,0xC0,0xE6,0xCE,0x44,
+    0xC0,0x1C,0x80,0x1F,0xF8,0xDF,0x32,0x3A,0xC8,0x44,0xC0,0x14,0x82,0x1F,0xF8,0xB7,
+    0xCE,0x24,0xD8,0x48,0x89,0x34,0xD0,0x80,0x80,0x2C,0x08,0x01,0x10,0x01,0x00,0x77,
+    0x00,0x01,0x30,0x5A,0x18,0x5A,0xF3,0x5C,0x04,0xD8,0xCA,0xD8,0x02,0x1F,0x00,0x30,
+    0x9A,0xD2,0xE4,0x00,0x95,0x05,0x16,0x42,0x9A,0xCE,0xE7,0x48,0x95,0x4D,0x16,0x4A,
+    0x98,0x76,0x0F,0x01,0x11,0x01,0x00,0xF7,0x1A,0x59,0x0B,0xD8,0x02,0x0F,0xE0,0x48,
+    0x91,0x4D,0x06,0x21,0x18,0x42,0xCA,0x00,0x86,0x3C,0xC0,0x00,0xE8,0x03,0x40,0x79,
+    0x80,0xAE,0x07,0x01,0x00,0x47,0x19,0xD9,0xF6,0x3C,0x08,0xD8,0xC0,0x98,0x37,0x61,
+    0x34,0xE2,0xFC,0xF2,0xDB,0x34,0x38,0x49,0xC0,0x98,0x37,0x31,0x19,0x32,0xCA,0xB0,
+    0x0F,0xF8,0xCB,0xB0,0x31,0xB2,0x5D,0xB4,0xD8,0xD8,0xAC,0x06,0x14,0xDA,0x92,0xDD,
+    0x30,0x32,0x3B,0x71,0xF8,0xBA,0xF7,0x2C,0xCB,0xF0,0x35,0xBA,0x5F,0xFC,0xDB,0xB0,
+    0xAB,0x06,0x10,0xB2,0xC8,0xD8,0x34,0xB2,0x18,0x72,0xFB,0x5C,0x07,0xB0,0xCB,0xB0,
+    0x07,0x38,0x9A,0x9A,0xE6,0x00,0x92,0x05,0xDC,0x0C,0x10,0xC2,0x9A,0x9E,0xE6,0x48,
+    0x92,0x4D,0xE6,0x90,0x90,0x95,0xC6,0x64,0xC4,0x03,0x10,0x82,0xC0,0xE6,0xC5,0x64,
+    0xC8,0x0C,0xC0,0x03,0x10,0x42,0xCC,0x06,0x38,0xEF,0xC1,0x0C,0x3F,0xDF,0xA9,0x85,
+    0x80,0x4D,0x34,0x22,0x04,0x71,0xD4,0x1A,0x01,0xC1,0xF0,0x02,0x28,0x71,0x80,0x44,
+    0xF8,0x2A,0xAB,0x3C,0xD8,0x00,0x92,0x05,0x2B,0xD1,0xF8,0x2A,0x30,0x81,0xA8,0x34,
+    0xF8,0x32,0xB5,0x2C,0xD9,0x68,0x95,0x6D,0xC0,0x33,0x77,0x09,0x8D,0x16,0x10,0x04,
+    0x10,0x2C,0x07,0x7F,0x55,0x3C,0x05,0xF0,0x31,0xE2,0xC5,0xB0,0x54,0x04,0x07,0x38,
+    0xCB,0xE8,0x33,0x3A,0xD9,0xB0,0x97,0xB5,0xD0,0x40,0x91,0x2D,0x85,0x80,0x85,0x68,
+    0x17,0x04,0x15,0x2C,0xF1,0x3C,0xC0,0x80,0x04,0x30,0xCA,0x00,0xF4,0x44,0xC8,0x00,
+    0x80,0x00,0x94,0x05,0xF3,0x2C,0xC8,0xA8,0x05,0x70,0xCB,0x68,0xF5,0x34,0xC8,0x68,
+    0x81,0x68,0x95,0x75,0x90,0x01,0x46,0x01,0xD0,0x0E,0x00,0x01,0x00,0x27,0x40,0xAC,
+    0x10,0x2A,0xD4,0x0E,0x00,0x01,0xF0,0x82,0x70,0x01,0xD0,0x0E,0x30,0x01,0x00,0x27,
+    0x45,0xAC,0x12,0xAA,0xD0,0x0E,0x30,0x11,0xF8,0xB2,0x4C,0x41,0x80,0x0E,0x48,0x49,
+    0x88,0xBE,0xD0,0x3C,0xD0,0x90,0xA8,0x06,0x14,0x92,0x92,0xAD,0xD4,0x2C,0xD8,0x90,
+    0xAA,0x06,0x10,0x92,0xCC,0x90,0x92,0xAD,0x10,0xEA,0xCC,0x06,0x30,0xEA,0x48,0x49,
+    0x8B,0x16,0x20,0x48,0x60,0x68,0x00,0x37,0x4D,0xC8,0x10,0x4A,0xC8,0x1E,0x30,0x6A,
+    0x00,0x0F,0x30,0xEA,0x00,0x6A,0xD6,0x3C,0xD8,0xC8,0x8A,0x24,0x1C,0x8A,0x02,0x50,
+    0xC4,0x48,0x34,0x62,0xC8,0x24,0x10,0x51,0x05,0x78,0xF2,0x12,0xCA,0x48,0x1E,0x52,
+    0x20,0x12,0x8B,0x1C,0x43,0xC8,0x1A,0x42,0xC6,0x00,0x02,0x00,0xC0,0x00,0x8C,0x14,
+    0x00,0xC8,0x8E,0x0C,0x83,0x1F,0xF0,0x07,0x30,0x3A,0xC0,0x2C,0xCA,0x24,0x18,0x0A,
+    0x00,0x40,0xC4,0x40,0x15,0x61,0xF0,0x12,0xCA,0x1C,0x18,0x52,0xC0,0x80,0xC8,0x14,
+    0x1B,0x72,0xC3,0x88,0x00,0x48,0xC6,0x40,0xC8,0x0C,0x80,0x1F,0xF0,0x6F,0xCA,0x3C,
+    0x08,0x0C,0xCB,0x2C,0x08,0x0C,0xCD,0x44,0xD0,0xC8,0xAB,0x06,0x10,0x4A,0x92,0x55,
+    0xCA,0x34,0xD0,0x08,0xAA,0x06,0x10,0x4A,0x90,0x4D,0x50,0x19,0xD8,0x46,0xD0,0x44,
+    0x10,0xD2,0xCD,0x0E,0xE0,0xF8,0x03,0x1F,0xD5,0x44,0x10,0xD2,0x93,0x06,0xF0,0xF8,
+    0x48,0x19,0xD8,0x46,0xCC,0x34,0x10,0x0A,0xCA,0x0E,0xE0,0x00,0x00,0x1F,0xC8,0x34,
+    0x10,0x0A,0x94,0x06,0xF7,0x00,0x0A,0x3C,0x10,0x04,0x81,0x4D,0xEF,0x85,0xAF,0xF5,
+    0x30,0xB2,0xD0,0x44,0x60,0xFA,0xCF,0xE0,0x2F,0x31,0x78,0xF2,0x1F,0xAA,0xC3,0x68,
+    0xFF,0xE1,0xC9,0x68,0x07,0xB0,0xC3,0x98,0x72,0xD2,0xF7,0x81,0xCC,0xF0,0xF4,0x9B,
+    0x36,0xBA,0xB8,0x01,0x32,0xE2,0xFD,0x01,0xBA,0x0C,0xF8,0x01,0xB8,0x04,0x40,0x09,
+    0x88,0x36,0x01,0x01,0x01,0xFF,0xC0,0x0B,0x48,0x79,0x88,0xCE,0x47,0x4C,0x09,0x0C,
+    0x41,0x7C,0x13,0x3C,0xC1,0x93,0x89,0x13,0xC3,0x93,0x8B,0x13,0x1F,0x0C,0x1D,0x3C,
+    0x23,0x0C,0x21,0x3C,0x0D,0x0C,0x0B,0x3C,0x41,0x4C,0x19,0x0C,0x43,0x4C,0x1B,0x0C,
+    0x80,0x03,0x09,0x09,0x85,0x0B,0x8F,0x0B,0x30,0x0A,0xDB,0x4B,0x90,0x0B,0x01,0x27,
+    0xA2,0x21,0xE1,0x00,0x94,0x05,0x16,0xC2,0x9C,0xEE,0x16,0xC2,0x92,0x9E,0x03,0x87,
+    0x02,0x21,0x19,0x0A,0xC8,0x60,0x08,0x41,0x41,0x44,0x19,0x04,0x01,0x11,0xF0,0x42,
+    0x1D,0x04,0xCB,0x1B,0x58,0x09,0x88,0xA6,0x18,0xC1,0x38,0xE1,0xF7,0x1A,0xFF,0x3A,
+    0xD8,0xD8,0xAE,0x06,0x14,0xDA,0x92,0xFD,0x1F,0xF1,0xF0,0x1A,0xD0,0x00,0xAE,0x06,
+    0x14,0x02,0x92,0x05,0xD9,0x0C,0xC0,0xC0,0xDC,0xDB,0x10,0xC2,0xC8,0x0E,0x00,0x01,
+    0x88,0x03,0x05,0xC1,0x19,0x01,0xF1,0x02,0xF6,0x1A,0xD7,0x00,0xAA,0x06,0x10,0x02,
+    0x90,0x3D,0x04,0xD1,0x19,0x11,0xF1,0x02,0xF6,0x1A,0xD7,0x00,0xAA,0x06,0x10,0x02,
+    0xCC,0x00,0x96,0x05,0xD4,0x1B,0x11,0x1A,0xC8,0x2E,0xD8,0x04,0xC4,0x03,0xDF,0xDB,
+    0xE4,0xD8,0x12,0xC2,0xC0,0x86,0xD8,0x04,0xC4,0x03,0xDF,0xDB,0xE4,0xD8,0x12,0xC2,
+    0xCB,0x1E,0x30,0x02,0xD8,0x03,0x48,0x00,0x91,0x03,0x59,0x04,0x23,0x04,0x59,0x04,
+    0x21,0x04,0x33,0x02,0xBD,0xFF,0xF7,0x9F,0xC3,0x03,0x47,0xF9,0x92,0x0E,0xE0,0x00,
+    0x85,0x03,0x47,0x44,0x10,0x04,0x03,0x19,0x80,0x03,0xC3,0x0C,0xDC,0x03,0x82,0x01,
+    0x89,0x03,0xCF,0x03,0xC2,0x8B,0xD1,0x00,0xE0,0x00,0x42,0x11,0xC3,0x2E,0xC8,0x03,
+    0xC2,0x8B,0xD3,0x00,0xE0,0x00,0x42,0x11,0xCF,0x4E,0xC0,0x03,0x40,0x11,0x98,0x36,
+    0xCA,0x04,0xD8,0x4B,0x10,0x42,0xC4,0x16,0x07,0x01,0x80,0x03,0x89,0x03,0xC7,0x83,
+    0x8B,0x03,0xC1,0x83,0x8F,0x03,0xEB,0xF5,0xAF,0x85,0x47,0xF9,0x88,0x0E,0x00,0x01,
+    0xE9,0x85,0x27,0x21,0x1D,0x02,0x63,0x1A,0xC0,0x00,0xCC,0x00,0x23,0x31,0x18,0x0A,
+    0xC5,0x48,0x54,0x02,0xD4,0xE1,0xC1,0x50,0x0A,0xA1,0xF0,0x0A,0x48,0x01,0xD0,0x06,
+    0x10,0x4A,0x22,0xB1,0xF8,0x22,0x60,0x01,0xD3,0x06,0x10,0x22,0xCC,0x48,0x60,0xD2,
+    0x10,0x0A,0x9D,0x06,0x08,0x01,0x28,0x71,0x42,0xA4,0xF8,0x2A,0xD8,0x20,0xAB,0x06,
+    0x10,0x22,0x2B,0x81,0x42,0x94,0xFA,0x2A,0xD8,0x90,0xAA,0x06,0x15,0x92,0xC2,0x10,
+    0x9A,0x01,0x4C,0xEC,0x10,0xAA,0xC4,0xC6,0xC8,0x23,0x64,0x09,0x8A,0x26,0xD8,0xFB,
+    0xCB,0x33,0xF6,0xF8,0x10,0xF2,0xDD,0x76,0x60,0x09,0x88,0x3E,0xD4,0xDB,0x10,0x5A,
+    0x9E,0x26,0xC0,0x03,0x40,0xF1,0xC0,0x0E,0x40,0x51,0x90,0x26,0x60,0x09,0x88,0x26,
+    0x04,0x40,0x15,0x82,0xC0,0x0E,0x00,0x01,0xE8,0x85,0x07,0x09,0xEF,0x85,0xAF,0xFD,
+    0x84,0x65,0x34,0xB2,0x08,0x01,0x28,0x01,0x00,0x01,0x80,0x1C,0xC4,0xAC,0xF0,0x23,
+    0x04,0x01,0x30,0x22,0x80,0x3C,0x00,0x27,0xD7,0x6C,0x00,0xF9,0xA2,0x82,0xE2,0x48,
+    0x95,0x4D,0x16,0x0A,0x98,0xC6,0xD7,0x7C,0x28,0x92,0xC3,0x26,0xC0,0x7C,0x80,0x2C,
+    0x30,0x82,0x83,0x24,0x03,0x1F,0x30,0x82,0x80,0x2C,0xC0,0x7C,0x80,0x24,0x00,0x01,
+    0x82,0x34,0x00,0xD7,0x1A,0x01,0x00,0xB7,0x36,0x02,0x03,0xC2,0x3A,0x00,0x8E,0x86,
+    0x40,0x6A,0x83,0x44,0x00,0x01,0xD0,0xAC,0xF6,0x64,0xE8,0x93,0x90,0x5C,0x30,0xD2,
+    0x1A,0x12,0x03,0xB8,0xC8,0xD0,0x95,0x54,0x00,0x6F,0xF0,0x3C,0x07,0x32,0x3E,0x90,
+    0x88,0x3E,0xF0,0x54,0x07,0x38,0xDA,0xB2,0xFD,0x44,0x10,0xF2,0x90,0x0E,0xB0,0x44,
+    0x32,0x0A,0xE0,0x00,0x90,0x05,0xD6,0x5C,0x17,0x12,0xC4,0x76,0x70,0xF2,0x02,0x01,
+    0x00,0x78,0xBA,0x4C,0x03,0x87,0x30,0x3A,0x07,0x3A,0x3E,0xF8,0x88,0x56,0x30,0x3A,
+    0x18,0x3A,0xD3,0x64,0x05,0xF8,0xC3,0xF8,0xD5,0x4C,0xD0,0xFA,0x10,0xBA,0xC5,0x0E,
+    0x30,0xF2,0x31,0x2A,0xE6,0x00,0x92,0x05,0x2F,0x82,0x9B,0x66,0x10,0xEA,0x8C,0xA6,
+    0xC4,0x1C,0xC8,0x00,0x80,0x1C,0xC0,0x34,0xE6,0x00,0x92,0x05,0x80,0x34,0xC0,0x6C,
+    0xA0,0x2A,0x32,0x09,0x30,0x82,0xD1,0x3C,0x00,0x42,0x1C,0x82,0x90,0x05,0x84,0x3C,
+    0x03,0x72,0x35,0x02,0x1D,0x32,0x90,0x85,0x30,0x22,0xD4,0x2C,0xC4,0x34,0x10,0x82,
+    0x82,0x1E,0xE0,0xD8,0x93,0xDD,0x2E,0x9A,0x98,0x36,0xD5,0x2C,0xC4,0x34,0x10,0x82,
+    0x98,0x06,0xC5,0x1C,0x80,0x44,0x10,0x01,0x00,0x01,0x08,0x01,0x30,0x5A,0x83,0xCB,
+    0x18,0x01,0x08,0x01,0x33,0x62,0x34,0x4A,0xE0,0x4A,0x00,0x0F,0xE6,0x48,0x92,0x4D,
+    0x36,0xEA,0x00,0x6A,0x3F,0x68,0x8F,0xCE,0xED,0x24,0x10,0x4A,0x98,0xD6,0x40,0x01,
+    0x8F,0x8E,0x08,0xF9,0x00,0x5F,0xD0,0x6C,0xE3,0x9A,0x28,0x9A,0x90,0x1E,0xD0,0xAC,
+    0xEC,0x93,0x16,0x12,0xC0,0x0E,0xD0,0x6C,0xA2,0x8A,0xE0,0x00,0x95,0x05,0x16,0x02,
+    0x98,0x8E,0x87,0x85,0xEA,0x85,0xF7,0x00,0x93,0x05,0x36,0x4A,0xE0,0x4A,0x28,0x09,
+    0x31,0x62,0x05,0x47,0x33,0x6A,0x18,0x2A,0xFB,0x64,0x00,0x70,0xCA,0xB0,0x07,0x38,
+    0xDD,0xAA,0xC7,0x50,0x2C,0x09,0x00,0x6A,0x1D,0xEA,0x90,0x5D,0x31,0x72,0xA3,0x8A,
+    0xED,0x44,0x10,0x52,0x98,0x16,0x28,0x11,0x30,0x62,0x05,0xA7,0xFA,0x7C,0xE0,0x28,
+    0x10,0xEA,0x9D,0x6E,0x90,0x44,0x08,0x01,0x00,0x27,0xF8,0x6C,0xE3,0xAA,0xA3,0xEA,
+    0xE6,0x48,0x92,0x4D,0x17,0x0A,0x9D,0xC6,0xE0,0x8A,0x29,0x09,0x30,0x62,0x05,0x17,
+    0x90,0x45,0x2F,0x01,0xA3,0xAA,0x31,0x2A,0x6D,0x01,0x80,0x56,0x33,0x6A,0x18,0x2A,
+    0xFB,0x64,0x00,0x70,0xCA,0xB0,0x07,0x38,0xDA,0xAA,0xDF,0x90,0x2C,0x09,0x00,0x6A,
+    0x1B,0x5A,0x35,0x6A,0xE2,0x4A,0xE1,0x48,0xA4,0x4A,0x39,0xD7,0xAC,0x85,0x87,0x2D,
+    0x35,0x72,0xF0,0x8B,0x88,0x14,0x50,0x3A,0xC0,0x20,0xA4,0x24,0xC9,0x14,0x18,0x21,
+    0x31,0xBA,0x31,0xAA,0x1A,0xCA,0xBA,0x01,0xA8,0x01,0xC6,0x40,0xC0,0x00,0x84,0x1C,
+    0x00,0x8F,0x02,0x00,0x68,0xA0,0x03,0x00,0xF8,0xFF,0x07,0x00,0xC0,0x03,0x41,0x79,
+    0x87,0x46,0xCA,0x03,0x31,0x08,0xA0,0xA6,0x41,0x21,0x88,0x16,0x01,0x71,0xF0,0x02,
+    0x80,0x0C,0x00,0x81,0xF0,0x02,0x81,0x04,0x30,0x92,0x09,0x49,0x37,0x02,0xB9,0xFF,
+    0xE8,0x37,0x09,0x71,0xF0,0x0A,0xC3,0x0C,0xD0,0x40,0xA8,0x06,0x10,0x02,0x92,0x0D,
+    0x01,0x81,0xF0,0x02,0xD4,0x04,0xD0,0x00,0xAA,0x06,0x10,0x02,0xC0,0x00,0x92,0x05,
+    0xDC,0x4B,0x41,0x48,0x10,0x0A,0xEC,0x5E,0xC7,0x0C,0x08,0x04,0xC1,0x04,0x10,0x04,
+    0x00,0x37,0x40,0x21,0x93,0x26,0xF0,0x83,0x40,0x11,0x90,0x0E,0x05,0x01,0x81,0x03,
+    0x01,0xF9,0x8F,0x03,0x8F,0x03,0xC3,0x03,0xDC,0xCB,0x15,0x42,0xC0,0x0E,0x00,0x01,
+    0x8F,0x03,0xCF,0x03,0x32,0x00,0x72,0x00,0x88,0x03,0x47,0x01,0x82,0x0E,0xF0,0x00,
+    0x8F,0x03,0xCF,0x03,0x40,0x01,0x88,0x2E,0xC4,0x03,0x43,0x00,0x03,0x00,0x84,0x03,
+    0x05,0x01,0x80,0x03,0xA0,0x21,0xC1,0x1C,0x15,0x02,0xC5,0x7E,0x08,0x01,0x10,0x01,
+    0xB0,0x93,0xC3,0x24,0x00,0x87,0xC0,0x1B,0xE5,0x14,0x10,0x1A,0x96,0x56,0xC0,0x1B,
+    0xDA,0xE3,0x35,0xD8,0x75,0xD8,0x12,0x1A,0xCC,0x26,0xC0,0x1B,0x58,0x01,0x81,0x0E,
+    0x08,0x09,0x00,0x27,0x81,0x13,0x84,0x21,0xDC,0x1C,0x10,0x1A,0xC0,0x5E,0x4F,0x01,
+    0x80,0x5E,0xC1,0x24,0x04,0x37,0x81,0x13,0xC0,0x0B,0xD8,0x14,0x11,0xCA,0x94,0x06,
+    0xC5,0x0B,0xDE,0xDB,0x32,0x48,0x72,0x48,0x10,0xCA,0xCC,0xD6,0x0C,0x09,0x80,0x0B,
+    0xF2,0x8B,0xE3,0x48,0xB0,0x8B,0x0B,0x71,0xF0,0x0A,0x4A,0x01,0xD6,0x0E,0x08,0x14,
+    0x01,0x27,0x40,0x5C,0x10,0xCA,0xEC,0x0E,0x46,0x4C,0x09,0x0C,0x0A,0x81,0xF0,0x0A,
+    0x48,0x01,0xD0,0x0E,0x10,0x14,0x00,0x27,0x44,0x5C,0x13,0xCA,0xEB,0x0E,0x40,0x4C,
+    0x11,0x0C,0x80,0x21,0xCC,0x1C,0x10,0x0A,0xC0,0xAE,0x86,0x2D,0xEF,0x85,0xAF,0x85,
+    0x80,0x3D,0x34,0x2A,0x37,0x62,0x40,0xCA,0xC5,0x40,0x09,0xB9,0xE8,0x4A,0x48,0x29,
+    0x87,0xE6,0x4B,0xBA,0xC7,0x70,0x4B,0xB2,0x8B,0x51,0xC0,0x48,0x8E,0x1C,0x08,0x59,
+    0x03,0x48,0xC6,0x48,0x88,0x14,0x08,0x01,0x10,0xF9,0x1F,0x79,0x03,0x3F,0xA0,0x92,
+    0xC8,0x3B,0x7E,0x01,0x88,0x06,0x80,0x1B,0xE6,0x48,0x92,0x4D,0x85,0x21,0xF1,0x3B,
+    0x17,0x7A,0xC4,0xA6,0x00,0x01,0x80,0x34,0xE8,0x03,0x47,0x01,0x80,0xCE,0xB2,0x04,
+    0x31,0x0A,0x31,0x42,0x58,0x2D,0xD0,0x14,0xBC,0xFF,0xDF,0x47,0x80,0x34,0xC0,0x34,
+    0x40,0x01,0x88,0x76,0x30,0x01,0x00,0x47,0x31,0x5A,0x31,0x92,0x08,0xF9,0x07,0x09,
+    0xA7,0x04,0xB8,0xFF,0xEB,0x27,0xE1,0xB0,0x97,0xB5,0xEF,0x03,0x17,0x82,0xC5,0x9E,
+    0x00,0xFF,0xC1,0x34,0x40,0x09,0x88,0x96,0xC1,0xB3,0x31,0x1A,0x30,0x52,0x09,0x01,
+    0x37,0x82,0xB9,0xFF,0xE8,0x4F,0x46,0x01,0x80,0x0E,0x00,0x01,0x00,0x07,0x00,0x09,
+    0x30,0x5A,0x11,0x01,0x30,0x8A,0xA1,0x04,0xB8,0xFF,0xEF,0x4F,0x00,0x4F,0xA1,0x04,
+    0xEB,0x3B,0x37,0x5A,0xE9,0xD3,0x30,0xDA,0xC8,0x1C,0xC0,0x14,0xBF,0xFF,0xEF,0xFF,
+    0x38,0x01,0x00,0xDF,0xC6,0x1C,0xE8,0x02,0x40,0xF9,0x87,0x16,0xE0,0x82,0x81,0x24,
+    0x07,0x0F,0x00,0xF9,0x81,0x24,0x30,0x1A,0x31,0x52,0x31,0xCA,0xC7,0x24,0xB8,0xFF,
+    0xE8,0x1F,0x45,0x01,0x80,0x0E,0x00,0x01,0x00,0x07,0x00,0x09,0x31,0x5A,0x31,0xD2,
+    0xA0,0x04,0xC8,0x24,0xBF,0xFF,0xE7,0x1F,0xE7,0xF8,0x93,0xFD,0xED,0x03,0x17,0xC2,
+    0xC1,0x06,0x37,0x0A,0x30,0x42,0xD1,0x34,0xBE,0xFF,0xF7,0x47,0x87,0x3D,0xE8,0x85,
+    0xAA,0x85,0xF3,0x20,0x7B,0x9B,0x02,0x20,0xBB,0xEA,0xE0,0x20,0xB8,0xE2,0x18,0xD9,
+    0x0E,0xD8,0xC6,0x58,0x0A,0xF1,0x42,0xF4,0xD3,0x4A,0xD4,0x88,0x94,0x4D,0x40,0xF4,
+    0x1C,0x01,0xD3,0xDA,0xD0,0x98,0x97,0xDD,0x40,0x01,0x80,0x4E,0x90,0x01,0x6C,0x01,
+    0x88,0x3E,0x48,0x01,0xD2,0x06,0x10,0x4A,0xCD,0xAB,0x10,0x4A,0xD8,0x86,0x00,0x01,
+    0xE8,0x85,0x6B,0x09,0x88,0x26,0xC8,0xAB,0x10,0x6A,0xEC,0x4E,0x03,0x01,0xE8,0x85,
+    0xE0,0x68,0x8B,0x2E,0xCB,0xAB,0x10,0x6A,0x10,0x6A,0xD4,0x0E,0x03,0x01,0xE8,0x85,
+    0x60,0x01,0x88,0x3E,0x58,0x01,0xD0,0x06,0x10,0xDA,0xCA,0x8B,0x17,0x5A,0xDC,0xB6,
+    0x03,0x01,0xE8,0x85,0x60,0x09,0x88,0x26,0xCC,0x8B,0x10,0xCA,0xE8,0xCE,0x07,0x01,
+    0xEB,0x85,0xE3,0x20,0x88,0xE6,0xCF,0x8B,0x14,0x4A,0x12,0xCA,0xD0,0xC6,0x07,0x01,
+    0xEF,0x85,0xAB,0x85,0x82,0x45,0x6C,0x0B,0x48,0x01,0x88,0x16,0x00,0x01,0x80,0x45,
+    0xE8,0x85,0x0F,0x01,0x33,0x32,0xB0,0x01,0x10,0x01,0x00,0x1F,0x32,0x5A,0xA3,0xD2,
+    0xE2,0x48,0x92,0x4D,0xFC,0x9B,0x13,0x5A,0xE0,0xC6,0x27,0x01,0x32,0x2A,0xA8,0x01,
+    0xF0,0x4B,0x49,0x01,0x82,0x36,0xF0,0x48,0x02,0x48,0x6C,0x13,0x00,0x52,0x3E,0x90,
+    0x78,0x90,0x00,0x07,0x10,0x01,0x08,0x01,0x03,0x1F,0x31,0x5A,0xE0,0xDA,0x5A,0x01,
+    0x88,0xEE,0x18,0x51,0x1B,0x5A,0x02,0x38,0xC8,0xD8,0x7E,0x3B,0xD0,0xDA,0x3F,0xF8,
+    0x7C,0xF8,0x11,0xBA,0x80,0x76,0x30,0xF8,0x7C,0xF8,0x11,0xBA,0x80,0x56,0x28,0xF8,
+    0x7C,0xF8,0x11,0xBA,0x80,0x36,0x58,0xD8,0x10,0x9A,0x84,0x1E,0x1B,0x09,0x30,0x7A,
+    0xA0,0xDA,0x03,0x27,0x60,0x21,0x88,0x16,0xE6,0x48,0x92,0x45,0x3A,0xFF,0xE5,0x48,
+    0x93,0x4D,0xFA,0x9B,0x16,0x5A,0xE4,0xC6,0xF0,0x4B,0x49,0x01,0x82,0x0E,0xF0,0x48,
+    0xB3,0x4B,0xE1,0x20,0x90,0x25,0x63,0x21,0xE8,0x16,0x06,0x01,0x3F,0x7F,0xAD,0xF5,
+    0x3C,0x01,0xD0,0x00,0x96,0x05,0xD0,0x48,0x90,0x65,0xF0,0x08,0xD2,0x06,0x10,0x0A,
+    0x90,0x4D,0x8C,0x0C,0xF0,0x08,0xD1,0x06,0x14,0x0A,0x93,0x4D,0x88,0x04,0xC8,0x44,
+    0x88,0x01,0xFB,0x73,0x30,0x8A,0x81,0x1F,0xD0,0x8F,0x92,0x2D,0x31,0x8A,0x31,0x02,
+    0x82,0x1F,0xD0,0x67,0x90,0x35,0x68,0x01,0x81,0x3E,0xF0,0x40,0xD3,0x06,0x10,0x42,
+    0x31,0x0A,0x30,0x42,0x82,0x1F,0xD0,0x17,0x90,0x2D,0x70,0x01,0x81,0x3E,0xF0,0x80,
+    0xD3,0x06,0x10,0x82,0x31,0x0A,0x30,0x82,0x81,0x1F,0xD0,0xC7,0x90,0x35,0x20,0x01,
+    0xC6,0x44,0x70,0x03,0x80,0x14,0xC8,0x14,0x00,0x00,0xB3,0x4A,0xD2,0x14,0xE0,0x00,
+    0xB5,0x82,0x10,0x4A,0x8D,0x1E,0x11,0x82,0x88,0x0E,0xC1,0x0C,0x40,0x01,0x80,0xE6,
+    0xC0,0x04,0x40,0x01,0x80,0xCE,0x68,0x01,0x80,0xBE,0x70,0x01,0x80,0xAE,0xC8,0x04,
+    0xC4,0x0C,0x10,0x42,0x98,0x2E,0xC8,0x04,0xC0,0x0C,0x80,0x1F,0xD0,0x6F,0x30,0x01,
+    0x00,0x27,0xC8,0x0C,0xC0,0x04,0x80,0x1F,0xD0,0x3F,0x28,0x01,0x40,0x11,0xC0,0x16,
+    0x30,0x3A,0x21,0x49,0x00,0x1F,0x20,0x01,0x01,0x0F,0x30,0x3A,0x23,0x49,0xE0,0x20,
+    0x90,0x25,0x67,0x49,0x9B,0x7E,0xE6,0xF8,0x97,0xC5,0xEF,0xF5,0xAC,0x9D,0x87,0x2D,
+    0x30,0x7A,0x00,0x01,0x83,0x14,0xF0,0xC3,0x32,0xEA,0xA9,0x01,0x40,0x09,0xC8,0x26,
+    0x03,0x09,0xA0,0x43,0x00,0xF9,0x87,0x14,0x0E,0x7F,0x00,0x81,0xE8,0x02,0x16,0xD9,
+    0xDE,0x2C,0x08,0x90,0x32,0xE2,0x39,0x08,0xC3,0xF0,0xA4,0x01,0x49,0x01,0xD8,0xFE,
+    0x38,0x00,0xAC,0xFE,0xE0,0x43,0x43,0x29,0x8B,0xBE,0x40,0x84,0x42,0x0C,0xD3,0x00,
+    0x93,0x05,0x00,0x04,0x45,0x8C,0x45,0x14,0xD0,0x48,0x94,0x4D,0x00,0x0C,0x15,0x09,
+    0xA0,0x53,0x4B,0x01,0xD2,0x06,0x10,0x4A,0x40,0x01,0xD0,0x06,0x10,0x02,0xC2,0x40,
+    0xF4,0x0B,0x11,0x42,0xD1,0x2E,0x00,0x01,0x30,0x07,0x46,0x41,0x88,0x0E,0x00,0x49,
+    0xA6,0x43,0x03,0x3F,0xE0,0x43,0x43,0x49,0x80,0x0E,0x40,0x19,0x88,0x9E,0x08,0x29,
+    0xD2,0x13,0xE3,0x90,0x93,0x95,0x96,0x13,0x40,0x19,0x88,0x06,0xF4,0x0B,0x13,0x52,
+    0xC8,0x7E,0x0F,0x01,0x90,0x0B,0x43,0x49,0x88,0x16,0x00,0x51,0xA5,0x43,0x03,0x8F,
+    0x03,0x09,0xA0,0x43,0x00,0x77,0x05,0x01,0x29,0xC3,0xB3,0x43,0x95,0x03,0x01,0x4F,
+    0x39,0x00,0xA4,0x66,0xE0,0x43,0x43,0x19,0x88,0x66,0x00,0x21,0xA0,0x43,0x03,0x01,
+    0x93,0x03,0x43,0x84,0x1D,0x44,0x47,0x84,0x00,0x04,0x01,0xE7,0x68,0xA0,0x03,0x00,
+    0x30,0x20,0x02,0x00,0x40,0x49,0x88,0x26,0x03,0x41,0xA0,0x43,0x03,0x01,0x90,0x03,
+    0x00,0x8F,0x00,0x11,0xA0,0x43,0x03,0x01,0x95,0x03,0x93,0x03,0x29,0xC3,0xB3,0x43,
+    0x43,0x8C,0x03,0x0C,0x45,0x8C,0x05,0x0C,0x8D,0x03,0x8F,0x03,0x93,0x03,0x41,0x84,
+    0x1D,0x44,0x47,0x84,0x03,0x04,0x41,0x84,0x1D,0x44,0x43,0x84,0x1B,0x44,0xE5,0x4B,
+    0x4B,0x11,0x98,0xBE,0xD2,0x03,0xE5,0x00,0x90,0x03,0x05,0x11,0x11,0xD1,0xF0,0x82,
+    0xF0,0x52,0x95,0x24,0xD0,0x10,0x94,0x95,0x30,0xA2,0x14,0x21,0xF0,0x92,0x1D,0xE1,
+    0x97,0x1C,0xF0,0x5A,0x36,0xF2,0xD4,0x90,0x93,0x9D,0x30,0x12,0x58,0x01,0xD0,0x06,
+    0x10,0xDA,0x52,0x01,0xD2,0x06,0x10,0x92,0xC7,0xD0,0xF4,0x1B,0x12,0xD2,0xDC,0x16,
+    0x30,0x9A,0xBB,0x04,0xD0,0x24,0xC8,0x1C,0xBF,0xFF,0xF7,0x4F,0xCC,0x0B,0x17,0x0A,
+    0x80,0x1E,0x08,0x01,0x97,0x0B,0x89,0x03,0x05,0xBF,0xF8,0x03,0xD2,0x13,0xF1,0x00,
+    0x10,0x12,0x8C,0x96,0xCC,0x13,0xD5,0x40,0xAA,0x06,0x10,0x02,0xF0,0x00,0x44,0x29,
+    0x98,0x0E,0x50,0x01,0x8B,0x3E,0x68,0xC3,0x08,0x00,0x18,0x42,0x29,0xC3,0xF3,0x43,
+    0xE1,0x00,0xB2,0x43,0x88,0x0B,0x05,0x01,0x91,0x03,0xD1,0x03,0xE1,0x00,0x92,0x03,
+    0x43,0x84,0x1B,0x44,0x45,0x84,0x1D,0x44,0x00,0x11,0x08,0xF1,0xF3,0x82,0xF1,0x4A,
+    0xD0,0x00,0xAA,0x06,0x10,0x02,0x92,0x0D,0x00,0x21,0x10,0x01,0xF5,0x82,0xF1,0x12,
+    0xD0,0x00,0xAC,0x06,0x10,0x02,0x92,0x05,0xC1,0x40,0xF0,0x0B,0x10,0x42,0xDC,0x76,
+    0x03,0x41,0xA0,0x43,0x00,0x5F,0x48,0x11,0x8B,0x2E,0x00,0x04,0x45,0x84,0x05,0x04,
+    0x03,0x19,0xA0,0x43,0x00,0x1F,0x48,0x21,0x88,0x0E,0x00,0x29,0xA5,0x43,0xD3,0x03,
+    0xF4,0x0B,0x15,0x42,0xCB,0x36,0xE0,0x43,0x40,0x19,0x80,0x0E,0x40,0x29,0x88,0x0E,
+    0x03,0x41,0xA0,0x43,0xE0,0x43,0x43,0x51,0x89,0xBE,0x30,0xC2,0xB9,0xFF,0xF7,0xCF,
+    0x84,0x14,0x00,0x21,0xE8,0x02,0x46,0x01,0x80,0x46,0xC0,0x14,0x40,0x01,0x80,0x2E,
+    0x30,0xD2,0xC9,0x2C,0xC7,0x14,0xB8,0xFF,0xE8,0x1F,0x87,0x14,0xC0,0x14,0x40,0x01,
+    0x8F,0x0E,0x00,0xF1,0x80,0x14,0x00,0x09,0xA0,0x43,0xC3,0x14,0x28,0xB7,0x06,0x00,
+    0xAE,0xFD,0x87,0x5D,0xC2,0xAC,0xDA,0x03,0x82,0xD4,0xC1,0xAC,0xD9,0x03,0x80,0xCC,
+    0x01,0x09,0x58,0x45,0x89,0xC3,0xC0,0xCC,0xE2,0x00,0x8A,0xC3,0xC4,0xCC,0x89,0xC3,
+    0xC2,0xCC,0xF1,0x00,0x8A,0xC3,0xC6,0xAC,0x82,0x01,0x86,0x54,0xE0,0x0B,0x00,0x21,
+    0x1A,0x0A,0xC0,0x54,0xA0,0x0B,0x00,0x29,0x80,0xDC,0x09,0x01,0x40,0xBD,0x31,0x52,
+    0x00,0x36,0x00,0x01,0x82,0xFC,0xC0,0xAC,0xCD,0xB4,0x82,0x01,0x82,0x4C,0xC2,0xAC,
+    0x82,0x01,0x84,0x44,0xC0,0x74,0x4A,0x11,0x92,0x05,0x82,0x3C,0xC2,0x6C,0x92,0x05,
+    0x83,0x34,0x82,0xBE,0x10,0x01,0x00,0x01,0x4C,0x4D,0xB1,0x4A,0x8F,0x2C,0x4A,0xF2,
+    0xB2,0x4A,0x8C,0x24,0x48,0xE2,0xEF,0x48,0xB2,0x4A,0x8C,0x1C,0x04,0x08,0xC4,0x48,
+    0x91,0x4D,0x66,0xA5,0xDB,0x74,0xA2,0x1A,0x62,0x8D,0xD9,0x6C,0xA2,0x1A,0xDB,0x24,
+    0x9A,0x3C,0xD9,0x1C,0x9A,0x34,0xD9,0x2C,0x98,0x2C,0x41,0x09,0x89,0x5E,0xD8,0x3C,
+    0x12,0xDA,0x92,0xDD,0x99,0x3C,0xD9,0x34,0x12,0xDA,0x92,0xDD,0x99,0x34,0xD9,0x2C,
+    0x12,0xDA,0x92,0xDD,0x9A,0x2C,0xD9,0x5C,0x32,0xE2,0xDC,0x64,0x9A,0x64,0xD9,0x34,
+    0xE1,0x3C,0xEA,0x34,0xCA,0xD8,0x92,0xDD,0xEB,0x3C,0xC9,0x20,0x91,0x25,0xF3,0x2C,
+    0xED,0x64,0xC9,0x68,0xA8,0x64,0x59,0x01,0xD9,0x86,0xEB,0xD4,0x13,0x5A,0xD5,0x6E,
+    0x63,0x01,0xD8,0x5E,0xED,0xCC,0x11,0x62,0xD1,0x46,0xEB,0x64,0xC5,0x6B,0x49,0x68,
+    0x8B,0x06,0x32,0x2A,0x3F,0x01,0xF8,0x7A,0xEB,0x2C,0x01,0x68,0x23,0x62,0x35,0x32,
+    0x2B,0x01,0xF8,0xAA,0xF5,0xDC,0x11,0xAA,0xEA,0xC6,0xF2,0xB4,0x71,0x09,0x88,0x16,
+    0xD9,0xF0,0x93,0xB5,0xB2,0x9C,0xF8,0x5C,0x35,0x01,0xF8,0xF2,0x10,0x72,0xDD,0x06,
+    0x35,0xAA,0x81,0x68,0x01,0x68,0x33,0x7A,0xF3,0x9C,0x10,0x6A,0x12,0xAA,0xE5,0x2E,
+    0x6B,0xA5,0xA1,0x62,0x6B,0x8D,0xA1,0x5A,0x01,0xA8,0x72,0xBD,0xC9,0x68,0xE5,0x72,
+    0xE1,0xB0,0xA3,0x72,0xEB,0xFC,0xE0,0x68,0x90,0x6D,0xAF,0xFC,0xF5,0x9C,0x10,0xBA,
+    0xD1,0xBE,0x05,0x9F,0x09,0xEF,0x6A,0xA5,0xA1,0x62,0x6B,0x8D,0xA2,0x5A,0x03,0xA8,
+    0x75,0xBD,0xC9,0x68,0xE3,0x72,0xE1,0xB0,0xA0,0x72,0xE9,0xFC,0xE7,0x68,0x93,0x6D,
+    0xAD,0xFC,0x38,0x37,0xE9,0x64,0xC1,0x6B,0x48,0x68,0x6D,0x19,0x8A,0x6E,0x00,0xB0,
+    0x7F,0xBD,0xC9,0xB0,0xE0,0xB2,0x71,0x09,0xC2,0x3E,0xC0,0x64,0x08,0x01,0xC6,0x03,
+    0x1A,0x42,0xC8,0x64,0x82,0x43,0x80,0x7D,0xE8,0x85,0x6F,0x11,0x89,0x56,0x68,0xA5,
+    0xA1,0x62,0x63,0x8D,0xA2,0x1A,0x03,0x98,0x4A,0xBD,0xC1,0xC8,0xE2,0x5A,0xE0,0xD8,
+    0xA0,0x5A,0x00,0x1F,0xCA,0x4C,0xF2,0x4B,0x4F,0x51,0x90,0x66,0xE6,0x00,0x92,0x05,
+    0x40,0x11,0x90,0x06,0x3A,0xD7,0xE2,0x90,0x90,0x95,0x56,0x21,0x92,0x06,0x38,0x57,
+    0x01,0x01,0x80,0x6C,0xC0,0xB4,0x42,0x09,0x88,0xF6,0x03,0x01,0x80,0x84,0x01,0x01,
+    0x81,0x7C,0xC9,0x84,0x42,0xBD,0x01,0x48,0xC2,0x40,0x80,0x14,0xC1,0x7C,0xC9,0x84,
+    0x02,0x00,0xC4,0x00,0x91,0x05,0x86,0x54,0xCA,0x7C,0xC1,0x14,0xE0,0x2A,0x6A,0x09,
+    0xC1,0x26,0xC0,0x6C,0xE6,0x00,0x92,0x05,0x87,0x6C,0x01,0x8F,0xC0,0x7C,0x41,0x09,
+    0x89,0x16,0xC0,0x84,0x47,0x01,0x88,0xC6,0x08,0x81,0x41,0x45,0x86,0x17,0xF8,0x17,
+    0xC0,0x6C,0x82,0x3C,0xC0,0x74,0x82,0x34,0xC0,0x5C,0x82,0x0C,0xC0,0x64,0x82,0x04,
+    0xC4,0x84,0xE1,0x00,0x3C,0x00,0x7C,0x00,0x50,0x5A,0xB4,0xA2,0xE8,0x98,0xB0,0xCA,
+    0x31,0x62,0x74,0x4D,0xB1,0x8A,0xC1,0x84,0xB0,0x82,0x80,0x24,0xC0,0x84,0xB1,0xC2,
+    0x81,0x1C,0xD0,0x84,0xB0,0x82,0x85,0x14,0xC0,0x7C,0x41,0x09,0x88,0x5E,0xC0,0x24,
+    0x12,0x02,0x92,0x05,0x80,0x24,0xC0,0x1C,0x12,0x02,0x92,0x05,0x80,0x1C,0xC0,0x14,
+    0x12,0x02,0x92,0x05,0x80,0x14,0x00,0x01,0x83,0x2C,0xE0,0x68,0xAD,0xF4,0x01,0x9F,
+    0x40,0x61,0x98,0x66,0xC8,0x24,0xC0,0x34,0xD2,0x54,0xD1,0x00,0x4C,0xA5,0xA1,0x42,
+    0xC8,0x1C,0xC0,0x3C,0xD2,0x54,0xD1,0x00,0x4C,0x8D,0xA1,0x42,0x00,0x47,0x15,0x01,
+    0xDC,0x0C,0x00,0x28,0xF0,0xD2,0x5C,0x45,0x88,0xD2,0x12,0x01,0x90,0x74,0xD1,0x3C,
+    0x92,0x95,0x92,0x0C,0xD2,0x34,0x90,0x95,0x91,0x04,0xD2,0x74,0x50,0x09,0x88,0x3E,
+    0x12,0x12,0x93,0xA5,0x32,0x12,0x13,0x92,0x94,0x95,0x32,0xA2,0x12,0x4A,0x92,0x4D,
+    0xD2,0x0C,0xDA,0x04,0xF0,0x0C,0x00,0x07,0x01,0xEF,0xB4,0x24,0xF1,0x04,0xB0,0x64,
+    0x01,0x70,0xB2,0xFC,0x22,0x12,0x93,0x95,0xCA,0xD8,0x90,0xDD,0xF9,0x24,0xF1,0xFC,
+    0xC9,0xB0,0xB7,0x24,0xF3,0x64,0xC1,0xB0,0xB0,0x64,0x51,0x01,0xD9,0xBE,0xF0,0xD4,
+    0x10,0x92,0xD5,0xA6,0x58,0x01,0xD8,0x96,0xF5,0xCC,0x11,0x9A,0xD1,0x7E,0xF8,0x24,
+    0x35,0x01,0xF8,0xF2,0xF9,0x64,0xC1,0xFB,0x48,0xF8,0x8D,0x46,0xFD,0xDC,0x11,0xF2,
+    0xE8,0x2E,0x78,0x45,0xCD,0xFA,0xCB,0xF0,0x7B,0x45,0x88,0xF2,0x39,0xD7,0xD6,0x74,
+    0xE6,0x90,0x92,0x95,0x91,0x74,0xD1,0x74,0x55,0x11,0x98,0xF6,0x41,0x01,0x80,0xF6,
+    0xF2,0x10,0xF2,0x44,0x00,0x90,0x5C,0x45,0xC7,0xD2,0xCC,0xB3,0xCC,0xDA,0xCA,0xB0,
+    0x11,0xF2,0x94,0x86,0xD0,0x2C,0x50,0x09,0x88,0x8E,0xD1,0x24,0xC1,0x34,0xD8,0x54,
+    0xD1,0x00,0x54,0xA5,0xA0,0x82,0xDE,0x1C,0xD1,0x3C,0xE8,0x54,0xD1,0x90,0x5E,0x8D,
+    0xA8,0xD2,0xEA,0x14,0xDA,0x04,0xD8,0xE8,0x36,0x1A,0xD3,0x90,0x90,0x95,0xDA,0x00,
+    0x93,0x1D,0xD2,0x40,0x2C,0x01,0x38,0x01,0x50,0x01,0xD8,0x56,0xF5,0xD4,0x11,0x92,
+    0xD0,0x3E,0x58,0x01,0xD9,0x2E,0xF0,0xCC,0x10,0x9A,0xD5,0x16,0xC1,0x33,0x18,0xF2,
+    0x83,0x33,0x20,0x12,0x90,0x95,0xCA,0xD8,0x92,0xDD,0xC2,0x00,0xE7,0x68,0x93,0x6D,
+    0x6F,0x11,0xC8,0x4E,0x04,0xE7,0x10,0x9A,0x90,0x0E,0x10,0x09,0x90,0x2C,0xD8,0x24,
+    0xD6,0x34,0xC0,0x90,0x90,0x95,0x96,0x34,0xD8,0x1C,0xD0,0x3C,0xC6,0x90,0x96,0x95,
+    0x90,0x3C,0xD0,0x14,0xDA,0x0C,0x00,0x90,0xC0,0x90,0x96,0x0C,0xD8,0x14,0xD0,0x04,
+    0xC0,0x90,0x96,0x04,0xE6,0x00,0x92,0x05,0xD4,0xF4,0x11,0x82,0x92,0x06,0x38,0x3F,
+    0xC2,0x7C,0xE1,0x00,0x91,0x05,0x86,0x7C,0xC0,0x7C,0x41,0x11,0x97,0x06,0x30,0xAF,
+    0xC2,0x84,0xE1,0x00,0x91,0x05,0x86,0x84,0xC0,0x84,0x41,0x21,0x97,0x06,0x30,0x37,
+    0x00,0x0F,0x00,0x41,0x81,0x6C,0xC1,0x6C,0x41,0x41,0x88,0xD6,0x10,0x01,0x00,0x01,
+    0x58,0x8A,0xE8,0xC8,0xB4,0xF2,0xB4,0x7A,0x31,0x8A,0x31,0xDA,0x40,0x09,0x88,0x1E,
+    0x12,0x4A,0x92,0x4D,0x12,0xDA,0x92,0xDD,0xE7,0x6C,0xC2,0x18,0x92,0xDD,0xE2,0x74,
+    0xC2,0x08,0x93,0x65,0x04,0x08,0xC4,0x48,0x90,0x4D,0x5E,0x01,0xD9,0x76,0xE8,0xD4,
+    0x10,0x5A,0xD5,0x5E,0x60,0x01,0xD8,0x4E,0xED,0xCC,0x11,0x62,0xD1,0x36,0x68,0xA5,
+    0xA1,0x62,0x63,0x8D,0xA0,0x1A,0x03,0x3F,0xF8,0xA2,0x02,0x00,0x62,0xA5,0xD9,0x74,
+    0xA1,0x1A,0x63,0x8D,0xDB,0x6C,0xA2,0x1A,0xE6,0x00,0x92,0x05,0x46,0x11,0x98,0x9E,
+    0xE6,0x90,0x92,0x95,0x56,0x21,0x98,0x56,0x58,0x85,0xE1,0xC3,0xB0,0xC3,0xC8,0xC3,
+    0x98,0xC3,0x00,0x01,0x81,0x04,0x59,0x85,0xE0,0xC3,0xB0,0xC3,0xC8,0xC3,0x98,0xC3,
+    0x00,0x01,0x80,0xE4,0x80,0xEC,0x80,0xF4,0x01,0x29,0x80,0xDC,0x00,0x01,0x08,0x01,
+    0x7E,0xA5,0x00,0x18,0xCC,0xD0,0x36,0xA2,0x03,0x20,0xC2,0x10,0x91,0x95,0x6E,0xA5,
+    0xE3,0x72,0x35,0x2A,0xA1,0x72,0x6B,0x8D,0xE3,0x6A,0x35,0x12,0xC0,0x90,0x8A,0xAB,
+    0xE6,0x48,0x92,0x4D,0x4F,0x19,0x98,0x86,0x40,0x09,0x80,0x0E,0x40,0x19,0x88,0x66,
+    0xE1,0xCA,0x37,0xE2,0x30,0x12,0xCB,0x93,0x35,0x2A,0xC3,0x6B,0xA3,0x2A,0x37,0x1A,
+    0xC8,0xE3,0x8C,0xE3,0x83,0xCB,0x34,0x0A,0x88,0x53,0x0C,0x09,0x88,0x14,0x09,0x01,
+    0x89,0x7C,0xD1,0x7C,0x34,0x0A,0xE3,0x4A,0xDB,0x7C,0x31,0x12,0xC0,0x90,0xCE,0x9B,
+    0xC2,0xAB,0xCA,0x93,0x91,0x1C,0xD1,0x7C,0x51,0x01,0x88,0x16,0x40,0x01,0x80,0x0E,
+    0x40,0x19,0x88,0x5E,0x10,0x4A,0x9D,0x4E,0x11,0x09,0x90,0x0C,0x40,0x01,0x88,0x16,
+    0xF1,0x10,0x92,0x14,0x00,0xF7,0x10,0x09,0x90,0x14,0x01,0xDF,0x40,0x09,0x80,0x0E,
+    0x40,0x11,0x88,0x5E,0x10,0x4A,0xC5,0x4E,0x11,0x09,0x90,0x0C,0x40,0x09,0x88,0x16,
+    0xF1,0x10,0x94,0x14,0x00,0x77,0x10,0x09,0x90,0x14,0x01,0x5F,0x11,0x01,0x90,0x0C,
+    0x00,0x47,0x10,0x09,0x90,0x0C,0x41,0x11,0x94,0x16,0xF0,0x90,0x90,0x14,0x01,0x0F,
+    0x11,0x09,0x90,0x14,0x40,0x01,0x80,0x0E,0x40,0x19,0x88,0x0E,0x10,0x4A,0x95,0x2E,
+    0x40,0x09,0x80,0x0E,0x40,0x11,0x88,0x26,0x10,0x4A,0xC5,0x16,0x11,0x09,0x90,0x5C,
+    0x00,0x8F,0x14,0x01,0x94,0x5C,0x01,0x77,0xD1,0xCC,0x31,0x3A,0x1A,0xBA,0xD2,0xA4,
+    0xF5,0xEC,0xC1,0xD0,0xC9,0x90,0x94,0x64,0xD0,0x64,0xC1,0x93,0x92,0xE4,0x31,0x90,
+    0xA2,0xD6,0xF1,0xA4,0x04,0xD0,0xCB,0x90,0xF3,0x44,0x01,0xB0,0xC8,0x90,0x34,0xC9,
+    0x0C,0xB0,0xCD,0xB0,0x15,0x21,0xF0,0x92,0xF5,0xDC,0x11,0x92,0xD1,0x26,0xF0,0x6C,
+    0x70,0x41,0x88,0xC6,0x50,0x01,0xD8,0xB6,0xF7,0xE4,0x49,0xB0,0x82,0x06,0x80,0x90,
+    0xF5,0xE4,0xC0,0xB0,0xB1,0xE4,0xF0,0x44,0xFA,0xF4,0x18,0xB2,0xC8,0xB0,0xB7,0xF4,
+    0xF3,0xEC,0x18,0x12,0xC8,0x90,0x94,0xEC,0xD2,0x04,0xE1,0x90,0x91,0x95,0x94,0x04,
+    0xD6,0xE4,0x49,0x90,0x8A,0xEE,0xD0,0x44,0xF2,0xFC,0xC8,0x93,0x10,0x92,0xC5,0x2E,
+    0xD6,0xE4,0x31,0x01,0x19,0x92,0xF1,0x64,0x80,0x93,0x01,0x47,0xD2,0xE4,0x31,0x01,
+    0x19,0x92,0xF1,0x64,0x80,0x93,0x01,0x17,0xD0,0x0C,0x51,0x09,0x81,0x4E,0xD0,0x0C,
+    0x50,0x09,0x88,0x36,0xD4,0x6C,0x12,0xA2,0x81,0x1E,0xD0,0x14,0xC2,0x10,0x95,0xA5,
+    0x3D,0x57,0x15,0x4A,0x89,0xDE,0xD0,0x1C,0x10,0x9A,0x8C,0xC6,0xCA,0x7C,0xE1,0x48,
+    0x91,0x4D,0x8E,0x7C,0xC8,0x7C,0x49,0x11,0x92,0x06,0x38,0x97,0xE6,0x00,0x92,0x05,
+    0x40,0x21,0x90,0x06,0x3A,0x1F,0xC1,0x4C,0xF0,0x03,0x42,0x01,0x8A,0x5E,0xCA,0xAC,
+    0x8E,0x01,0xD9,0x43,0x31,0x10,0xA8,0x36,0x34,0x00,0x72,0x00,0x01,0x27,0xD1,0x5C,
+    0x50,0x01,0x88,0x5E,0x10,0x4A,0xCD,0x16,0xF6,0x48,0x92,0x4D,0x05,0x1F,0x10,0x4A,
+    0x92,0x0E,0xE0,0x48,0x90,0x4D,0x16,0x09,0x90,0x5C,0x01,0x67,0xD4,0x1C,0x11,0x9A,
+    0xCA,0x16,0xF0,0xD8,0x90,0xDD,0x06,0x27,0xD4,0x1C,0x11,0x9A,0x92,0x0E,0xE0,0xD8,
+    0x90,0xDD,0x16,0x01,0x92,0x5C,0x91,0x55,0x92,0x44,0x91,0xE5,0x71,0xFA,0xD7,0x44,
+    0xC9,0x90,0x94,0xEC,0x38,0x47,0x03,0x01,0xD2,0xAC,0x6A,0x94,0x10,0x12,0x9C,0xD6,
+    0xC0,0xAC,0xE2,0x4B,0x6C,0x04,0x14,0x42,0x9A,0x26,0xC0,0x44,0xCC,0x03,0xF4,0x00,
+    0x90,0x05,0x06,0x1F,0xC4,0x44,0xCA,0x03,0xE6,0x00,0x94,0x05,0xCC,0x04,0x11,0x0A,
+    0x9A,0x4E,0xC0,0xAC,0x0E,0x01,0xA8,0x0B,0xC7,0x54,0x0A,0xD9,0xE0,0x03,0x00,0x42,
+    0xC8,0x54,0xA2,0x43,0x28,0x3F,0x22,0x01,0x30,0xF9,0xB7,0x09,0x60,0x01,0x88,0x4E,
+    0xC1,0x3C,0xCA,0xCC,0xFA,0xF4,0xD0,0x54,0x40,0x93,0x92,0x9C,0x52,0x42,0xDF,0x74,
+    0xB0,0xAA,0x06,0x47,0xC1,0x34,0xCA,0xD4,0xFA,0xEC,0xD0,0x54,0x40,0x93,0x94,0x9C,
+    0x52,0x22,0xDF,0x6C,0xB0,0xAA,0x46,0x01,0x82,0x16,0xF0,0x48,0x10,0x42,0x8C,0x8E,
+    0xD0,0x74,0x92,0x04,0x91,0x05,0x36,0x0A,0xDA,0x6C,0xD2,0x5C,0xBD,0xEF,0xCF,0x4F,
+    0x35,0x8A,0x11,0x82,0xE8,0x0E,0x30,0x42,0x00,0x17,0x40,0x01,0xD0,0x06,0x00,0x01,
+    0xC8,0x28,0x02,0x07,0xA9,0x01,0x14,0xC0,0xC8,0xE4,0x80,0x17,0xE8,0xEF,0xC8,0x9C,
+    0xCA,0x00,0x1A,0x42,0x40,0x01,0xD0,0x06,0x00,0x01,0xA0,0x00,0x60,0x01,0x88,0x7E,
+    0xC8,0x54,0x42,0x4C,0x10,0x0A,0xD4,0x06,0x32,0x42,0xC8,0xAC,0x16,0x31,0xE8,0x4B,
+    0x1A,0x8A,0xD2,0xA4,0xC3,0x48,0x14,0x49,0x0C,0x90,0xC2,0x48,0x18,0x44,0x00,0x77,
+    0xCA,0x54,0x42,0x4C,0x10,0x0A,0xD4,0x06,0x32,0x42,0xC8,0xAC,0x16,0x31,0xE8,0x4B,
+    0x1A,0x8A,0xD2,0xA4,0xC3,0x48,0x14,0x49,0x0C,0x90,0xC2,0x48,0x1B,0x44,0xE2,0x20,
+    0x90,0x25,0x67,0x09,0xCA,0x16,0xC5,0xAC,0xCE,0xE4,0xD8,0x03,0x16,0x31,0x00,0x0A,
+    0xC6,0xAC,0xEA,0x03,0x1A,0x82,0xD2,0xA4,0xC3,0x10,0x04,0x49,0x08,0x00,0xC2,0x90,
+    0x1A,0x8C,0xD4,0xAC,0xDE,0xA4,0xEA,0x93,0xCA,0x74,0x02,0x90,0xC0,0x90,0xC6,0x90,
+    0x8A,0x8B,0xD0,0xAC,0xDE,0xA4,0xEA,0x93,0xCA,0x6C,0x02,0x90,0xC0,0x90,0xC6,0x80,
+    0x8A,0x0B,0xC2,0xAC,0xCE,0xAC,0xEA,0x03,0xE6,0x00,0xAA,0x43,0x27,0x1F,0xAE,0xFD,
+    0x81,0xDD,0xF4,0x24,0x30,0xB2,0x34,0xFA,0xD8,0x83,0x83,0x94,0xD8,0x83,0x81,0x8C,
+    0xC8,0x83,0x81,0x84,0x00,0x01,0x80,0x6C,0x42,0x3A,0x45,0x0B,0x35,0x82,0x81,0x01,
+    0x80,0xD4,0x48,0x01,0x80,0x1E,0xC0,0x84,0x40,0x00,0x82,0x74,0x00,0x67,0xC0,0xD4,
+    0xF0,0x03,0x42,0x51,0x98,0x26,0xC8,0xD4,0x00,0xD9,0xB0,0x42,0x80,0x74,0x00,0x1F,
+    0xC0,0xD4,0x08,0xD1,0xB0,0x0A,0x8A,0x74,0x40,0xE2,0xCC,0xDC,0xC0,0xC0,0x81,0xCC,
+    0x49,0x01,0x80,0xE6,0x41,0xD2,0xC4,0xC8,0x04,0x89,0x04,0x00,0xC0,0xD8,0xE1,0xCC,
+    0xC2,0x84,0x40,0x00,0x12,0x02,0x92,0x05,0x80,0x6C,0x00,0x01,0x30,0x22,0x04,0x8F,
+    0x00,0x01,0x00,0x47,0xC0,0x6B,0xC0,0xD3,0xD1,0x68,0x05,0x2C,0xE2,0x20,0xE5,0x48,
+    0xE2,0xD8,0xE2,0x00,0x90,0x05,0xEE,0x8C,0x17,0x42,0x9D,0x9E,0x32,0x02,0xE3,0x00,
+    0x94,0x05,0x36,0x22,0xC4,0x94,0x28,0x22,0x9B,0x56,0x37,0x82,0x40,0x01,0x80,0x06,
+    0x3C,0x02,0x44,0x42,0xC4,0xD8,0x41,0x3A,0x81,0x01,0xC2,0xC0,0x4C,0x2A,0x8C,0x01,
+    0xC0,0xC8,0x13,0x01,0x00,0x47,0x40,0x24,0x43,0x6C,0xD8,0x20,0x04,0xE4,0xE0,0xD8,
+    0xE4,0x00,0xE4,0x48,0xE6,0x90,0x92,0x95,0xE5,0x8C,0x10,0x12,0x9B,0x9E,0x47,0xBA,
+    0xC0,0xC0,0x81,0x64,0xE8,0xCC,0x00,0x01,0x81,0x9C,0x30,0x82,0x80,0x01,0x84,0xC4,
+    0xC0,0x01,0x83,0xBC,0x80,0x01,0x85,0xB4,0x08,0xA7,0x25,0x01,0x08,0x57,0xC5,0x64,
+    0xC4,0x03,0x48,0x00,0x89,0xF6,0xF3,0x42,0xCC,0x84,0x10,0x42,0xD8,0xD6,0xC3,0x8C,
+    0x32,0x5A,0x03,0x00,0xD0,0x48,0x31,0x52,0xD6,0x01,0x59,0x94,0x18,0xD4,0x44,0x54,
+    0x1A,0xD4,0x46,0x4C,0x21,0xCC,0x30,0x4A,0xCE,0x01,0x59,0x4C,0x21,0xCC,0x42,0x4C,
+    0x23,0xCC,0x44,0x4C,0x22,0xCC,0xCE,0x08,0x31,0x52,0xD0,0x01,0x58,0x94,0x2E,0xD4,
+    0xD2,0x42,0x29,0xC4,0x44,0x44,0x2A,0xC4,0x40,0x3D,0x60,0x01,0x88,0x66,0x08,0x01,
+    0x1A,0xCC,0x24,0xCC,0x2C,0xCC,0x10,0xCC,0x0A,0x19,0x0B,0x48,0xC4,0xC8,0x43,0x54,
+    0x16,0xD4,0x46,0x4C,0x19,0xCC,0x00,0x87,0xCA,0x8C,0xF0,0x48,0x10,0x62,0x8C,0xC6,
+    0x13,0x01,0x30,0x5A,0x26,0xD4,0x20,0xD4,0x28,0xD4,0xD4,0x8C,0x1C,0x19,0xF3,0x90,
+    0x06,0x90,0xCA,0x90,0x0E,0xD8,0xC2,0x90,0x43,0x94,0x34,0x5A,0x12,0xD4,0x04,0x48,
+    0xCB,0x50,0x0E,0x19,0x0A,0x48,0xC2,0x88,0x46,0x4C,0x14,0xCC,0x08,0x01,0x18,0xCC,
+    0x03,0x9F,0xF0,0x08,0x06,0x48,0xCA,0x50,0x0A,0x19,0x0B,0x48,0xC4,0x90,0x42,0x94,
+    0x34,0x5A,0x13,0xD4,0x06,0x10,0xCB,0x90,0xC4,0x90,0x42,0x94,0x13,0xD4,0xE6,0x10,
+    0x06,0x90,0xCA,0x90,0xC4,0x88,0x42,0x4C,0x18,0xCC,0xC8,0x9C,0x48,0x01,0x88,0x26,
+    0x34,0x5A,0x1B,0xCC,0x18,0xCC,0x26,0xCC,0x00,0x4F,0xC8,0x94,0xD2,0x9C,0xF0,0x48,
+    0x10,0x52,0x8C,0x26,0x0B,0x01,0x30,0x5A,0x2A,0xCC,0x28,0xCC,0x28,0xCC,0x0C,0x01,
+    0xF4,0x4A,0x33,0x62,0x30,0x5A,0x13,0xE1,0xF4,0xD2,0x14,0x52,0xE0,0x16,0x10,0xF1,
+    0xF0,0xD2,0x04,0x07,0x04,0x47,0x13,0x52,0xD1,0x36,0x13,0x01,0xF4,0xD2,0x14,0x52,
+    0xD1,0xD6,0x17,0x11,0xF4,0xD2,0x14,0x52,0xE1,0x86,0x17,0x31,0xF4,0xD2,0x14,0x52,
+    0xD1,0x96,0x17,0x41,0xF4,0xD2,0x14,0x52,0xD1,0x76,0x17,0x51,0xF4,0xD2,0x14,0x52,
+    0xE1,0x26,0x17,0x61,0xF4,0xD2,0x14,0x52,0xE0,0x06,0xCF,0xC4,0xE0,0x4B,0x4A,0x01,
+    0x80,0xE6,0x0B,0x01,0x30,0x72,0x8C,0x14,0x88,0x1C,0x88,0x7C,0x10,0x01,0xC8,0xDC,
+    0x4B,0x01,0x88,0xAE,0x88,0x24,0x18,0x01,0xF2,0x1A,0xEE,0xC8,0xD4,0x36,0xC0,0xC8,
+    0x90,0x55,0xC8,0x1C,0xE6,0x48,0x92,0x4D,0x88,0x1C,0x00,0x2F,0x58,0x51,0xE8,0x1E,
+    0xCA,0x14,0xE0,0x48,0x90,0x4D,0x8E,0x14,0xE0,0x00,0xCC,0x24,0xE6,0x48,0x92,0x4D,
+    0x88,0x24,0xC8,0x24,0x4F,0x49,0x98,0x36,0x34,0x02,0xC3,0x00,0x90,0x05,0xD0,0xBC,
+    0x68,0x8C,0xE5,0x93,0x11,0x8A,0x9C,0x36,0xCC,0x74,0x10,0x42,0xD0,0x1E,0xC9,0x14,
+    0x48,0x39,0x98,0x36,0xCA,0x74,0x80,0x48,0x10,0x0A,0xDC,0xE6,0xC0,0x1C,0x40,0x01,
+    0x88,0xCE,0xC0,0xD4,0xF0,0x03,0x42,0x11,0x98,0x8E,0x00,0x77,0x50,0x20,0x02,0x00,
+    0xF8,0x12,0x02,0x00,0xF8,0x12,0x01,0x00,0x80,0xC0,0x02,0x01,0x30,0x20,0x02,0x00,
+    0x20,0x20,0x02,0x00,0x60,0x20,0x03,0x00,0x00,0xB7,0x05,0x09,0x37,0x32,0x4C,0xFA,
+    0xC2,0x43,0xE2,0x00,0x80,0x43,0xC2,0xC4,0xE0,0x03,0x40,0x01,0x83,0xEE,0x30,0x82,
+    0x40,0x01,0x88,0xD6,0xC2,0xD4,0xF0,0x03,0x40,0x51,0x98,0xB6,0x30,0x5A,0x03,0xB1,
+    0x08,0x91,0xF1,0xC2,0xF4,0x8A,0x13,0x42,0xD8,0x4E,0x08,0xA1,0xF2,0xCA,0x82,0x48,
+    0x10,0x42,0xDC,0x26,0x0A,0xC1,0xF0,0xCA,0x84,0x48,0x12,0x42,0xD0,0x2E,0x00,0x09,
+    0x37,0x32,0x4C,0x72,0xC2,0x43,0xE2,0x00,0x87,0x43,0x52,0x62,0xC0,0x83,0x40,0x81,
+    0x97,0x16,0x4A,0x5A,0xA2,0x62,0xE0,0x00,0x81,0x83,0x00,0xEF,0x07,0x57,0x3A,0xFF,
+    0x30,0x1A,0x9B,0x04,0x83,0xC8,0x24,0x0A,0x90,0x4D,0x88,0x0C,0x08,0x01,0x88,0x24,
+    0xCA,0x6C,0x80,0x48,0x88,0xAC,0x18,0x01,0xF0,0x1A,0xCE,0xAC,0x9C,0xA4,0x10,0x5A,
+    0xD0,0x6E,0xD8,0xA4,0xCA,0x04,0xC0,0xC8,0x90,0x4D,0x88,0x04,0xD8,0xA4,0xC8,0x6C,
+    0x10,0x5A,0xD4,0x26,0x32,0x1A,0x83,0xC8,0x20,0x0A,0x93,0x4D,0x88,0x0C,0xC8,0xA4,
+    0xC0,0x48,0x94,0x55,0xE0,0x00,0xCC,0x24,0xE6,0x48,0x92,0x4D,0x88,0x24,0xC8,0x24,
+    0x4F,0x49,0x98,0x06,0xC4,0x0C,0x10,0x12,0xD8,0x66,0xC8,0x74,0xC4,0x04,0x10,0x42,
+    0xD8,0x46,0xC0,0xC4,0xE0,0x03,0x40,0x01,0x83,0x36,0x30,0x5A,0x00,0xB1,0xF0,0xC2,
+    0x40,0x01,0xD0,0x0E,0x04,0x09,0x30,0x32,0xC2,0xD4,0xF0,0x03,0x40,0x51,0x98,0x16,
+    0xC0,0xDC,0x40,0x01,0x80,0x46,0x00,0x09,0x30,0x8A,0x4B,0x01,0x80,0x06,0x00,0x01,
+    0x80,0x7C,0x00,0x0F,0x00,0x09,0x80,0x7C,0xC0,0x7C,0x40,0x01,0x80,0xA6,0x01,0x09,
+    0xB6,0x83,0x41,0x02,0x40,0x03,0x42,0x01,0x88,0x5E,0xC0,0xD4,0xF0,0x03,0x42,0x51,
+    0x90,0x3E,0xC0,0xBC,0x6E,0x8C,0xDB,0x03,0x32,0x00,0x72,0x00,0x84,0x51,0x10,0x0A,
+    0xC8,0x0E,0x10,0x01,0x00,0x07,0x10,0x09,0xC0,0xE4,0x40,0x01,0x80,0x06,0x10,0x11,
+    0x91,0x14,0x30,0x1A,0xB8,0x04,0xB0,0x0C,0x30,0x42,0xD1,0x9C,0xCF,0x64,0xB8,0xFF,
+    0xC8,0x7F,0xC7,0xB4,0xE2,0x03,0x38,0x00,0xAF,0x1E,0xE8,0x83,0xF4,0x8B,0x15,0x42,
+    0x98,0x56,0xC0,0xB4,0xE2,0x03,0x38,0x00,0xA7,0x26,0x00,0xF1,0xA8,0x83,0xC9,0xB4,
+    0x04,0x01,0xA0,0x43,0x87,0xFD,0xE8,0x85,0xE0,0x68,0xC5,0x64,0xE0,0x00,0x82,0x64,
+    0xE7,0x20,0x93,0x25,0xC4,0x8C,0x10,0x22,0x92,0x06,0x30,0x87,0xC2,0x9C,0xE0,0x00,
+    0x90,0x05,0x86,0x9C,0xC8,0x94,0xC0,0x9C,0x10,0x42,0x94,0x06,0x37,0x2F,0x3A,0x4F,
+    0xAC,0x9D,0x87,0x3D,0x30,0x3A,0xC0,0x44,0xD0,0x03,0x84,0x24,0xC6,0x44,0xD0,0x23,
+    0x41,0xCA,0xC4,0xE8,0x42,0xC2,0xC4,0x01,0xC0,0xF0,0xC1,0x44,0x08,0xF1,0xE8,0x03,
+    0x84,0x17,0xD0,0x57,0x41,0xAA,0xC4,0xD0,0x04,0x89,0x04,0x00,0xC4,0xD8,0x41,0xA2,
+    0xC0,0xC0,0x81,0x34,0x48,0xE9,0x88,0xDE,0x08,0x01,0x00,0x5F,0x00,0x01,0x00,0x2F,
+    0xC0,0xFB,0x80,0xBB,0xE2,0x90,0xE2,0xD8,0xE6,0x00,0x92,0x05,0x17,0x02,0x9D,0xBE,
+    0xE6,0x48,0x92,0x4D,0xC4,0x24,0x10,0x0A,0x98,0x86,0x07,0x01,0x01,0x2F,0x40,0x8C,
+    0x05,0x4C,0xE1,0x68,0xE2,0xB0,0xE5,0x00,0x95,0x05,0x16,0x02,0x9B,0xBE,0x07,0xCF,
+    0xC5,0x44,0x80,0x01,0xF0,0x03,0x42,0x51,0x98,0xA6,0xC3,0x44,0xE8,0x03,0x86,0x2C,
+    0x43,0x01,0x80,0x7E,0x98,0x1C,0xF0,0x34,0x08,0x21,0x1B,0x01,0x04,0x21,0x33,0x32,
+    0x04,0x01,0x30,0x22,0x80,0x14,0x28,0x01,0x00,0x1F,0x01,0x01,0x80,0x0C,0x00,0x97,
+    0xC5,0xBB,0x49,0xF8,0x84,0x66,0x10,0x0A,0xC8,0x0E,0x30,0x0A,0x04,0x17,0x10,0x1A,
+    0x90,0x06,0x30,0x1A,0xFB,0x14,0xE0,0xF8,0x90,0xFD,0xBF,0x14,0x38,0x09,0xB8,0x0C,
+    0xE2,0xB0,0xE3,0x00,0x95,0x05,0x16,0x02,0x98,0x56,0xC7,0x0C,0x40,0x01,0x80,0x36,
+    0x28,0x72,0xCD,0x0E,0x30,0x72,0x05,0x17,0x28,0x62,0x95,0x06,0x33,0x62,0xE5,0x68,
+    0x90,0x6D,0xC7,0x24,0x16,0x2A,0x9C,0xC6,0xC0,0x2C,0x28,0x51,0x18,0x42,0xEB,0x14,
+    0x10,0x42,0xCD,0xB6,0x48,0x01,0x80,0x0E,0xF6,0x48,0x92,0x4D,0xF4,0x00,0x13,0x1A,
+    0xD2,0x0E,0xE0,0xD8,0x93,0xDD,0x36,0x82,0x40,0x01,0x80,0x16,0xF6,0x00,0x92,0x05,
+    0x30,0x32,0xEC,0x24,0xF5,0x68,0x2B,0x62,0xD3,0x1E,0x30,0x02,0xE6,0x00,0x92,0x05,
+    0x30,0x22,0x2C,0x01,0x00,0xDF,0x00,0x01,0x04,0xAF,0x10,0x42,0x9B,0x2E,0x28,0xAA,
+    0x9C,0x1E,0x10,0xC2,0xC3,0x0E,0x28,0x2A,0xC8,0x3E,0xC0,0xB3,0x0D,0xB8,0xD9,0xF8,
+    0xF1,0x1C,0xC0,0xB3,0xC9,0xB0,0x4F,0xB0,0x82,0xB3,0xE0,0x90,0xF3,0x1C,0xE0,0xB0,
+    0xB2,0x1C,0xE0,0x00,0x95,0x05,0x16,0x02,0x9B,0x3E,0xE7,0x68,0x90,0x6D,0xC7,0x24,
+    0x17,0x2A,0x9C,0x06,0xC0,0x34,0x10,0x01,0x00,0x67,0x08,0x01,0x00,0x37,0xC0,0x1B,
+    0x34,0xD8,0x74,0xD8,0x82,0x1B,0xE0,0x00,0xE6,0x48,0x92,0x4D,0x17,0x0A,0x9D,0xB6,
+    0xE6,0x90,0x92,0x95,0xCC,0x24,0x10,0x52,0x98,0x7E,0x87,0x4D,0xEF,0x85,0xAF,0xFD,
+    0x80,0x1D,0x34,0x2A,0x30,0x62,0x00,0x01,0xA9,0x03,0xB7,0x03,0x36,0x02,0x81,0x01,
+    0xE7,0x0B,0x10,0xE9,0x02,0x52,0x38,0x48,0x7A,0x48,0x06,0x48,0x18,0x52,0xA0,0x13,
+    0xE7,0x0B,0x10,0xD9,0x00,0x8A,0xA0,0x0B,0x34,0x02,0x81,0x01,0x82,0x14,0xE0,0x03,
+    0x78,0x52,0x41,0x01,0x80,0x56,0x00,0x01,0x4F,0x4A,0x11,0xF9,0xA2,0x52,0xE0,0x00,
+    0x90,0x05,0x46,0x81,0x98,0xD6,0x07,0x01,0x83,0xC3,0x81,0xC3,0xA1,0x04,0x30,0x5A,
+    0x00,0x01,0xD0,0x34,0xCF,0x2C,0xB8,0xFF,0xE1,0xD7,0x36,0x32,0xB3,0x01,0xF5,0x83,
+    0x40,0x51,0x98,0x36,0xA1,0x04,0x30,0x5A,0x00,0x09,0xD0,0x34,0xCF,0x2C,0xB8,0xFF,
+    0xE0,0x77,0xC6,0x14,0xE0,0x03,0x42,0x01,0x80,0xF6,0x43,0xC2,0xEA,0x0B,0xC7,0x03,
+    0x04,0x00,0x12,0x0A,0xC8,0x1E,0x48,0xAA,0x02,0x01,0x80,0x43,0x00,0xEF,0x49,0x9A,
+    0xC4,0x43,0x30,0x22,0x41,0x21,0xC0,0xC6,0x01,0x01,0x00,0x9F,0x58,0x82,0xE0,0xCA,
+    0x49,0xF9,0x87,0x6E,0x12,0x01,0xE0,0x08,0x90,0x4D,0x06,0x97,0x79,0x62,0xE0,0xDA,
+    0xE6,0xFA,0xDB,0xD8,0xE0,0xD8,0x5A,0x11,0xC0,0x4E,0x58,0x42,0xC0,0xD3,0x52,0x01,
+    0x82,0x0E,0xF0,0x90,0x80,0xD3,0x5A,0x32,0x10,0xF9,0xA7,0xD2,0x12,0x09,0xE0,0x48,
+    0x93,0x4D,0x2E,0x0A,0x98,0x56,0x57,0x09,0x88,0x96,0x00,0x5F,0x00,0x70,0x00,0x01,
+    0x80,0x40,0x02,0x01,0x80,0xC0,0x02,0x01,0x60,0x20,0x07,0x00,0x20,0x20,0x02,0x00,
+    0x50,0x20,0x02,0x00,0x52,0x32,0xC3,0x8B,0x48,0x01,0x80,0x0E,0xF2,0x48,0x82,0x8B,
+    0xE6,0x00,0x92,0x05,0x7B,0x12,0x2B,0x02,0x98,0x46,0x0E,0x01,0xC2,0x14,0xE0,0x1B,
+    0x31,0x02,0x81,0x01,0x58,0x09,0x88,0x2E,0x52,0xEA,0xC2,0x93,0x50,0x01,0x80,0x9E,
+    0x08,0x09,0x00,0x8F,0x52,0xD2,0xC2,0x93,0x50,0x01,0x88,0x46,0xDB,0x3B,0x6E,0x14,
+    0x33,0xF8,0x73,0xF8,0x10,0xD2,0x9D,0x3E,0xF0,0x13,0x51,0x01,0x8D,0x26,0x68,0x14,
+    0xE5,0x3B,0x10,0xD2,0x98,0x06,0x08,0x09,0x48,0x01,0x80,0x2E,0xF5,0x8B,0x4B,0x01,
+    0x92,0x3E,0xE0,0x48,0xB0,0x8B,0x03,0x27,0xF0,0x8B,0x4B,0x51,0x90,0x0E,0x08,0x01,
+    0xB3,0x8B,0xF3,0x8B,0x49,0x51,0x98,0x0E,0x52,0x4A,0xC2,0x93,0x50,0x01,0x88,0x8E,
+    0xE8,0x3B,0x7F,0x01,0x88,0x76,0x00,0x07,0x00,0xC7,0x58,0x09,0x8A,0x16,0xF0,0x48,
+    0xB0,0x8B,0x03,0x3F,0xDB,0x03,0x6E,0x1C,0x34,0x00,0x72,0x00,0x10,0x1A,0x94,0x0E,
+    0xF3,0x48,0xB2,0x8B,0x50,0x11,0x98,0x16,0x03,0x01,0xB5,0x83,0x00,0x37,0x50,0x09,
+    0x8B,0x26,0xF0,0x83,0x40,0x81,0x92,0x0E,0x03,0x21,0xB3,0x83,0xE8,0x0B,0x4F,0x09,
+    0xC8,0x3E,0x03,0x01,0xD0,0x13,0x97,0x04,0x10,0x01,0x00,0xA7,0x02,0x98,0xCA,0xF0,
+    0x1A,0x49,0x0B,0xD8,0xC2,0x98,0xCF,0xF3,0xC8,0xDB,0xF8,0x04,0x03,0xD8,0x1A,0xF2,
+    0x03,0xB0,0xCB,0xB0,0xC0,0x98,0x37,0xC9,0x0C,0xB0,0xCD,0xD8,0x40,0xDC,0xC4,0xC0,
+    0x92,0x05,0xE4,0x90,0x94,0x95,0x16,0x8A,0xC0,0x46,0x87,0x17,0xC2,0xEF,0x46,0x00,
+    0x81,0x0C,0xC8,0x0B,0xC4,0x0C,0x10,0x0A,0x90,0x1E,0x0A,0x01,0x02,0xF7,0x01,0x40,
+    0x32,0x49,0xCB,0x00,0x0C,0xB0,0xCB,0x00,0xC8,0x13,0xCA,0x03,0xDA,0x04,0x00,0x00,
+    0x1A,0xD2,0x02,0x90,0xC8,0x90,0xC2,0x80,0x14,0xC9,0x08,0x90,0xC0,0x10,0x04,0x21,
+    0xF0,0x82,0xD0,0x0C,0x11,0x82,0xD4,0x3E,0x30,0x42,0x00,0xF7,0xE4,0x10,0x32,0xB2,
+    0x92,0x95,0x06,0x98,0xCC,0xD8,0xCA,0xF8,0x05,0x18,0x32,0xE2,0xC9,0xD8,0xCA,0xFB,
+    0xC8,0xD8,0x8C,0xFB,0x33,0x3A,0xCB,0xFB,0x88,0xFB,0x1A,0x31,0x1A,0xD2,0xCA,0x90,
+    0x3C,0x31,0xC8,0x90,0x1A,0xC2,0xCB,0x00,0x5C,0x9C,0xC8,0x00,0x1A,0x1C,0x58,0x9C,
+    0x1C,0x1C,0x5A,0x94,0x1B,0x14,0x34,0x92,0x97,0x85,0xEE,0x13,0xF4,0x90,0x12,0x12,
+    0xE7,0xE6,0xEE,0x03,0xF7,0x00,0xAA,0x03,0xE6,0x48,0x92,0x4D,0xEC,0x03,0x17,0x42,
+    0xC1,0xEE,0x35,0x0A,0x37,0x42,0xB9,0xFF,0xE8,0x9F,0x87,0x3D,0xE8,0x85,0x07,0x00,
+    0x00,0x70,0x00,0x01,0xAC,0xFD,0x87,0x2D,0xE0,0x74,0x00,0x01,0x80,0x1C,0xC0,0x3C,
+    0xD0,0x33,0xC6,0x3C,0x58,0x04,0x84,0x0C,0xC3,0x34,0x18,0x82,0x50,0xFA,0xCF,0x2C,
+    0xC2,0x48,0xC4,0x08,0x8F,0x24,0x40,0xF2,0xC0,0x03,0x40,0x09,0x88,0x0E,0xC0,0x3C,
+    0xD8,0x33,0x04,0x01,0x10,0x01,0x00,0x1F,0x82,0x53,0xE0,0x48,0xE6,0x00,0x92,0x05,
+    0x17,0x82,0x9D,0xCE,0x08,0x01,0x00,0x09,0xD8,0x44,0xD0,0x34,0x86,0x07,0xD0,0x5F,
+    0x28,0x01,0x60,0x01,0x8B,0x0E,0xE0,0x68,0x90,0x6D,0xFF,0x24,0x08,0x01,0x00,0x5F,
+    0xC1,0xC3,0x19,0x02,0x91,0x05,0x86,0xC3,0xD4,0x7C,0x10,0x82,0xCD,0x0E,0x18,0x02,
+    0x83,0xC3,0xE1,0xF8,0xE6,0x48,0x92,0x4D,0x17,0x8A,0x9D,0x8E,0x48,0x4A,0xC7,0x2C,
+    0xC0,0x00,0x82,0x14,0xD0,0x44,0x90,0x04,0x00,0x11,0xD8,0x3C,0xD0,0x2C,0xC8,0x34,
+    0x87,0x07,0xD0,0xFF,0xD0,0x44,0xC0,0x3C,0x92,0x04,0x80,0x01,0xCC,0x0B,0x00,0x01,
+    0x18,0x0A,0x10,0x01,0xD8,0x3C,0xC0,0x14,0x84,0x0F,0xD8,0x37,0xD8,0xC0,0x0D,0x01,
+    0x00,0x3F,0xD1,0x14,0x1E,0x01,0xF0,0x9A,0xD4,0x0C,0xD0,0xD0,0x90,0x95,0x68,0x01,
+    0x88,0x2E,0x50,0xC1,0xE8,0xBE,0xC0,0x13,0x18,0x12,0x85,0x13,0x00,0x9F,0x50,0x99,
+    0xE8,0x2E,0xC0,0x13,0x50,0x01,0x80,0x16,0xF0,0x90,0x82,0x13,0x00,0x5F,0x68,0x29,
+    0x8E,0x4E,0x58,0xE1,0xE8,0x3E,0xC0,0x13,0x50,0x01,0x88,0x26,0xD0,0x1C,0x50,0x01,
+    0x88,0x0E,0x10,0x09,0x90,0x1C,0xD0,0x14,0xE0,0x90,0x94,0x14,0xE2,0x00,0xE2,0x48,
+    0x95,0x4D,0x16,0x8A,0x9B,0xAE,0x46,0x20,0x6D,0x21,0xC8,0x16,0xD0,0x44,0x90,0x04,
+    0x08,0x01,0x00,0x19,0xD8,0x3C,0xD0,0x2C,0x85,0x07,0xD0,0xDF,0x08,0x09,0x30,0x42,
+    0xD8,0x44,0xD0,0x34,0x82,0x07,0xD0,0xFF,0xC0,0x1C,0x80,0x4D,0xEF,0x85,0xAF,0xFD,
+    0x80,0x1D,0xF4,0x64,0x30,0x7A,0x30,0xEA,0xD0,0xC3,0x87,0x14,0x48,0xCA,0xC5,0x1C,
+    0xC5,0x20,0x42,0xBA,0xC0,0x03,0x40,0x09,0x8D,0x0E,0xD8,0xC3,0x80,0x14,0x08,0x01,
+    0x00,0x09,0xD8,0x2C,0xD0,0x6C,0x80,0x07,0xD0,0x37,0xD2,0x2C,0x91,0x04,0x30,0xDA,
+    0x00,0x11,0xD0,0x1C,0xC8,0x6C,0x80,0x07,0xD0,0xA7,0xD4,0x2C,0x92,0x04,0x00,0x21,
+    0xEC,0x0A,0x06,0x01,0x19,0x0A,0x30,0xDA,0x11,0x01,0x30,0x02,0x80,0x0F,0xD8,0xE7,
+    0xD0,0x2C,0x90,0x04,0x30,0xDA,0x09,0x01,0x00,0x19,0xD0,0x1C,0x84,0x07,0xD0,0x0F,
+    0x08,0x09,0x30,0x42,0xD8,0x2C,0xD0,0x6C,0x81,0x07,0xD0,0x2F,0x41,0x12,0x05,0x44,
+    0x01,0x01,0x00,0x84,0x08,0x01,0x00,0x77,0x01,0x01,0xF0,0x02,0x15,0x01,0xF0,0x52,
+    0x10,0x12,0xEC,0x06,0x00,0x44,0x11,0x01,0xF4,0x92,0x15,0x12,0xD1,0x06,0x00,0x84,
+    0xE2,0x20,0xE5,0x48,0x90,0x4D,0xC6,0x14,0x17,0x0A,0x9C,0x6E,0x87,0x3D,0xE8,0x85,
+    0xAC,0xBD,0x87,0x45,0xC2,0x4C,0xD8,0x03,0x80,0x1C,0xC8,0x4C,0xD0,0x4B,0x8E,0x14,
+    0x50,0x72,0xCC,0x44,0xC0,0x48,0x8C,0x3C,0x48,0x6A,0xC4,0x4B,0x48,0x09,0x88,0x46,
+    0xCA,0x1C,0xE0,0x48,0x90,0x4D,0x8E,0x1C,0x80,0x34,0xC0,0x4C,0xD8,0x03,0x84,0x14,
+    0x00,0x0F,0x00,0x01,0x80,0x34,0xF8,0x34,0x04,0x3F,0x4B,0x42,0x04,0x01,0x00,0x43,
+    0xC0,0x4C,0xC8,0x3C,0xD3,0x03,0x1E,0xC2,0xC0,0x08,0x02,0x01,0x10,0xF9,0x01,0x1F,
+    0x82,0x53,0xE0,0x48,0xE6,0x00,0x92,0x05,0xDC,0x14,0x10,0xC2,0x9C,0xC6,0x27,0x01,
+    0x31,0x2A,0x31,0x32,0x03,0xC7,0x40,0xF2,0x08,0x23,0x4E,0x25,0xB8,0x0C,0x88,0x04,
+    0x40,0x45,0x40,0x3E,0x5F,0x2D,0xB8,0xFF,0xFB,0x97,0x33,0x5A,0x00,0xA1,0xF0,0xC2,
+    0x40,0xE1,0xD1,0x1E,0x68,0x41,0x80,0x4E,0x18,0x62,0x05,0x1F,0x70,0x01,0x8C,0x0E,
+    0x30,0x72,0x01,0x1F,0x41,0x68,0x1B,0x62,0x6F,0x01,0x88,0x26,0xC0,0x4C,0xC8,0x3C,
+    0xD3,0x03,0x1E,0xC2,0xC0,0x08,0x02,0x01,0x10,0x01,0x00,0x1F,0x82,0x53,0xE0,0x48,
+    0xE6,0x00,0x92,0x05,0xDC,0x14,0x10,0xC2,0x99,0xC6,0x37,0xAA,0x20,0x01,0x00,0x0F,
+    0x1B,0xA2,0x41,0xB0,0x77,0x01,0x88,0xDE,0xC4,0x4C,0x58,0x04,0xC0,0x41,0x91,0x35,
+    0x05,0x8F,0x18,0x62,0x46,0x12,0x0B,0x23,0x48,0x25,0xB8,0x0C,0x88,0x04,0x40,0x45,
+    0x40,0x3E,0x58,0x2D,0xB9,0xFF,0xFF,0xDF,0x30,0x5A,0x03,0x81,0xF5,0xC2,0x10,0x82,
+    0xE9,0x06,0x18,0x62,0x40,0x68,0x6B,0x01,0x88,0x5E,0xC7,0x44,0x0E,0x89,0xC9,0x00,
+    0x0A,0x48,0xC4,0x00,0x8B,0x23,0xE0,0xF8,0x90,0xFD,0xC7,0x1C,0x14,0x3A,0x9C,0xA6,
+    0xF1,0x34,0x00,0x9F,0xC1,0x44,0x08,0x89,0xCC,0x00,0x0C,0x48,0xC1,0x38,0xCA,0xC3,
+    0x40,0x01,0x88,0x0E,0x01,0x09,0x88,0xC3,0xC8,0xE3,0x29,0x01,0x01,0x01,0x00,0x07,
+    0xE7,0x68,0x93,0x6D,0x40,0x09,0x88,0x1E,0x60,0xF9,0x97,0x0E,0xE5,0x20,0x93,0x25,
+    0x48,0x32,0x02,0x01,0x00,0x43,0xAC,0x48,0x46,0x2A,0x0A,0x23,0x20,0x00,0x67,0x10,
+    0x02,0x07,0x40,0x48,0x30,0x82,0x10,0x42,0x81,0xDE,0x4F,0x01,0xC9,0x06,0x08,0x01,
+    0x88,0x04,0x90,0x0C,0x40,0x45,0x40,0x6E,0x37,0x8A,0xB9,0xFF,0xF0,0x1F,0x43,0x01,
+    0x80,0x0E,0x68,0x29,0x99,0xE6,0x8E,0xE3,0xE7,0xB0,0x93,0xB5,0xC4,0x1C,0x10,0x32,
+    0x98,0x46,0x86,0x5D,0xEF,0x85,0xAF,0xBD,0x80,0x15,0x34,0x62,0x31,0xB2,0x48,0x82,
+    0x00,0x01,0x80,0x43,0x40,0x9A,0x41,0x0B,0x10,0x11,0x18,0x8A,0x00,0x0B,0x28,0x01,
+    0x00,0x3F,0x08,0x09,0x31,0x9A,0x31,0x52,0x30,0x42,0x80,0x07,0xCB,0xA7,0xE1,0x68,
+    0x95,0x6D,0xD7,0x03,0x17,0x42,0xC5,0xA6,0x31,0x12,0x31,0x8A,0x00,0x11,0x80,0x07,
+    0xC1,0x7F,0x34,0x92,0x30,0x0A,0xC1,0x14,0xB8,0xFF,0xFF,0xD7,0x31,0x12,0x31,0x8A,
+    0x00,0x01,0x80,0x07,0xC5,0x2F,0xDC,0x03,0x41,0x01,0x80,0x46,0x6F,0x02,0x41,0x43,
+    0x91,0x3D,0x4C,0x04,0x00,0x43,0x47,0xD2,0x08,0x09,0x80,0x0B,0x31,0x12,0x31,0x8A,
+    0x00,0x11,0x80,0x07,0xC1,0xAF,0x33,0x1A,0xB0,0x04,0x08,0x01,0x00,0x09,0xD0,0x14,
+    0x82,0x07,0xC8,0xFF,0xB3,0x04,0xD8,0x0B,0x30,0x1A,0x01,0x11,0xD0,0x14,0x80,0x07,
+    0xC9,0xC7,0x32,0x92,0x30,0x0A,0xC1,0x14,0xBF,0xFF,0xF7,0x97,0x31,0x12,0x31,0x8A,
+    0x00,0x01,0x80,0x07,0xC0,0xEF,0x42,0x52,0x08,0x01,0x80,0x0B,0x01,0x7B,0x37,0x1A,
+    0xB0,0x04,0x08,0x01,0x00,0x11,0xD0,0x14,0x82,0x07,0xC8,0x1F,0x31,0x12,0x31,0x8A,
+    0x00,0x11,0x80,0x07,0xC0,0x6F,0x52,0x3A,0x40,0x83,0x00,0x6F,0x50,0x20,0x02,0x00,
+    0x00,0x80,0x00,0x01,0x30,0x20,0x02,0x00,0xF8,0xFB,0x07,0x00,0x10,0x00,0x00,0x42,
+    0x00,0x01,0x00,0x42,0x18,0x00,0x04,0x42,0x0C,0x11,0x18,0x42,0x00,0x83,0x80,0x2D,
+    0xE8,0x85,0x07,0x00,0xA8,0x85,0x31,0x12,0x90,0x01,0xE6,0x9B,0x32,0xD8,0x72,0xD8,
+    0xA7,0x9B,0x58,0xCA,0x41,0xE3,0x30,0x20,0xA2,0x16,0x40,0xE3,0x3F,0x20,0xAB,0xE6,
+    0x58,0xB2,0x27,0x41,0x00,0xE3,0x44,0xE3,0x28,0xF9,0xAF,0x19,0x18,0x62,0x01,0xE3,
+    0x20,0x81,0x48,0x01,0x83,0x76,0x00,0xE9,0x08,0x00,0xE4,0x8B,0x48,0x48,0x8E,0x1E,
+    0xF0,0x00,0x22,0x00,0x67,0x00,0x88,0xC6,0x40,0x01,0x88,0x16,0x41,0xC3,0x18,0x02,
+    0x01,0xC3,0xE8,0x85,0x80,0x01,0xE5,0x8B,0x48,0x48,0x8E,0x16,0xE8,0x0B,0x4E,0x31,
+    0x8E,0xCE,0xEF,0x03,0x47,0x31,0x88,0xA6,0x41,0xC3,0x18,0x02,0x01,0xC3,0xE8,0x85,
+    0xAA,0x85,0x47,0x63,0x46,0x5B,0xD6,0xAB,0x71,0x0A,0xC7,0xB3,0x70,0x09,0x88,0x16,
+    0x4A,0x63,0x56,0x5B,0xD8,0xAB,0x44,0x01,0x88,0x0E,0x11,0x01,0x01,0xE7,0x40,0x03,
+    0x30,0x32,0xB0,0x41,0x30,0xA2,0xED,0x08,0x32,0x42,0xC0,0x01,0x58,0x33,0xC4,0xFB,
+    0x1C,0xF2,0x19,0x33,0x58,0x33,0xC6,0xFB,0x1E,0xF2,0x1D,0x33,0x31,0x32,0x43,0x83,
+    0xC5,0xF3,0x18,0x82,0x31,0x32,0x03,0x83,0x40,0x73,0xC0,0xC3,0x18,0x32,0x04,0x73,
+    0xEA,0x20,0xE1,0xD8,0xE6,0x90,0x92,0x95,0x17,0x52,0x9D,0x06,0xE8,0x85,0x47,0x09,
+    0x88,0x0E,0x11,0x01,0x01,0xE7,0x40,0x03,0x30,0x32,0xB0,0x41,0x30,0xA2,0xED,0x08,
+    0x32,0x42,0xC0,0x01,0x58,0x33,0xC4,0xFB,0x1C,0xF2,0x1D,0x33,0x58,0x33,0xC6,0xFB,
+    0x1E,0xF2,0x1D,0x33,0x31,0x32,0x43,0x83,0xC5,0xF3,0x18,0x82,0x31,0x32,0x03,0x83,
+    0x40,0x73,0xC0,0xC3,0x18,0x32,0x00,0x73,0xEA,0x20,0xE1,0xD8,0xE6,0x90,0x92,0x95,
+    0x17,0x52,0x9D,0x06,0xE8,0x85,0x47,0x11,0x88,0x0E,0x11,0x01,0x01,0xE7,0x40,0x03,
+    0x30,0x32,0xB0,0x41,0x30,0xA2,0xED,0x08,0x32,0x42,0xC0,0x01,0x58,0x33,0xC4,0xFB,
+    0x1C,0xF2,0x1D,0x33,0x58,0x33,0xC6,0xFB,0x1E,0xF2,0x1D,0x33,0x31,0x32,0x43,0x83,
+    0xC1,0xF3,0x18,0x82,0x31,0x32,0x03,0x83,0x40,0x73,0xC0,0xC3,0x18,0x32,0x04,0x73,
+    0xEA,0x20,0xE1,0xD8,0xE6,0x90,0x92,0x95,0x17,0x52,0x9D,0x06,0xE8,0x85,0x47,0x19,
+    0x88,0xE6,0x17,0x01,0x01,0xE7,0x40,0x03,0x30,0x32,0xB0,0x41,0x30,0xA2,0xED,0x08,
+    0x32,0x42,0xC0,0x01,0x58,0x33,0xC4,0xFB,0x1C,0xF2,0x1D,0x33,0x58,0x33,0xC6,0xFB,
+    0x1E,0xF2,0x1D,0x33,0x31,0x32,0x43,0x83,0xC1,0xF3,0x18,0x82,0x31,0x32,0x03,0x83,
+    0x40,0x73,0xC0,0xC3,0x18,0x32,0x00,0x73,0xEA,0x20,0xE1,0xD8,0xE6,0x90,0x92,0x95,
+    0x17,0x52,0x9D,0x06,0xEF,0x85,0xAF,0x85,0x44,0xE3,0x02,0xB0,0xCE,0x20,0x45,0xEB,
+    0xC0,0x68,0x45,0x09,0x88,0x26,0x40,0xE3,0xCC,0x20,0x45,0xDB,0xC0,0xE8,0x04,0x3F,
+    0x79,0x7A,0xC4,0xFB,0x78,0x09,0x88,0x1E,0x4D,0xE3,0xCE,0x20,0x54,0xDB,0xC2,0xE8,
+    0x40,0x13,0xF9,0xA0,0xC0,0x5B,0x41,0x09,0x88,0x76,0x48,0x01,0x8A,0x66,0x40,0x83,
+    0x1A,0xC2,0x04,0x83,0x44,0x83,0x1C,0xC2,0x01,0x83,0x44,0x03,0x19,0xC2,0x04,0x03,
+    0x40,0x83,0x18,0xC2,0x07,0x83,0xE8,0x85,0x48,0x09,0x88,0x66,0x44,0x83,0x1A,0xC2,
+    0x04,0x83,0x42,0x83,0x1C,0xC2,0x04,0x83,0x44,0x83,0x18,0xC2,0x01,0x83,0x40,0x03,
+    0x19,0xC2,0x00,0x03,0xE8,0x85,0x4F,0x11,0x89,0x66,0x40,0x03,0x19,0xC2,0x04,0x03,
+    0x44,0x83,0x18,0xC2,0x02,0x83,0x40,0x83,0x1A,0xC2,0x00,0x83,0x44,0x83,0x1C,0xC2,
+    0x07,0x83,0xEC,0x85,0x4F,0x19,0x88,0xE6,0x44,0x03,0x19,0xC2,0x00,0x03,0x41,0x83,
+    0x18,0xC2,0x04,0x83,0x44,0x83,0x1A,0xC2,0x04,0x83,0x42,0x83,0x1C,0xC2,0x00,0x83,
+    0xEF,0x85,0xAF,0xFD,0xF4,0x4C,0x30,0x62,0x29,0x01,0x48,0x93,0x4C,0x8B,0x35,0x72,
+    0xD1,0xE3,0x36,0x3A,0x48,0x32,0xC3,0x4B,0x48,0x09,0x88,0x0E,0x54,0x93,0xD9,0xE3,
+    0x41,0x19,0x80,0x96,0x33,0x79,0x48,0x0A,0x10,0xB0,0x41,0x11,0x8B,0xB6,0x30,0x02,
+    0x1B,0x3A,0x5A,0x02,0xC6,0x14,0xC0,0x00,0xC3,0xC0,0x31,0x9A,0x32,0x2A,0xEB,0xDA,
+    0x08,0x5B,0x0A,0x01,0x00,0x3F,0xC0,0x1B,0x18,0x9A,0x41,0xAB,0x00,0x5B,0xE9,0x90,
+    0xE2,0x00,0xE2,0x48,0x95,0x4D,0x16,0x0A,0x9F,0xAE,0xEF,0xFD,0x40,0x01,0x88,0x8E,
+    0x1E,0x01,0x10,0x5B,0x40,0x82,0x42,0x33,0x45,0xB0,0x05,0xB0,0x02,0x33,0x00,0x1B,
+    0x00,0x5B,0x40,0x0B,0x1C,0x81,0x18,0xCA,0x00,0x0B,0x40,0x0B,0x18,0x01,0x1C,0xCA,
+    0x00,0x0B,0x00,0x17,0x40,0x09,0x88,0x06,0x30,0xAA,0x01,0x01,0x00,0x27,0x40,0x8B,
+    0x00,0x6B,0xE8,0x90,0xE6,0x00,0x92,0x05,0x17,0x02,0x9D,0xC6,0xEF,0xFD,0xAF,0x85,
+    0x30,0x72,0xCC,0x2C,0xD5,0x63,0x36,0x22,0x46,0xEB,0x42,0xE3,0x40,0x01,0x88,0x1E,
+    0xDC,0x43,0x32,0x22,0x44,0xEB,0x40,0xE3,0x51,0x19,0x88,0x16,0x00,0x01,0x00,0xEF,
+    0x3E,0x10,0x7E,0x90,0x28,0x92,0x8B,0xAE,0x40,0x53,0x31,0xB2,0xB0,0x41,0xE8,0x98,
+    0x32,0xD2,0xD0,0x01,0x59,0xBB,0xC4,0x0B,0x1C,0x7A,0x1C,0xBB,0x59,0xBB,0xC6,0x0B,
+    0x1E,0x7A,0x1C,0xBB,0x41,0x93,0xC1,0x3B,0x19,0xD2,0x01,0x93,0x41,0xCB,0xC0,0x13,
+    0x18,0x8A,0x00,0xCB,0xEB,0x68,0xE1,0x20,0xE6,0x00,0x92,0x05,0x2E,0x02,0x9B,0xFE,
+    0xE8,0x85,0x57,0x29,0x88,0xE6,0x07,0x01,0x06,0xEF,0x38,0x10,0x7B,0x90,0x2E,0x92,
+    0x89,0xAE,0x40,0x53,0x30,0xB2,0xB0,0x41,0xE8,0x98,0x30,0xD2,0xD4,0x01,0x5A,0xBB,
+    0xC0,0x0B,0x19,0x7A,0x1E,0xBB,0x5C,0xBB,0xC4,0x0B,0x19,0x7A,0x19,0xBB,0x46,0x93,
+    0xC5,0x3B,0x19,0xD2,0x00,0x93,0x41,0xCB,0xC4,0x13,0x19,0x8A,0x01,0xCB,0xE8,0x68,
+    0xE2,0x20,0xE3,0x00,0x93,0x05,0x2E,0x02,0x9F,0xFE,0xEE,0x85,0xA8,0x85,0xF7,0x2C,
+    0x37,0x22,0xD4,0xAB,0xC4,0x34,0x00,0xB8,0x4E,0x03,0xC8,0x20,0x44,0xB2,0xC0,0xD8,
+    0xC3,0xC0,0x30,0x1A,0x58,0x01,0x88,0x1E,0xD8,0xAB,0xDB,0x34,0x4E,0xDB,0xCA,0xE0,
+    0x48,0x11,0x88,0xA6,0xB5,0x01,0xE4,0x8B,0x48,0x01,0x80,0x16,0x18,0x69,0x10,0xD8,
+    0x00,0x57,0x18,0x79,0x10,0xD8,0x00,0x3F,0xC0,0x0B,0x18,0xCA,0x41,0x33,0x01,0x8B,
+    0xA4,0x41,0xE0,0x00,0xE6,0x90,0x94,0x95,0x17,0x52,0x9D,0xAE,0xE8,0x85,0x4F,0x19,
+    0x8F,0xE6,0x07,0xF9,0x18,0x02,0x06,0x77,0x18,0x00,0x04,0x42,0x00,0x01,0x00,0x42,
+    0x00,0x80,0x00,0x01,0x50,0x20,0x02,0x00,0x68,0xA0,0x00,0x00,0x40,0x0B,0x01,0x43,
+    0xA4,0x41,0xE0,0x90,0x95,0x95,0x16,0x52,0x9F,0xC6,0xEF,0x85,0xAC,0xFD,0x87,0x25,
+    0x30,0x6A,0x30,0xB2,0x31,0xE2,0x48,0x3B,0x41,0xC2,0xC7,0x40,0x87,0x1C,0xD0,0x83,
+    0x80,0x14,0xC0,0x24,0x40,0x01,0x88,0x16,0xD8,0x83,0x83,0x14,0x49,0x3B,0x33,0x1A,
+    0x10,0x19,0x08,0x01,0xB0,0x04,0xC0,0x24,0xBA,0xFF,0xFF,0x8F,0x30,0x1A,0x11,0x19,
+    0x08,0x09,0xB0,0x04,0xC7,0x24,0xB8,0xFF,0xF9,0x57,0x32,0x5A,0x10,0x01,0x08,0x11,
+    0xB0,0x04,0xA0,0x0C,0xC7,0x24,0xB8,0xFF,0xF9,0xCF,0x34,0x5A,0x10,0x09,0x08,0x11,
+    0xB0,0x04,0xA0,0x0C,0xC7,0x24,0xB8,0xFF,0xF9,0x8F,0x34,0x82,0x80,0x01,0xE6,0x0B,
+    0x32,0x48,0x72,0x48,0xA7,0x0B,0x50,0x12,0x0C,0xC1,0x07,0x8B,0x47,0x8B,0x18,0xF9,
+    0x98,0x19,0x18,0xCA,0x01,0x8B,0x30,0x8A,0x88,0x01,0x05,0x07,0xF8,0x85,0xE1,0x1B,
+    0x48,0xD8,0x8E,0x16,0xE8,0x5B,0x5E,0x31,0x8E,0xC6,0xEF,0x43,0x40,0x31,0x88,0x1E,
+    0x40,0x83,0x08,0x81,0x18,0x42,0x00,0x83,0x00,0x01,0x00,0x3F,0x03,0x08,0xC4,0xCA,
+    0x40,0x4B,0xDA,0x1C,0x04,0x10,0x92,0xCA,0xE6,0x00,0x92,0x05,0xCC,0x14,0x10,0x42,
+    0x99,0xA6,0x37,0x5A,0x10,0x01,0x08,0x19,0xB0,0x04,0xA0,0x0C,0xC7,0x24,0xB8,0xFF,
+    0xF9,0xEF,0x32,0x5A,0x10,0x09,0x08,0x19,0xB0,0x04,0xA0,0x0C,0xC7,0x24,0xB8,0xFF,
+    0xF9,0xAF,0x32,0x1A,0x10,0x29,0x08,0x09,0xB0,0x04,0xC0,0x24,0xBF,0xFF,0xF7,0xBF,
+    0x30,0x1A,0x11,0x29,0x08,0x01,0xB0,0x04,0xC7,0x24,0xB8,0xFF,0xF0,0x87,0x87,0x45,
+    0xEF,0x85,0xAF,0xFD,0x85,0x35,0x4C,0xEA,0xC2,0x3C,0xC0,0x28,0x48,0xDA,0xC5,0x3C,
+    0x8A,0x81,0xC5,0x20,0xC6,0x44,0xD0,0x33,0xC0,0x34,0x40,0x01,0x88,0x0E,0xC0,0x44,
+    0xD8,0x33,0xC2,0x44,0x80,0x01,0x84,0x2C,0xE0,0x03,0x46,0x01,0x89,0xE6,0x0B,0xF9,
+    0x01,0x17,0xA0,0x0A,0xE4,0x00,0x92,0x05,0x17,0x82,0x9D,0xD6,0x38,0x01,0xBC,0x24,
+    0xB9,0x14,0x00,0x57,0x48,0x72,0xC5,0x24,0x08,0x43,0x46,0x35,0x47,0x7E,0xB8,0xFF,
+    0xFD,0xEF,0x4A,0x62,0x18,0x01,0x00,0x01,0x02,0x67,0x00,0x10,0x35,0xA2,0xF4,0x52,
+    0x10,0xD2,0xEC,0x0E,0x37,0x1A,0xD3,0x5A,0x10,0x52,0xD4,0x0E,0x33,0x0A,0xD3,0x4A,
+    0xE4,0x00,0x92,0x05,0x17,0x82,0x9D,0x86,0x48,0x81,0x92,0x2E,0x78,0x41,0x80,0x76,
+    0xC5,0x24,0x18,0xC2,0x80,0x24,0x00,0x27,0xC4,0x14,0x40,0x01,0x88,0x0E,0xB8,0x14,
+    0x03,0x2F,0x40,0xF8,0xC1,0x24,0x18,0xC2,0x80,0x24,0x78,0x01,0x88,0x96,0x06,0x01,
+    0x08,0x01,0x00,0x17,0xA2,0x0A,0xE1,0x00,0x95,0x05,0x14,0x82,0x98,0xD6,0xC7,0x14,
+    0x80,0x1C,0x38,0x01,0x00,0x27,0xC0,0x14,0x18,0x3A,0xC0,0x14,0x40,0x00,0x82,0x14,
+    0xC0,0x14,0x40,0x01,0x88,0xBE,0xC7,0x2C,0x59,0x04,0xC6,0x41,0x90,0x05,0x80,0x0C,
+    0x00,0x17,0xC1,0x1C,0x1C,0x3A,0x44,0x52,0x08,0x3B,0x46,0x35,0x47,0x7E,0xB8,0xFF,
+    0xFC,0xAF,0x58,0x42,0x08,0x01,0x00,0x01,0x02,0x67,0x00,0x10,0x35,0xA2,0xF4,0x52,
+    0x10,0x52,0xEC,0x0E,0x33,0x0A,0xD3,0x4A,0x10,0xD2,0xD4,0x0E,0x35,0x12,0xD3,0x5A,
+    0xE4,0x00,0x92,0x05,0x17,0x82,0x9D,0x86,0xC4,0x0C,0x10,0x0A,0xE8,0x0E,0xC0,0x1C,
+    0x18,0x3A,0xC0,0x1C,0x40,0x00,0x82,0x1C,0xC0,0x1C,0x40,0x01,0x88,0xCE,0x7E,0x01,
+    0x88,0x06,0x38,0x09,0xC6,0x2C,0xA0,0x3B,0xC6,0x2C,0xE0,0x0B,0x46,0xA2,0x0B,0x0B,
+    0xC6,0x2C,0xE0,0x03,0x3F,0x09,0x10,0xF8,0x00,0x00,0x86,0x24,0x03,0x07,0x40,0xF8,
+    0xC1,0x24,0x10,0xC2,0x81,0xDE,0x7F,0x01,0xC9,0x06,0x38,0x01,0x00,0x01,0x08,0x01,
+    0x01,0x17,0xA0,0x0A,0xE4,0x00,0x92,0x05,0x17,0x82,0x9D,0xD6,0x00,0x01,0x80,0x04,
+    0x78,0x01,0x88,0x1E,0xC2,0x04,0xE0,0x00,0x90,0x05,0x86,0x04,0x00,0x01,0x00,0x57,
+    0xE1,0x0A,0x19,0xCA,0x91,0x4D,0xA6,0x0A,0xD4,0x24,0x10,0x8A,0xCD,0x0E,0x18,0xCA,
+    0xA2,0x0A,0xE1,0x00,0x95,0x05,0x14,0x82,0x98,0x96,0x47,0x35,0x47,0x7E,0xB8,0xFF,
+    0xF0,0xEF,0x05,0x01,0x00,0x0F,0xD1,0x2C,0x03,0x08,0xD2,0x4A,0x5C,0x94,0xD6,0x48,
+    0x90,0x4D,0xD0,0x04,0x50,0x01,0x88,0x2E,0x48,0x21,0xEB,0xA6,0xE5,0x0A,0x19,0xCA,
+    0xA0,0x0A,0x01,0x87,0x48,0x91,0xE9,0x2E,0xE0,0x12,0x51,0x01,0x82,0x16,0xF0,0x90,
+    0xA0,0x12,0x01,0x47,0x16,0x89,0x19,0x92,0x10,0x8A,0xD4,0x26,0xE1,0x0A,0x49,0xF9,
+    0x92,0x0E,0xE0,0x48,0xA2,0x0A,0xE1,0x00,0x95,0x05,0x14,0x82,0x9B,0xDE,0x46,0xF8,
+    0xC0,0x04,0x40,0x21,0xC8,0xE6,0x85,0x55,0xEF,0x85,0xAF,0xBD,0x80,0xA5,0xCC,0xB4,
+    0xD2,0x6B,0x56,0x12,0xCC,0xAC,0xC0,0x48,0x58,0x02,0xD2,0xAC,0x9E,0x01,0xC1,0x90,
+    0x60,0xF2,0xD9,0xAC,0xA0,0x01,0xCA,0xE0,0x70,0xE2,0xD9,0xAC,0xB4,0x01,0xCB,0xD8,
+    0x99,0x14,0x70,0xD2,0xDD,0xAC,0xB0,0x01,0xC8,0xD8,0x9C,0x0C,0x78,0x1D,0x40,0x01,
+    0x88,0x0E,0xC0,0xB4,0xD8,0x2B,0xC2,0xB4,0xE0,0x03,0x44,0x29,0xC0,0x56,0x00,0x01,
+    0x02,0x37,0x00,0x18,0xD6,0x72,0x96,0xB2,0xD7,0x72,0x96,0x32,0xE6,0x00,0x92,0x05,
+    0x17,0x42,0x9D,0xB6,0x04,0x01,0x30,0x22,0x18,0x01,0x00,0xCF,0x01,0xC0,0xD2,0x32,
+    0x30,0x32,0xB4,0x9C,0x30,0x01,0x00,0x01,0xF8,0xB2,0xF4,0x42,0xC3,0xB0,0x81,0xB0,
+    0x31,0x82,0x93,0x32,0x40,0x74,0x00,0xB4,0xD0,0x02,0xF1,0x9C,0xD9,0x00,0x04,0xC4,
+    0x20,0x02,0x93,0x05,0x34,0x22,0xE4,0x90,0xE5,0x48,0xE4,0xF8,0xE6,0xD8,0x92,0xDD,
+    0x17,0x5A,0x9D,0x1E,0x71,0x1D,0x30,0x4A,0x30,0x02,0x83,0x0F,0xD0,0x3F,0x95,0x0D,
+    0x10,0x01,0x00,0xCF,0x01,0x01,0xF0,0x82,0xE0,0xB0,0x45,0x01,0xE8,0x2E,0x48,0x01,
+    0xEC,0x1E,0x10,0x42,0xE8,0x56,0x30,0x42,0x00,0x47,0x40,0x01,0xD0,0x2E,0x48,0x01,
+    0xD4,0x1E,0x10,0x42,0xD0,0x16,0x30,0x42,0x00,0x07,0x00,0x01,0x07,0x98,0xD2,0x3A,
+    0xD7,0xC0,0x91,0x02,0xE6,0x90,0x92,0x95,0x17,0x52,0x9D,0x1E,0xC4,0xB4,0xE0,0x03,
+    0x41,0x29,0xC0,0x26,0x00,0x01,0x10,0x01,0x02,0x3F,0x00,0x08,0xF3,0x14,0xD0,0x1A,
+    0x90,0x9A,0xCB,0x0C,0xA2,0x52,0xE0,0x00,0x95,0x05,0x16,0x42,0x98,0xAE,0x07,0x01,
+    0x12,0x29,0x0B,0x90,0x1A,0x39,0x0B,0xD8,0x00,0x7F,0x00,0x00,0x60,0x20,0x03,0x00,
+    0x00,0x01,0x00,0x42,0xF8,0xFF,0x07,0x00,0xE2,0xAC,0x00,0x08,0xCC,0x48,0xC0,0x60,
+    0x46,0x24,0xC5,0x48,0x02,0x64,0xE4,0x00,0x95,0x05,0x16,0x42,0x98,0xA6,0x87,0xBD,
+    0xEF,0x85,0xAF,0xE5,0xD0,0x9B,0x9E,0x0C,0x5E,0xFA,0xC7,0x58,0x37,0xF2,0x5C,0xF2,
+    0x9E,0x01,0xC1,0x68,0x5B,0xE2,0x9F,0x01,0xC4,0x58,0x36,0xE2,0x5A,0xD2,0xDF,0x01,
+    0xC0,0x48,0x8E,0x04,0x40,0x01,0x88,0x0E,0xD8,0x83,0x82,0x0C,0x00,0x01,0x30,0x9A,
+    0x9A,0x01,0x14,0xC3,0x11,0xC3,0x04,0x9F,0x03,0x20,0x32,0x8A,0xD9,0x4A,0xD8,0x72,
+    0xD8,0x48,0x94,0x75,0xC8,0x04,0x98,0x72,0x08,0x01,0x38,0xB1,0xBD,0xFA,0x16,0xBA,
+    0xE8,0x36,0x08,0x09,0x3A,0x09,0x50,0xF3,0x01,0x3A,0x1C,0xF2,0x10,0xF3,0x02,0x47,
+    0xED,0xFB,0x16,0xBA,0xD0,0x2E,0x08,0x09,0x3C,0x09,0x50,0xF3,0x01,0x3A,0x1C,0xF2,
+    0x10,0xF3,0x4C,0x01,0x8D,0x96,0x08,0xC1,0xE0,0x4A,0x4C,0x01,0x89,0x76,0xF8,0x7A,
+    0x13,0xF0,0x31,0x0A,0xE4,0x4A,0xC8,0x70,0x30,0x8A,0xFB,0x4A,0x04,0x48,0xCC,0x70,
+    0x03,0xC8,0xD5,0x88,0x91,0x70,0x98,0x72,0x31,0x22,0xA3,0x0A,0xE6,0x00,0x92,0x05,
+    0xCC,0x0C,0x10,0x42,0x9F,0x46,0xEE,0xE5,0xAC,0xBD,0x87,0x65,0x30,0x62,0x30,0xB2,
+    0x40,0xB2,0x46,0x03,0x90,0x05,0x84,0x5C,0x40,0xAA,0x46,0x0B,0x90,0x4D,0x8C,0x54,
+    0x44,0x0B,0x92,0x4D,0x8E,0x4C,0x40,0x0B,0x90,0x4D,0x8C,0x44,0x4C,0x0B,0x90,0x4D,
+    0x8A,0x3C,0x48,0x0B,0x90,0x4D,0x8C,0x34,0x4C,0x0B,0x94,0x4D,0x8E,0x2C,0x50,0x0B,
+    0x90,0x4D,0x8C,0x24,0x4C,0x0B,0x96,0x4D,0x8A,0x1C,0x58,0x0B,0x90,0x4D,0x8C,0x14,
+    0x5C,0x0B,0x94,0x4D,0x88,0x0C,0x08,0x21,0x0C,0x0B,0x08,0x0B,0xE6,0x0B,0x53,0x2A,
+    0x1E,0x8A,0x10,0x0B,0x08,0x01,0xDD,0x4A,0x01,0x0B,0x36,0x2A,0xA9,0x01,0xEC,0x4B,
+    0x1B,0x0B,0xEA,0x4B,0x1F,0x0B,0xE4,0x4B,0x0D,0x0B,0xE6,0x43,0x40,0x01,0x80,0x3E,
+    0x45,0xDA,0x4D,0xEA,0x00,0x0B,0x0A,0xC9,0x00,0x0B,0x08,0x09,0x08,0x0B,0x02,0x3F,
+    0x4D,0xCA,0x45,0xBA,0xCA,0xE1,0x00,0x0B,0x08,0x89,0x00,0x0B,0x0A,0x41,0x08,0x0B,
+    0xE0,0x03,0x45,0x09,0x8B,0xB6,0xD8,0x03,0x80,0x04,0x38,0x01,0x00,0x3F,0x08,0x09,
+    0x31,0x9A,0x31,0xD2,0x37,0x42,0xB8,0xFF,0xE3,0x77,0xE0,0xF8,0x90,0xFD,0xC7,0x04,
+    0x17,0x3A,0x9C,0xA6,0x31,0x9A,0x31,0x12,0x00,0x09,0xC8,0x64,0xBD,0xFF,0xEF,0xCF,
+    0xF5,0x43,0xAF,0x03,0x31,0x9A,0x31,0x12,0x00,0x09,0xC8,0x64,0xB9,0xFF,0xEF,0xB7,
+    0x30,0x12,0x01,0x09,0xCF,0x64,0xB8,0xFF,0xF1,0x07,0x35,0x12,0x00,0x09,0xC8,0x64,
+    0xB9,0xFF,0xFF,0xBF,0x48,0xEA,0xC4,0x5C,0x04,0x43,0x40,0xEA,0xC8,0x54,0x00,0x0B,
+    0xCA,0x4C,0x00,0x0B,0xCE,0x44,0x00,0x0B,0xC8,0x3C,0x08,0x0B,0xCA,0x34,0x08,0x0B,
+    0xCC,0x2C,0x08,0x0B,0xCE,0x24,0x10,0x0B,0xCE,0x1C,0x08,0x0B,0xCA,0x14,0x18,0x0B,
+    0xCC,0x0C,0x18,0x0B,0xE6,0x43,0x31,0x00,0xAD,0x66,0xE9,0x03,0xF4,0x4B,0x15,0x42,
+    0x89,0x46,0x31,0x02,0x82,0x01,0xE1,0x13,0x50,0x11,0x88,0x46,0xE8,0x13,0x51,0x51,
+    0x88,0x16,0x10,0x01,0xA0,0x13,0x02,0x9F,0xE1,0x90,0xAA,0x13,0x05,0x87,0x50,0x53,
+    0x50,0x01,0x88,0x2E,0x50,0x53,0x53,0x01,0x89,0x16,0xE8,0x13,0x50,0x01,0x89,0x2E,
+    0xF5,0x53,0xAF,0x13,0x13,0x09,0xA8,0x13,0xA0,0x13,0x02,0x0F,0xE1,0x90,0xAA,0x13,
+    0xEC,0x03,0x15,0x42,0x88,0x36,0x08,0x01,0x30,0x1A,0xB1,0x04,0x30,0x42,0xD0,0x64,
+    0xBF,0xFF,0xDF,0xFF,0x31,0x12,0x31,0x8A,0x07,0x11,0xB8,0xFF,0xD8,0x4F,0x80,0x7D,
+    0xEF,0x85,0xAF,0x85,0x4E,0xA3,0xD0,0xEB,0x33,0x70,0x72,0xB0,0x4F,0x78,0x0E,0xF8,
+    0x48,0xB2,0xC3,0x4B,0x48,0x09,0x88,0x0E,0x54,0xA3,0xD8,0xEB,0x0F,0x01,0x18,0xF9,
+    0x01,0x6F,0x40,0x13,0x47,0x93,0x02,0x92,0x90,0x95,0x00,0x14,0x78,0x01,0x88,0x16,
+    0x50,0xF9,0xEF,0x06,0x01,0x1C,0xE8,0x20,0xE2,0x00,0xE4,0x48,0x95,0x4D,0x16,0x4A,
+    0x9F,0x7E,0xEF,0x85,0xA8,0xC5,0x33,0x2A,0x33,0xB2,0x60,0x22,0x44,0x03,0x11,0x01,
+    0x19,0x82,0x04,0x03,0x40,0x03,0x11,0x81,0x19,0x82,0x00,0x03,0x40,0x03,0x11,0x09,
+    0x19,0x82,0x00,0x03,0xE7,0x53,0x03,0xF9,0x80,0x81,0x18,0x12,0x46,0xE2,0x12,0x13,
+    0x13,0x99,0x00,0x13,0x14,0x41,0x00,0x13,0x12,0x91,0xEC,0x92,0x50,0x01,0x80,0x16,
+    0x10,0xC9,0x00,0x13,0x00,0x0F,0x10,0x89,0x00,0x13,0x30,0x52,0x30,0x5A,0x09,0x01,
+    0x00,0x09,0xB0,0x04,0xBD,0xFF,0xDF,0x6F,0x31,0x52,0x31,0x8A,0x07,0x11,0xB8,0xFF,
+    0xD3,0xBF,0x45,0x03,0x3F,0x00,0xAA,0xE6,0xEF,0xC5,0xAB,0x9D,0x80,0x8D,0xCC,0x94,
+    0xC8,0x4B,0x8A,0x84,0xE2,0x94,0xA0,0x01,0xC9,0x1B,0xD7,0x0B,0x88,0x04,0xC8,0x94,
+    0xD0,0x6B,0x36,0x0A,0x8C,0x81,0x30,0x62,0xC8,0x94,0x30,0x01,0xE0,0x4B,0x4C,0x09,
+    0x88,0x56,0x08,0x01,0x02,0x27,0xC0,0x38,0xA2,0xF3,0xA1,0x32,0xE2,0x48,0x92,0x4D,
+    0xD6,0x94,0xD0,0x93,0x17,0x52,0xE4,0xB6,0x52,0x0A,0x02,0xB3,0x06,0xB3,0x04,0xB3,
+    0x0E,0x01,0x18,0x4A,0x00,0x8B,0xC8,0x94,0xD0,0x4B,0xB6,0x8B,0x09,0x01,0x50,0xE2,
+    0x34,0x01,0x00,0x78,0xC1,0xF8,0x0D,0xF3,0xC2,0x90,0xB2,0xB3,0xE2,0x48,0x92,0x4D,
+    0x4F,0x11,0xD8,0xA6,0xCC,0x94,0xE0,0x4B,0x4B,0x29,0xC8,0x7E,0x00,0x48,0xC5,0x48,
+    0x04,0x50,0xC3,0x70,0x55,0x9A,0xC1,0xB0,0xB4,0x14,0xC0,0x48,0x8B,0x0C,0x30,0x12,
+    0x31,0x32,0xB0,0x01,0x08,0x01,0x88,0x34,0x48,0x7A,0x89,0x6C,0x8C,0x64,0x30,0x32,
+    0x04,0x01,0x30,0x22,0x00,0x27,0xCA,0x14,0x00,0x01,0xF0,0x42,0xF8,0x0C,0x08,0x01,
+    0xF0,0xCA,0x33,0x7A,0xD0,0x08,0x92,0x4D,0x48,0xF9,0xEF,0x06,0x0E,0xF9,0xCF,0x38,
+    0x87,0xF8,0x7B,0xF9,0xEF,0x06,0x38,0xF9,0x30,0x82,0x83,0x3B,0xE4,0x00,0x32,0x32,
+    0xC4,0xBB,0x10,0xFA,0x9C,0x46,0x10,0xCA,0xD9,0x36,0x40,0x84,0xDA,0x48,0xC6,0x00,
+    0x91,0x05,0x00,0x84,0x80,0x08,0x04,0x37,0x10,0xCA,0xDC,0x16,0x01,0x78,0x04,0xBC,
+    0x00,0x0F,0x38,0x01,0x04,0xBC,0x11,0xCA,0xD8,0x0E,0x38,0x09,0xBB,0x34,0x40,0x78,
+    0x28,0x3A,0xEB,0x26,0xFC,0x6C,0x10,0x7A,0xE8,0x2E,0x88,0x6C,0x00,0x1F,0xF8,0x64,
+    0x10,0x7A,0xEC,0x06,0x88,0x64,0x80,0x8B,0xE5,0x90,0xE2,0xB0,0xC4,0x14,0xE0,0x00,
+    0x80,0x14,0xC0,0x0C,0xE0,0x00,0x84,0x0C,0x32,0x02,0xE3,0x00,0x94,0x05,0x32,0x22,
+    0x2D,0x62,0xDD,0xC6,0xC0,0x34,0x00,0x97,0x60,0x20,0x05,0x00,0x18,0x00,0x04,0x42,
+    0x00,0x01,0x00,0x42,0x10,0x78,0x00,0x00,0x88,0x60,0x05,0x00,0x00,0x80,0x00,0x01,
+    0x80,0xC0,0x02,0x01,0x30,0x20,0x02,0x00,0x78,0xF8,0x07,0x00,0x00,0xCF,0x43,0x01,
+    0x80,0xBE,0x0B,0x01,0x00,0x01,0x80,0x5C,0xC6,0x04,0xC0,0x00,0x40,0x00,0x82,0x7C,
+    0xC2,0x04,0x30,0x00,0x70,0x00,0x80,0x74,0x04,0x01,0x30,0x22,0x80,0x2C,0x80,0x24,
+    0x82,0x1C,0xF0,0x90,0xF2,0x40,0x93,0x05,0x31,0x32,0x04,0xFF,0x32,0x02,0x03,0x00,
+    0x30,0x22,0xC4,0x2C,0x00,0x00,0x82,0x2C,0xC2,0x24,0x00,0x00,0x80,0x24,0xC0,0x1C,
+    0x00,0x00,0x82,0x1C,0x43,0x40,0x2B,0x82,0xE8,0x26,0xC0,0x83,0xF4,0x6C,0xD8,0x00,
+    0x80,0x83,0x00,0x1F,0xC0,0x83,0xF0,0x64,0xD8,0x00,0x84,0x83,0xC0,0x83,0x70,0x3D,
+    0x37,0xBA,0xAB,0x82,0xC4,0x83,0x10,0xC2,0xDA,0xDE,0xE0,0x48,0x90,0x4D,0xF2,0x5C,
+    0xC1,0xB0,0x91,0xB5,0xB3,0x5C,0x30,0x32,0x39,0x09,0x18,0xF2,0x30,0xA2,0xF5,0x7C,
+    0x10,0x82,0xDD,0x76,0xF1,0x2C,0x18,0xF2,0xB0,0x2C,0xF0,0x04,0x10,0x82,0xDD,0x46,
+    0xF1,0x24,0x18,0xF2,0xB0,0x24,0xF0,0x74,0x10,0x82,0xDD,0x16,0xC1,0x1C,0x18,0xC2,
+    0x82,0x1C,0xF0,0x90,0x32,0x82,0xF3,0x00,0x94,0x05,0x32,0x32,0x30,0x82,0x43,0x01,
+    0xD7,0xE6,0x45,0xFA,0xB3,0x0B,0xD2,0x50,0xB3,0x13,0x30,0x12,0x18,0x92,0x06,0x13,
+    0x30,0x12,0x0B,0x13,0xD2,0x2C,0x00,0x13,0xD4,0x24,0x00,0x13,0xD6,0x1C,0x00,0x13,
+    0x31,0x01,0x00,0xAF,0xC0,0x5C,0x80,0x07,0xF8,0xCF,0x96,0x05,0x87,0x5C,0x48,0xA2,
+    0x02,0x80,0xC5,0x00,0x48,0x13,0x40,0x3D,0x08,0x01,0x18,0x01,0x34,0xF2,0x34,0xE2,
+    0x01,0xD7,0x00,0xE7,0x38,0x98,0x86,0x7E,0xC0,0x1B,0xF8,0x5C,0xD8,0xD8,0x96,0xDD,
+    0x58,0x01,0xE8,0x36,0x83,0x1B,0x20,0x9A,0x94,0xDD,0x36,0xF2,0xE2,0x48,0x92,0x4D,
+    0x00,0x27,0x18,0x01,0x80,0x1B,0x00,0x0F,0x18,0x01,0x80,0x1B,0x42,0x90,0xE2,0x00,
+    0x32,0x1A,0xE3,0xD8,0x94,0xDD,0x32,0xE2,0x2F,0x62,0xDD,0x1E,0xE3,0xB0,0x93,0xB5,
+    0x30,0x82,0x83,0x5C,0x45,0xF2,0x06,0x98,0xC0,0xD8,0x08,0xD3,0xCA,0x00,0xB4,0x0B,
+    0x48,0x21,0xD8,0x0E,0x76,0x09,0xD8,0x2E,0x06,0x01,0x50,0xCA,0x04,0x08,0xC4,0x58,
+    0xE4,0x08,0x02,0x70,0xC0,0xB0,0x4D,0xEB,0x4D,0xB3,0x19,0xAA,0x08,0xEB,0xC0,0x80,
+    0xF4,0x1B,0xF2,0x2B,0xDA,0xD8,0xB2,0x1B,0x90,0x45,0x42,0x09,0xD8,0x76,0x07,0x09,
+    0x9E,0x03,0x43,0x7A,0x0E,0x19,0x40,0x13,0x50,0x01,0x80,0x16,0x03,0x29,0x98,0x0B,
+    0x04,0xF7,0x40,0x13,0x50,0x01,0x80,0x16,0x03,0x21,0x98,0x0B,0x02,0xC7,0x40,0x0B,
+    0x48,0x01,0x80,0x1E,0x00,0x19,0x08,0x11,0x98,0x0B,0x03,0x8F,0x48,0x03,0x40,0x01,
+    0x88,0x26,0xC0,0x94,0x82,0x01,0xF5,0x03,0x40,0x51,0x98,0x0E,0x00,0x11,0x00,0x3F,
+    0xC1,0x94,0x80,0x01,0xD8,0x03,0x44,0x01,0x80,0x0E,0x00,0x11,0x00,0x07,0x00,0x09,
+    0xDC,0x0B,0xE3,0x50,0x9B,0x13,0xD5,0x13,0x38,0x90,0xA2,0x0E,0xF3,0x48,0x9A,0x0B,
+    0xE0,0x0B,0x11,0x29,0x10,0x0A,0x94,0x0E,0x98,0x13,0x07,0xEF,0x10,0x0A,0xCC,0x46,
+    0x40,0x09,0x88,0x16,0x0F,0x81,0x9F,0x0B,0x00,0xB7,0xD0,0x48,0x07,0x52,0x9C,0x13,
+    0x00,0x97,0x40,0x19,0xC8,0x0E,0x08,0x19,0x02,0x07,0x90,0x0D,0xD8,0x13,0x57,0x01,
+    0x82,0x16,0xF0,0x90,0x98,0x13,0x07,0x3F,0xD2,0x94,0xF0,0x48,0xCA,0x93,0x1C,0x52,
+    0xCA,0x84,0xC0,0x88,0xD0,0x94,0x88,0x8B,0xA0,0x03,0x81,0x9D,0xEF,0x85,0xAF,0xBD,
+    0x80,0x6D,0x34,0x6A,0xD1,0x63,0x37,0x42,0x80,0x01,0x82,0x64,0xC8,0x03,0x84,0x3C,
+    0xC2,0x64,0xD0,0x03,0x30,0x00,0xA8,0x1E,0x02,0x91,0xEC,0x02,0x40,0x01,0x80,0xA6,
+    0xC5,0x6C,0x00,0x08,0xC3,0x40,0x00,0x08,0x52,0xD2,0xC4,0x08,0xC4,0x48,0xC4,0x10,
+    0x00,0x01,0x18,0x01,0x00,0x2F,0x00,0x5C,0x04,0x9C,0xE0,0x48,0xE2,0x90,0xE4,0x00,
+    0x95,0x05,0x12,0x02,0xD8,0xBE,0x87,0x85,0xE9,0x85,0x07,0x89,0xCC,0x6C,0x08,0x00,
+    0xC4,0x40,0x70,0x8A,0xCF,0x03,0x08,0x83,0xD0,0x7C,0x90,0x04,0x30,0x5A,0x09,0x01,
+    0x00,0x11,0xD0,0x6C,0xBD,0xFF,0xCF,0xAF,0x42,0x5A,0x84,0x01,0x43,0x0B,0x30,0x5A,
+    0x09,0xCC,0x5C,0x8B,0x0B,0xCC,0x5E,0x8B,0x15,0xCC,0x58,0x8B,0x17,0xCC,0x42,0x8B,
+    0x14,0xCC,0x4C,0x32,0x46,0x53,0x10,0xD4,0x48,0x93,0x1F,0xD4,0x17,0x89,0x00,0x93,
+    0x13,0x19,0x18,0x93,0x40,0x53,0x18,0x11,0x18,0xD2,0x04,0x53,0x40,0x0B,0x18,0xCA,
+    0x01,0x0B,0x30,0x42,0xE1,0x4B,0x85,0x01,0x80,0x5C,0x48,0x09,0x89,0x5E,0x6A,0x44,
+    0x81,0x14,0x30,0x8A,0x5E,0x43,0x94,0x35,0xB0,0x0C,0x00,0x01,0x80,0x04,0xD0,0x6C,
+    0x4F,0xA2,0x03,0x00,0xC2,0x00,0xC4,0x00,0x83,0x54,0x40,0x9A,0x18,0x33,0x0A,0x01,
+    0x37,0x42,0xB9,0xFF,0xC0,0xBF,0xFA,0x54,0xC1,0x64,0x30,0x5A,0xC9,0x0B,0x32,0xC2,
+    0xD7,0x7C,0xB8,0xFF,0xEB,0xF7,0x4B,0x72,0x10,0x01,0x00,0x01,0x02,0x67,0x00,0x18,
+    0x37,0xE2,0xF4,0xDA,0x10,0x5A,0xD4,0x0E,0x33,0x0A,0xD3,0xCA,0x10,0x9A,0xEC,0x0E,
+    0x35,0x12,0xD3,0xD2,0xE2,0x00,0x92,0x05,0x17,0x02,0xDD,0x86,0xC4,0x14,0xE0,0x00,
+    0x10,0x0A,0x9C,0x36,0xC0,0x04,0x40,0x01,0x8B,0x9E,0x40,0x80,0x40,0x08,0xC2,0x70,
+    0x00,0x3F,0xC0,0x14,0xF4,0x00,0x14,0x12,0xE0,0x5E,0x00,0x09,0x83,0x04,0xE0,0xB0,
+    0x90,0xB5,0x77,0x01,0x80,0x16,0xC0,0x0C,0x16,0x32,0x9C,0x36,0x70,0x01,0x88,0x06,
+    0x30,0x09,0xC0,0x5C,0x88,0x33,0xC0,0x5C,0xCA,0x0B,0x40,0x9A,0x18,0x0B,0x32,0x01,
+    0x35,0x42,0x81,0x01,0x81,0x4C,0x80,0x01,0x83,0x44,0x00,0x37,0xC4,0x3C,0x10,0x32,
+    0xD0,0x6E,0xC0,0x44,0xE0,0x03,0xC8,0x44,0x32,0x00,0x72,0x00,0xA2,0x43,0x40,0x52,
+    0x0C,0x41,0x00,0x0B,0x47,0x0B,0x10,0xF9,0x90,0x21,0x18,0x8A,0x00,0x0B,0xC8,0x6C,
+    0x02,0x00,0xC5,0x08,0x02,0x00,0x53,0x1A,0xC4,0x40,0xC0,0x00,0xC0,0x48,0x74,0x01,
+    0x88,0x66,0x10,0x01,0x78,0x12,0x02,0x37,0x18,0x01,0x00,0x1C,0x04,0x7C,0xE0,0x00,
+    0xE2,0x48,0xE4,0x90,0x95,0x95,0x12,0x12,0xD9,0xB6,0x07,0x07,0xDF,0x6C,0x00,0x10,
+    0xC1,0x90,0x5E,0xC2,0xC4,0x90,0x36,0xA2,0x18,0x01,0x00,0x9F,0x30,0x3A,0x13,0x01,
+    0xF0,0xD2,0x3D,0x01,0xFC,0x3A,0x16,0xBA,0xD0,0x06,0x00,0x14,0x3E,0x01,0xF8,0x7A,
+    0x10,0xBA,0xEC,0x06,0x04,0x54,0xE0,0x00,0xE3,0x48,0x34,0x12,0xE4,0x90,0x34,0xA2,
+    0xE2,0xD8,0x92,0xDD,0x17,0x1A,0xDD,0x4E,0xC4,0x3C,0x10,0x32,0x80,0x06,0xC1,0x44,
+    0xE6,0x03,0x48,0x00,0x88,0x1E,0xC0,0x4C,0xE8,0x03,0x46,0x31,0x88,0xBE,0xC7,0x4C,
+    0xE8,0x03,0x46,0x31,0x89,0x26,0x40,0x22,0x40,0x0B,0x10,0x81,0x18,0x8A,0x00,0x0B,
+    0xCF,0x6C,0x00,0x00,0xC0,0x00,0x4A,0xFA,0xC0,0x00,0xCA,0x64,0x32,0x5A,0xC9,0x4B,
+    0xD7,0x7C,0xB8,0xFF,0xE3,0xF7,0xE6,0xB0,0x90,0xB5,0xC3,0x3C,0x14,0x32,0xEC,0xAE,
+    0x43,0xCA,0x30,0x5A,0x4A,0xCC,0x84,0x01,0x00,0x0B,0x40,0xBA,0x48,0xCC,0x1E,0x0B,
+    0x52,0xCC,0x18,0x0B,0x54,0xCC,0x1A,0x0B,0x56,0xCC,0x04,0x0B,0x4E,0x9A,0x50,0xD4,
+    0x00,0x53,0x58,0xCC,0x0F,0x0B,0x36,0xB7,0xAC,0xFD,0x87,0xDD,0x30,0x72,0x00,0x01,
+    0x80,0x8C,0x80,0x84,0xC6,0xF4,0xD0,0x03,0x80,0x7C,0xC0,0xF4,0xDA,0x03,0xF2,0x00,
+    0x90,0x05,0x86,0x74,0x00,0x01,0x80,0x6C,0x80,0x64,0x80,0x5C,0xC4,0xF4,0xC8,0x03,
+    0x00,0x00,0x82,0xB4,0xC5,0xF4,0x08,0xA1,0xF0,0x0A,0x8A,0xAC,0xC0,0xF4,0x00,0x4F,
+    0x80,0xC0,0x02,0x01,0x30,0x20,0x02,0x00,0x00,0x01,0x00,0x42,0x18,0x00,0x04,0x42,
+    0xF8,0xFB,0x07,0x00,0xE4,0x0B,0x04,0x89,0xD4,0xEC,0x00,0x00,0xC0,0x98,0x48,0x09,
+    0x88,0x76,0xC0,0x7C,0x1E,0x82,0xC3,0x08,0xD0,0xDC,0x00,0x01,0x00,0x2F,0x40,0xA4,
+    0x82,0x63,0xE0,0x48,0xE2,0x90,0xE4,0x00,0x90,0x05,0xE2,0x7C,0x17,0x02,0xDD,0xB6,
+    0x21,0x01,0x30,0x2A,0xA0,0xA4,0xC0,0xDC,0x80,0x0C,0x40,0x1D,0x30,0x32,0xCC,0x7C,
+    0x32,0x82,0x19,0x42,0x86,0xD4,0xC0,0x00,0x30,0x22,0x84,0xCC,0x40,0xFA,0x47,0x0B,
+    0x48,0x13,0x00,0x01,0x00,0x17,0xD9,0x0C,0x30,0x3A,0x43,0xDC,0xC6,0xFB,0xD9,0xD8,
+    0x93,0xDD,0x30,0xBA,0x06,0xDC,0x39,0x78,0x80,0x26,0xF8,0xA4,0xC8,0xD8,0x96,0xDD,
+    0x98,0xA4,0x00,0x37,0x38,0xB8,0x86,0x16,0xC8,0xD8,0x90,0xE5,0x02,0x0F,0xC8,0xD8,
+    0x93,0xED,0x30,0x9A,0xE4,0xD8,0x34,0xF2,0xDC,0x0C,0xE0,0xD8,0x9B,0x0C,0x30,0x1A,
+    0xE4,0xD8,0x32,0xE2,0x42,0x48,0x42,0x90,0xE2,0x00,0x92,0x05,0xDC,0x7C,0x10,0xC2,
+    0xDF,0xCE,0x7E,0x52,0xF0,0xCB,0x49,0x01,0xE8,0x26,0xC0,0xA4,0x84,0x07,0xE8,0x77,
+    0x90,0x05,0x80,0xA4,0xF0,0xCB,0x4B,0x01,0xE8,0x3E,0x48,0x09,0x8B,0x0E,0x80,0x20,
+    0x01,0x1F,0x30,0x02,0x84,0x07,0xE8,0x17,0x95,0x25,0xF0,0xCB,0x48,0x01,0xE8,0x3E,
+    0x48,0x09,0x88,0x0E,0x80,0x68,0x03,0x1F,0x30,0x42,0x81,0x07,0xE8,0xBF,0x93,0x2D,
+    0xC0,0xDC,0x48,0x1D,0x30,0x62,0xCC,0xCC,0x31,0x72,0x44,0xCB,0x30,0xD2,0x89,0x9C,
+    0x48,0x8B,0x88,0x94,0xFA,0xF4,0xB8,0x01,0xD6,0xCB,0x3B,0x48,0x82,0x5E,0x40,0x8B,
+    0x40,0x9B,0x9C,0x8C,0x40,0x93,0x96,0x84,0xD0,0xD3,0x95,0x6C,0xD0,0xD3,0x97,0x64,
+    0xD8,0xD3,0x91,0x5C,0x00,0x07,0x08,0x01,0xD8,0xEC,0xD0,0xD4,0x9E,0x21,0xC2,0x90,
+    0x90,0x14,0x10,0x01,0x94,0xBC,0x00,0x87,0xD6,0x9C,0x38,0x90,0x80,0x0E,0xD0,0xA4,
+    0x00,0x2F,0xD0,0x94,0x38,0x90,0x86,0x0E,0x30,0x12,0x01,0x07,0x30,0x52,0x51,0x01,
+    0xEB,0x6E,0x30,0x3A,0x1F,0x01,0xF0,0xDA,0x58,0x01,0xE8,0x46,0x10,0x9A,0xD4,0x06,
+    0x30,0xD2,0x40,0x1C,0xD0,0xD0,0x94,0x95,0x00,0x14,0x30,0xBA,0x03,0xB7,0x31,0x3A,
+    0x1F,0x01,0xF0,0xDA,0x59,0x01,0xD0,0x7E,0x50,0x01,0xD0,0x2E,0x10,0x9A,0xEC,0x06,
+    0x30,0xD2,0x40,0x1C,0xD0,0xD0,0x04,0x14,0x1E,0x01,0xF0,0x1A,0x36,0xFA,0x38,0x50,
+    0x83,0x26,0x31,0x92,0xC0,0x93,0x90,0xC4,0xD0,0x90,0x96,0x95,0xDE,0x84,0x38,0xD8,
+    0x80,0x3E,0xD8,0x5C,0x10,0xD2,0xEC,0xCE,0xD8,0x5C,0xD0,0xC4,0xD0,0x90,0x06,0x14,
+    0x00,0xA7,0xD8,0x8C,0x38,0xD8,0x86,0x3E,0xDC,0x64,0x10,0xD2,0xE8,0x76,0xD8,0x64,
+    0xD6,0xC4,0xD0,0x90,0x00,0x14,0x00,0x4F,0xDC,0x6C,0x10,0xD2,0xE8,0x36,0xD8,0x6C,
+    0xD6,0xC4,0xD0,0x90,0x00,0x14,0x00,0x0F,0x3E,0x01,0xF8,0x3A,0x43,0x14,0x30,0x9A,
+    0x80,0xD3,0xD0,0x14,0xC6,0x93,0xD8,0x90,0x90,0x95,0xD8,0xB4,0x10,0xD2,0xD4,0x16,
+    0xDC,0xAC,0x10,0xD2,0xE0,0xA6,0x70,0x01,0x81,0x3E,0xD0,0x24,0x38,0x09,0x40,0x9B,
+    0xF4,0x90,0x03,0xBA,0xD1,0x24,0x19,0xDA,0x00,0x9B,0xD0,0x74,0x10,0xB2,0x94,0x3E,
+    0xD0,0x24,0x39,0x09,0x43,0x9B,0xE0,0x90,0x01,0xBA,0xD4,0x24,0x18,0xDA,0x01,0x9B,
+    0xD2,0x14,0xE0,0x90,0x94,0x14,0xE0,0x00,0x32,0x92,0xE3,0x90,0x33,0xB2,0x34,0x12,
+    0xE4,0x90,0x34,0xA2,0xD2,0x9C,0x40,0x90,0x90,0x9C,0xD0,0x94,0x40,0x90,0x92,0x94,
+    0x48,0x01,0x80,0x36,0x40,0x48,0xD2,0x8C,0x40,0x90,0x92,0x8C,0xD2,0x84,0x40,0x90,
+    0x90,0x84,0xD0,0xBC,0xE2,0x90,0x92,0x95,0x90,0xBC,0xD8,0x7C,0xD4,0xBC,0x10,0xD2,
+    0xD3,0x06,0x38,0x4F,0x87,0xFD,0xE8,0x85,0xA8,0x85,0x37,0x6A,0xF0,0x2C,0x30,0x22,
+    0x30,0x8A,0x30,0xFA,0x37,0xC2,0xB9,0xF7,0xF1,0xEF,0x31,0xDA,0x31,0x92,0x31,0x4A,
+    0x37,0x02,0xB9,0xFF,0xDF,0x37,0xEB,0x85,0xAC,0xBD,0x87,0x35,0x33,0x6A,0xD8,0x43,
+    0x87,0x1C,0xD0,0x43,0x85,0x14,0xE0,0x4B,0x00,0x01,0x48,0x29,0x92,0x1E,0xF0,0x08,
+    0x1D,0x4B,0x1B,0x43,0x06,0x6F,0x08,0x89,0xEA,0x4A,0x3A,0x48,0xAB,0x26,0x50,0x62,
+    0x58,0x4B,0x1D,0x8A,0x18,0x4B,0x03,0x27,0x55,0x4A,0x5B,0x4B,0x18,0x92,0x1E,0x8A,
+    0x18,0x4B,0x3B,0x01,0x35,0x42,0x81,0x01,0x80,0x2C,0x00,0x01,0x18,0x43,0x87,0x0C,
+    0x58,0x73,0x23,0x01,0x03,0x17,0x40,0xB0,0xE7,0x20,0x93,0x25,0x38,0x80,0x8F,0x16,
+    0xC4,0x1C,0x10,0x22,0x98,0xBE,0xC7,0x1C,0x13,0x22,0x84,0x46,0xA0,0x63,0xC7,0x34,
+    0x08,0x89,0xC9,0x00,0x0A,0x48,0xC4,0x00,0x48,0xD2,0xCA,0x03,0x09,0x43,0x36,0x12,
+    0x08,0x01,0x00,0x09,0xDF,0x44,0xB8,0xF7,0xF0,0x37,0xD6,0x44,0x91,0x04,0x30,0x5A,
+    0x30,0x0A,0x01,0x11,0xD7,0x34,0xB8,0xF7,0xFA,0xA7,0x40,0x9A,0x42,0x0B,0x3A,0x48,
+    0xA8,0xE6,0x47,0x0B,0x10,0x11,0x18,0x8A,0x02,0x0B,0x40,0x72,0x0C,0x41,0x00,0x0B,
+    0x47,0x0B,0x10,0xF9,0x90,0x19,0x18,0x8A,0x00,0x0B,0x78,0x01,0x89,0x1E,0x30,0x4A,
+    0xC7,0x34,0xB8,0xFF,0xD8,0xD7,0xC2,0x14,0xCB,0x34,0x18,0x02,0x02,0x00,0xC2,0x00,
+    0x4A,0x32,0xC2,0x00,0x81,0x24,0x00,0x3F,0xC6,0x2C,0xE8,0x03,0x40,0x31,0x88,0x36,
+    0x40,0x02,0x42,0x0B,0x10,0x81,0x18,0x8A,0x00,0x0B,0x38,0x31,0x07,0xFF,0x38,0x80,
+    0x80,0x96,0x08,0x09,0x00,0x0A,0x05,0x07,0xFF,0x85,0x59,0x43,0x10,0x42,0x88,0x1E,
+    0xC6,0x2C,0xE8,0x03,0x47,0x31,0x88,0xBE,0x50,0x0D,0x90,0x04,0x31,0x5A,0x31,0x0A,
+    0xD0,0x34,0xC0,0x24,0xB8,0xFF,0xF7,0xC7,0xC0,0x14,0xC8,0x24,0x02,0x00,0xC2,0x00,
+    0x83,0x24,0x40,0xB0,0xE7,0x20,0x93,0x25,0xC4,0x1C,0x10,0x22,0x98,0xA6,0x7E,0x01,
+    0x88,0x0E,0xC0,0x0C,0x1B,0x43,0xE3,0xF8,0x90,0xFD,0x7F,0x11,0x99,0x2E,0x34,0x52,
+    0x00,0x01,0xC8,0x44,0xBE,0xF7,0xEF,0x67,0x87,0x4D,0xE8,0x85,0xAC,0xBD,0x87,0x2D,
+    0x33,0x62,0xD8,0x03,0x87,0x14,0xD0,0x0B,0x88,0x0C,0xC8,0x0C,0xC2,0x14,0x18,0x42,
+    0xCA,0x2C,0x00,0x10,0xC1,0x90,0x4A,0x0A,0xC0,0xA8,0xAA,0x24,0xCA,0x2C,0x88,0x21,
+    0xC4,0x30,0x12,0x89,0xCC,0x2C,0x00,0x90,0xC2,0x48,0xC4,0x38,0xB8,0x1C,0xC8,0x2C,
+    0xC0,0x14,0xC0,0x40,0x0C,0x89,0x09,0x48,0xC0,0x00,0x4A,0xB2,0xCE,0x03,0x08,0x43,
+    0xD0,0x3C,0x90,0x04,0x30,0x1A,0x09,0x01,0x00,0x09,0xD0,0x2C,0xBC,0xF7,0xF7,0x8F,
+    0x30,0x12,0x01,0x11,0xCF,0x3C,0xB8,0xF7,0xE8,0xDF,0x0C,0x01,0x00,0x09,0xD8,0x3C,
+    0xD7,0x14,0xB8,0xF7,0xF0,0x87,0xD1,0x3C,0x91,0x04,0x30,0x1A,0x00,0x11,0xD0,0x2C,
+    0xCF,0x14,0xB8,0xF7,0xF0,0xF7,0xD3,0x3C,0x92,0x04,0x00,0x21,0xE9,0x0A,0x30,0x1A,
+    0x11,0x01,0x30,0x42,0xB8,0xFF,0xFF,0x47,0x08,0x09,0x00,0x4F,0x80,0xC0,0x02,0x01,
+    0xAA,0xAA,0xAA,0xAA,0x00,0x01,0x00,0x42,0x18,0x00,0x04,0x42,0x30,0x20,0x02,0x00,
+    0x30,0x42,0xD8,0x3C,0xD7,0x14,0xB8,0xF7,0xF0,0x77,0xD0,0x3C,0x91,0x04,0x30,0x1A,
+    0x00,0x19,0xD0,0x2C,0xCF,0x14,0xB8,0xF7,0xF1,0xE7,0x32,0x12,0x00,0x01,0xC8,0x3C,
+    0xBB,0xF7,0xEF,0x37,0xD0,0x3C,0x90,0x04,0x09,0x01,0x30,0x1A,0x30,0x42,0xD0,0x2C,
+    0xBA,0xF7,0xF7,0x7F,0xE0,0x03,0x45,0x29,0xC0,0x96,0x00,0x01,0x08,0x01,0x00,0x67,
+    0xDC,0x13,0x15,0x12,0xC1,0x06,0x00,0x4C,0x41,0x54,0x81,0x93,0x41,0x54,0x81,0xD3,
+    0xE3,0xF8,0xE3,0xB0,0xE2,0x68,0xE5,0x00,0x90,0x05,0xD6,0x0C,0x17,0x82,0x9C,0x7E,
+    0xC8,0x1C,0xC0,0x24,0x10,0x01,0x00,0x57,0x40,0x1C,0xC0,0x6B,0xC8,0xD8,0x92,0xDD,
+    0x80,0xD8,0x02,0x1C,0x82,0x5B,0xE0,0x48,0xE2,0x00,0xE4,0x90,0x95,0x95,0xDE,0x1B,
+    0x17,0x9A,0xC4,0x8E,0x87,0x45,0xE8,0x85,0xA8,0x85,0x33,0x42,0x80,0xC1,0x35,0x6A,
+    0xA9,0x01,0x5C,0x53,0x55,0x73,0x57,0x5B,0x51,0x63,0xE3,0x6B,0x6A,0x01,0x80,0xD6,
+    0x30,0x2A,0x19,0xEA,0x18,0xAA,0x19,0xAA,0x80,0x0E,0x28,0x19,0x80,0x2B,0xC0,0x2B,
+    0x68,0x01,0x80,0x0E,0xF0,0x68,0x83,0x2B,0x30,0x2A,0x11,0xAA,0x80,0x26,0x30,0xEA,
+    0x10,0xAA,0x88,0x0E,0x10,0x09,0x00,0x97,0x31,0x2A,0x11,0xAA,0x80,0x26,0x30,0xEA,
+    0x10,0xAA,0x88,0x0E,0x10,0x11,0x00,0x57,0x60,0x01,0x80,0x1E,0x10,0x9A,0x88,0x0E,
+    0x10,0x79,0x00,0x27,0x10,0x9A,0x81,0x0E,0x10,0x21,0x00,0x07,0x14,0x01,0xC8,0x1B,
+    0x24,0x01,0x10,0x9A,0x88,0x0E,0x50,0x01,0x8C,0x0E,0x00,0x24,0x04,0x57,0x41,0x1C,
+    0x2B,0xC9,0x08,0x68,0x10,0x5A,0x95,0x0E,0xE4,0xD8,0x02,0x1C,0x30,0x5A,0x28,0x09,
+    0x98,0x01,0x55,0x11,0x80,0x26,0xE0,0x8E,0x50,0x01,0x80,0xDE,0x50,0x09,0x88,0xCE,
+    0x41,0x34,0x74,0xE1,0xCA,0xB6,0xF0,0xDB,0x58,0x51,0x90,0x9E,0x36,0x5A,0x98,0x01,
+    0xE1,0xF3,0x18,0x72,0xA4,0xF3,0xA0,0x6B,0x00,0x24,0x04,0x5F,0x50,0x21,0x80,0x4E,
+    0x50,0x79,0x88,0x3E,0x41,0x34,0x74,0xE1,0xCA,0x26,0xF0,0xDB,0x58,0x51,0x90,0x0E,
+    0xA4,0x6B,0x04,0x24,0x8B,0x13,0xEC,0x85,0xAC,0x85,0x87,0x4D,0x35,0x7A,0xD0,0xCB,
+    0x8F,0x34,0xD0,0xCB,0x89,0x2C,0xE8,0xCB,0x4B,0x29,0x98,0xB6,0x0E,0xC1,0xED,0x4A,
+    0x4B,0x01,0x88,0x96,0xCA,0xCB,0x35,0x48,0x70,0x48,0x88,0x24,0x4A,0xFA,0xC7,0x30,
+    0x32,0x22,0xA0,0x21,0x80,0x01,0x0A,0x01,0x82,0x44,0xF0,0x0A,0x48,0xC1,0xDB,0x2E,
+    0xC3,0x44,0xC8,0xC1,0x00,0x0C,0x00,0x09,0x80,0x1C,0x00,0x0F,0x00,0x01,0x80,0x1C,
+    0xC8,0x44,0x00,0x11,0xF4,0x42,0x08,0x59,0x1C,0x4A,0x16,0x42,0xE0,0x2E,0xC8,0x44,
+    0x82,0x61,0x04,0x44,0x00,0x09,0x80,0x14,0x00,0x0F,0x00,0x01,0x87,0x14,0x40,0x82,
+    0x82,0x0C,0x10,0x02,0x80,0x04,0x00,0x01,0x81,0x3C,0x00,0xB7,0x29,0x01,0x00,0x6F,
+    0x01,0x01,0xF0,0x82,0xCC,0x24,0x10,0x42,0xD0,0xCE,0x40,0x01,0xE8,0x56,0xC8,0x0C,
+    0x10,0x42,0xEC,0x06,0x80,0x0C,0xC0,0x1C,0x40,0x01,0x80,0xDE,0xC2,0x03,0xF1,0x00,
+    0x80,0x03,0x01,0xBF,0x40,0x01,0xD0,0xAE,0xCC,0x04,0x10,0x42,0xD0,0x06,0x80,0x04,
+    0xC0,0x14,0x40,0x01,0x81,0x76,0xC0,0x03,0xE1,0x00,0x82,0x03,0x01,0x57,0xE8,0xC3,
+    0x08,0x21,0x83,0x07,0xD3,0x0F,0x4D,0x19,0x88,0x26,0xC8,0x24,0xC2,0x03,0x41,0x48,
+    0xD1,0x00,0x82,0x03,0xE3,0xB0,0xE5,0x20,0xE7,0x68,0x93,0x6D,0xC4,0x2C,0x10,0x2A,
+    0x98,0x76,0xC6,0x3C,0xE6,0x00,0x92,0x05,0x80,0x3C,0xC8,0x34,0xC4,0x3C,0x10,0x42,
+    0x98,0x26,0xC6,0x44,0x40,0x0C,0xC0,0x0C,0xC0,0x40,0xC8,0x44,0x00,0x44,0xC0,0x44,
+    0x40,0x0C,0xC2,0x04,0xC0,0x40,0xC8,0x44,0x03,0x44,0x32,0xEF,0xAC,0xBD,0x87,0x15,
+    0x30,0x62,0x30,0xBA,0xE3,0x2B,0xDF,0x33,0xD3,0x03,0x1F,0x42,0x00,0x08,0xC2,0x14,
+    0xC6,0x40,0x48,0x12,0xC0,0x00,0x82,0x0C,0x36,0x02,0x81,0x01,0xE4,0x0B,0x10,0x01,
+    0x18,0x8A,0xA0,0x0B,0x00,0xB1,0xED,0x02,0x42,0x01,0x80,0x46,0x09,0x09,0x30,0xDA,
+    0x30,0x52,0x31,0x42,0xBE,0xF7,0xE7,0x3F,0x30,0x1A,0xB9,0x04,0x08,0x01,0x00,0x19,
+    0xD7,0x14,0xB8,0xF7,0xEA,0xB7,0x00,0x21,0xE9,0x0A,0x30,0x1A,0x30,0xD2,0xC1,0x0C,
+    0xB8,0xFF,0xCF,0xBF,0x58,0x03,0x17,0x09,0x35,0x8A,0x00,0x4A,0x1F,0x42,0x18,0x03,
+    0xE7,0x68,0x93,0x6D,0x58,0x0B,0x03,0x0F,0xE7,0x68,0x93,0x6D,0x35,0x82,0x00,0x42,
+    0x10,0x0A,0x88,0x0E,0x17,0xAA,0x9D,0xBE,0x11,0xAA,0x85,0x06,0xA1,0x2B,0x37,0xDA,
+    0x30,0x52,0x09,0x01,0x07,0x09,0xB8,0xF7,0xE1,0xF7,0x34,0x1A,0xB9,0x04,0x30,0x4A,
+    0x00,0x11,0xD0,0x14,0xBF,0xF7,0xE7,0x6F,0xC1,0x14,0x08,0x89,0xCC,0x00,0x0A,0x48,
+    0xC5,0x00,0x52,0x02,0xCE,0x03,0x08,0x83,0x42,0xFA,0x44,0x0B,0x3F,0x48,0xAA,0xE6,
+    0x04,0x41,0x00,0x83,0x47,0x83,0x08,0xF9,0x88,0x19,0x18,0x42,0x00,0x83,0x80,0x2D,
+    0xEF,0x85,0xAF,0x85,0x84,0xBD,0x34,0x22,0x37,0x6A,0xD0,0x7B,0xD0,0x43,0x85,0x6C,
+    0x32,0x1A,0x9B,0x21,0x9C,0xB4,0x48,0xAA,0x32,0x02,0xC3,0x20,0x4B,0x7A,0x24,0x0A,
+    0x8B,0xAC,0xC8,0x43,0x02,0x00,0x92,0x05,0x80,0x2C,0x00,0x01,0x80,0x24,0x00,0x09,
+    0x81,0x14,0x30,0x42,0x80,0x01,0x86,0xA4,0xE3,0x03,0x5A,0x73,0x32,0x32,0x3C,0x10,
+    0x58,0x43,0x1D,0x32,0x50,0x01,0xD0,0x46,0x40,0x4A,0x1C,0x32,0xB3,0x1C,0x30,0x82,
+    0x10,0xD9,0x07,0x82,0xD2,0xA4,0xA0,0x83,0x04,0x47,0x40,0x2A,0x18,0x02,0x1E,0x32,
+    0xB3,0x1C,0x30,0x82,0x10,0x21,0x18,0x82,0xD2,0xA4,0xA0,0x83,0x35,0x01,0x18,0x73,
+    0xD8,0x43,0x45,0x01,0x80,0x36,0xD0,0x6C,0xC2,0x14,0xF0,0x90,0x00,0x82,0xD4,0x1C,
+    0x18,0x82,0x80,0x1C,0x34,0x52,0x91,0x01,0x92,0x9C,0xF0,0x83,0x80,0x8C,0xC0,0x9C,
+    0x14,0xC1,0xB0,0x12,0x90,0x84,0xD0,0x9C,0x00,0x01,0x18,0x83,0x80,0x7C,0xD0,0x9C,
+    0x10,0x83,0x86,0x74,0x10,0x01,0x90,0x64,0x50,0x92,0x93,0x5C,0x10,0x01,0x90,0x54,
+    0x31,0x72,0xB1,0x01,0x9D,0x83,0xCD,0x43,0x40,0x00,0x82,0x4C,0x12,0xA1,0xFD,0x82,
+    0x80,0x00,0x82,0x44,0xE0,0x43,0x45,0x29,0xC0,0xD6,0x00,0x01,0x32,0x12,0x93,0x01,
+    0x02,0x84,0x00,0x84,0x30,0x22,0x04,0x87,0x10,0x01,0x00,0x47,0x41,0x44,0x80,0x03,
+    0x40,0x44,0x80,0xC3,0xE4,0xD8,0xE2,0x48,0xE2,0x20,0xE3,0x90,0x95,0x95,0x12,0xD2,
+    0xDB,0xA6,0x37,0x02,0xE2,0x00,0x92,0x05,0x30,0x22,0xC4,0x6C,0x2F,0x22,0xDC,0x5E,
+    0xC0,0xB4,0x80,0x3C,0xE0,0xAC,0x00,0x01,0x86,0x94,0x00,0x2F,0x00,0x01,0x80,0x34,
+    0x30,0x32,0xCC,0x94,0xC4,0x14,0x00,0x42,0xC8,0x1C,0x10,0x42,0x80,0x86,0x03,0x01,
+    0x32,0x22,0x04,0xEF,0xC1,0x3C,0x40,0x0C,0xC2,0x03,0xD0,0x00,0x91,0x05,0x00,0x04,
+    0xCA,0x9C,0xE0,0x4B,0x48,0x11,0x98,0xA6,0xCC,0x84,0x10,0x42,0xD5,0x8E,0xD8,0x8B,
+    0xE5,0x48,0x9A,0x8B,0xC8,0x64,0xC0,0x48,0x88,0x64,0xD8,0x5C,0x34,0x12,0x10,0x1A,
+    0xD8,0x06,0xD0,0x5C,0x90,0x5C,0xD8,0x54,0x34,0x12,0x10,0x1A,0xE0,0x06,0xD0,0x54,
+    0x90,0x54,0xC8,0x2C,0x10,0x42,0xD4,0x3E,0x32,0x8A,0xE3,0x48,0x94,0x4D,0x36,0x72,
+    0xC8,0x34,0xC0,0x48,0x90,0x4D,0x88,0x34,0xCC,0x4C,0x10,0x42,0xEB,0xBE,0xC8,0x4B,
+    0x10,0x0A,0xE4,0x2E,0xDD,0x94,0x58,0x53,0x0C,0x09,0x00,0xCA,0x1D,0x52,0x18,0x53,
+    0xE0,0x8B,0x4B,0x09,0x8C,0x0E,0x08,0x09,0xA0,0x8B,0xCB,0x8C,0x10,0x42,0xEC,0xBE,
+    0x30,0x0A,0x03,0x09,0x00,0x42,0xCC,0x7C,0x18,0x42,0x80,0x7C,0x00,0x87,0xC8,0x44,
+    0x10,0x42,0xD4,0x6E,0xE0,0x8B,0x4B,0x09,0x8C,0x0E,0x08,0x09,0xA0,0x8B,0xCB,0x84,
+    0x10,0x42,0xD4,0x2E,0x30,0x02,0x0B,0x09,0x00,0x0A,0xC4,0x74,0x18,0x0A,0x88,0x74,
+    0xE0,0x20,0xC5,0x3C,0xE0,0x00,0x82,0x3C,0x32,0x02,0xE3,0x00,0x94,0x05,0x32,0x22,
+    0x2C,0xE2,0xDD,0xFE,0x30,0x82,0x43,0x11,0xCB,0x2E,0x30,0x8A,0xC0,0x34,0x80,0x07,
+    0xC8,0x6F,0x91,0x05,0x00,0x07,0x00,0x01,0x03,0xC8,0xD3,0x20,0x11,0x01,0x00,0x57,
+    0x00,0xD7,0x41,0x01,0xE8,0x7E,0x08,0x01,0xF0,0x0A,0xDB,0x2C,0x10,0xCA,0xD4,0xB6,
+    0xE4,0x18,0x12,0xCA,0xE8,0x16,0xD0,0x48,0x00,0x0C,0x01,0x87,0x48,0x01,0xE8,0x76,
+    0x09,0x09,0x00,0x0C,0x00,0x5F,0x08,0x01,0xF4,0x0A,0x13,0x0A,0xD0,0x16,0xD0,0x48,
+    0x00,0x0C,0x01,0x27,0x48,0x01,0xD0,0x16,0x0E,0x01,0x18,0x4A,0x00,0x0C,0x09,0x01,
+    0xF0,0x0A,0xDB,0x44,0x10,0xCA,0xD4,0x1E,0xCA,0x24,0xE0,0x48,0x90,0x4D,0x8E,0x24,
+    0xE2,0x20,0xE5,0x90,0x95,0x95,0x12,0xD2,0xD8,0x9E,0x06,0xCF,0x30,0x20,0x02,0x00,
+    0xC7,0x87,0xF9,0xFF,0x00,0x01,0x00,0x42,0x18,0x00,0x04,0x42,0x20,0x20,0x02,0x00,
+    0xAA,0xAA,0xAA,0xAA,0xE7,0xC7,0xF8,0xFF,0x00,0x01,0x08,0x01,0x01,0x37,0x00,0x0C,
+    0xE0,0x20,0xD5,0x3C,0xE0,0x90,0x92,0x3C,0xE2,0x00,0x92,0x05,0x17,0xC2,0xDD,0xB6,
+    0xC2,0x94,0xE0,0x00,0x90,0x05,0x82,0x94,0xC8,0x6C,0xC0,0x94,0x10,0x42,0xD4,0x06,
+    0x39,0xA7,0xC9,0x43,0x40,0x71,0xC9,0x0E,0x01,0x71,0x89,0x43,0xC9,0x24,0xC8,0x43,
+    0x42,0x48,0xC4,0x00,0x91,0x05,0x8E,0x43,0x40,0x81,0xCA,0x0E,0x01,0x81,0x8A,0x43,
+    0xC2,0x9C,0xE0,0x03,0x42,0x11,0x98,0x56,0xD8,0x83,0x45,0x11,0xCC,0x3E,0xF2,0x00,
+    0x90,0x05,0x86,0x04,0xC8,0x54,0xC0,0x5C,0xC0,0x08,0xC2,0x64,0xD0,0x00,0xCA,0x04,
+    0x85,0x07,0xC0,0xA7,0x90,0x05,0x80,0x0C,0x05,0x01,0x28,0x44,0x08,0xE9,0x0B,0x48,
+    0x10,0x01,0xE0,0xAC,0x31,0x22,0x04,0x0F,0x18,0x01,0x00,0xCF,0x01,0x01,0xF0,0x02,
+    0xF5,0x84,0x10,0x82,0xD0,0x8E,0xF0,0x0C,0xD8,0x00,0xAC,0x06,0x10,0x02,0x92,0x05,
+    0x34,0x32,0x10,0x0A,0xE0,0x06,0x30,0x72,0x30,0x8A,0x31,0x32,0x10,0x12,0xDC,0x06,
+    0x31,0xB2,0x30,0x92,0x69,0x74,0xC5,0x80,0x2D,0x44,0xE5,0x20,0xE2,0xD8,0x92,0xDD,
+    0x17,0xDA,0xDD,0x1E,0x32,0x02,0xE3,0x00,0x94,0x05,0x32,0x22,0xDC,0x6C,0x28,0xE2,
+    0xDD,0xD6,0x6E,0x44,0xC2,0x48,0xD4,0x00,0x90,0x05,0xCC,0x04,0x83,0x07,0xC0,0xA7,
+    0x28,0x44,0xC5,0x0C,0x40,0x01,0xD0,0x06,0x13,0x02,0x2A,0x44,0x00,0x17,0x00,0x01,
+    0x2D,0x44,0x2B,0x44,0xC8,0x9C,0xC0,0x7C,0x18,0x43,0xC8,0x9C,0xC6,0x74,0x10,0x43,
+    0x87,0xBD,0xE8,0x85,0xAC,0xBD,0x87,0x15,0x30,0x62,0x70,0xEA,0x29,0x01,0x80,0xAB,
+    0x09,0x11,0x30,0x02,0x80,0x01,0x35,0x3A,0xA9,0x0B,0x34,0x0A,0xD0,0x24,0xC0,0x14,
+    0xBD,0xFF,0xDF,0x97,0xAD,0xEB,0xDD,0x03,0x40,0x01,0x80,0x76,0x6F,0xAA,0x40,0x43,
+    0x91,0x3D,0x4C,0x04,0x00,0x43,0x07,0x09,0x81,0x83,0x31,0x0A,0xD0,0x24,0xC0,0x14,
+    0xBA,0xFF,0xE7,0x27,0x01,0x01,0x80,0x83,0x00,0x7B,0xD7,0x24,0x90,0x04,0x08,0x01,
+    0x30,0x1A,0x31,0x42,0xD7,0x14,0xB8,0xF7,0xD5,0xA7,0xE7,0x03,0x40,0x41,0x96,0x0E,
+    0xE5,0x00,0xA2,0x03,0x30,0x9F,0x10,0x01,0x00,0x37,0x08,0x01,0xE4,0x48,0x92,0x4D,
+    0x4F,0xA1,0xC8,0xDE,0xE4,0x90,0x92,0x95,0x17,0x12,0xCC,0xB6,0x38,0x82,0x03,0x00,
+    0x00,0x80,0x00,0x01,0x00,0x01,0x00,0x42,0x00,0x0F,0x00,0x26,0xF8,0x48,0x48,0x21,
+    0x94,0xDE,0x3F,0x58,0xA8,0x0E,0x00,0x14,0xE6,0x00,0x3C,0x48,0x80,0x06,0x80,0x13,
+    0x38,0x82,0x4B,0x01,0x86,0x5E,0x38,0x18,0x80,0x16,0x80,0x13,0xE2,0x00,0xF2,0x48,
+    0x48,0x11,0x98,0x26,0x38,0x18,0xAC,0x16,0x04,0x14,0xE0,0x00,0xF7,0x48,0x3C,0x1F,
+    0x17,0x01,0x38,0x77,0x16,0x01,0x38,0xFF,0x10,0x01,0x48,0x18,0x11,0x5A,0x9C,0x66,
+    0x54,0x18,0x10,0x5A,0x98,0x8E,0x18,0x01,0x32,0xE2,0x04,0x77,0x30,0x1A,0x18,0x5A,
+    0xA0,0xE6,0x11,0x01,0x44,0x18,0x12,0x5A,0x98,0x8E,0x49,0x18,0x10,0x5A,0x9C,0xE6,
+    0x54,0x18,0x10,0x5A,0x9C,0x0E,0x30,0xA2,0x06,0xFF,0x49,0x18,0x10,0x5A,0x9C,0x0E,
+    0x0E,0x58,0xD6,0x00,0x0C,0x92,0x4A,0x18,0x10,0x5A,0x9C,0x0E,0x0E,0x58,0xD4,0x00,
+    0x0A,0x92,0x4A,0x18,0x10,0x5A,0x9C,0x0E,0x0E,0x58,0xD2,0x00,0x08,0x92,0x4A,0x18,
+    0x10,0x5A,0x9C,0x0E,0x0E,0x58,0xD0,0x00,0x0E,0x92,0x42,0x18,0x10,0x5A,0x9C,0x0E,
+    0x06,0x58,0xD6,0x00,0x0C,0x92,0x42,0x18,0x10,0x5A,0x9C,0x0E,0x06,0x58,0xD4,0x00,
+    0x0A,0x92,0x42,0x18,0x10,0x5A,0x9C,0x0E,0x06,0x58,0xD2,0x00,0x0A,0x92,0xD2,0x08,
+    0x90,0x06,0x30,0x0A,0x08,0x92,0x32,0x82,0x3A,0x82,0x03,0xEF,0x78,0x50,0x86,0x06,
+    0x10,0x4A,0x82,0x18,0x9A,0x06,0x10,0x02,0x00,0x9A,0x12,0x01,0x30,0xE2,0x4C,0x18,
+    0x11,0x5A,0x9C,0x6E,0x54,0x18,0x10,0x5A,0x9F,0x96,0x10,0xE1,0x08,0x48,0xD4,0x95,
+    0x54,0x18,0x10,0x5A,0x9C,0x66,0x08,0x48,0x8C,0x90,0x14,0x5A,0x9C,0x46,0x08,0x48,
+    0x8C,0x90,0x14,0x5A,0x9C,0x26,0x08,0x48,0x84,0xD6,0x89,0x90,0x04,0x07,0x48,0x48,
+    0x4C,0x18,0x16,0x5A,0x9E,0x0E,0x08,0x58,0xD2,0x00,0x0E,0x92,0x4C,0x18,0x14,0x5A,
+    0x9C,0x0E,0x08,0x58,0xD2,0x00,0x0E,0x92,0x4C,0x18,0x12,0x5A,0x9A,0x0E,0x08,0x58,
+    0xD2,0x00,0x0E,0x92,0x4C,0x18,0x10,0x5A,0x98,0x0E,0x08,0x58,0xD2,0x00,0x0E,0x92,
+    0x44,0x18,0x16,0x5A,0x9E,0x0E,0x00,0x58,0xD2,0x00,0x0E,0x92,0x44,0x18,0x14,0x5A,
+    0x9C,0x0E,0x00,0x58,0xD2,0x00,0x0E,0x92,0x92,0xCE,0x46,0x18,0x10,0x5A,0x9C,0x0E,
+    0x06,0x58,0xD2,0x00,0x0A,0x92,0xD2,0x08,0x90,0x06,0x30,0x0A,0x32,0x1A,0x0B,0x92,
+    0x80,0xD8,0x32,0x82,0x9A,0x0E,0x10,0x02,0x58,0x01,0xA8,0x06,0x13,0x4A,0x3A,0x82,
+    0x32,0x1A,0x83,0xD8,0x9A,0x06,0x10,0x02,0xA8,0x0D,0x00,0x01,0x36,0x02,0x36,0x02,
+    0xEB,0x15,0x30,0xAA,0x81,0x07,0xC0,0x17,0x30,0x72,0x05,0x28,0x32,0x4A,0x33,0x9A,
+    0x46,0x00,0x06,0x00,0x30,0x2A,0x84,0xC5,0xAF,0x05,0xB9,0xDF,0xE3,0x5F,0xE6,0x05,
+    0x3A,0x01,0x40,0x48,0x30,0xB2,0x35,0x01,0x2E,0x06,0x2E,0x06,0x2E,0x06,0x2E,0x06,
+    0x2E,0x06,0x2E,0x06,0x2E,0x06,0x2E,0x06,0xEA,0x01,0x02,0x48,0x33,0x6A,0x3C,0x82,
+    0x36,0x22,0x30,0x02,0x31,0x02,0x36,0x02,0xBB,0xD7,0xD7,0x6F,0x43,0x02,0x38,0x82,
+    0x80,0xA0,0x03,0x01,0x40,0x12,0x48,0x1A,0xF3,0x5D,0x3D,0x82,0x00,0x68,0x00,0x00,
+    0x00,0xC0,0x00,0x00,0x00,0x30,0x01,0x10,0x39,0x82,0xA3,0x85,0x33,0xA2,0xF3,0x20,
+    0xC3,0x2B,0xE1,0x20,0x10,0x5A,0x95,0x06,0x33,0xEA,0xE8,0x1A,0x07,0xD8,0xC2,0x18,
+    0xE0,0x85,0x39,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x80,0x20,0x03,0x42,0x80,0x20,0x03,0x42,0x80,0x20,0x03,0x42,0x80,0x20,0x03,0x42,
+    0x80,0xA0,0x02,0x42,0x80,0xA0,0x02,0x42,0x80,0xA0,0x02,0x42,0x80,0xA0,0x02,0x42,
+    0x80,0x20,0x02,0x42,0x80,0x20,0x02,0x42,0x80,0x20,0x02,0x42,0x80,0x20,0x02,0x42,
+    0x80,0xA0,0x01,0x42,0x80,0xA0,0x01,0x42,0x80,0xA0,0x01,0x42,0x80,0xA0,0x01,0x42,
+    0x80,0x20,0x01,0x42,0x80,0x20,0x01,0x42,0x80,0x20,0x01,0x42,0x80,0x20,0x01,0x42,
+    0x80,0xA0,0x00,0x42,0x80,0xA0,0x00,0x42,0x80,0xA0,0x00,0x42,0x80,0xA0,0x00,0x42,
+    0x80,0x20,0x00,0x42,0x80,0x20,0x00,0x42,0x80,0x20,0x00,0x42,0x80,0x20,0x00,0x42,
+    0x80,0xA0,0x05,0x42,0x80,0xA0,0x05,0x42,0x80,0xA0,0x05,0x42,0x80,0x20,0x05,0x42,
+    0x80,0x20,0x05,0x42,0x80,0x20,0x05,0x42,0x80,0x20,0x05,0x42,0x80,0xA0,0x04,0x42,
+    0x80,0xA0,0x04,0x42,0x80,0xA0,0x04,0x42,0x80,0xA0,0x03,0x42,0x80,0x20,0x04,0x42,
+    0x80,0x20,0x04,0x42,0x80,0x20,0x04,0x42,0x80,0x20,0x04,0x42,0x80,0xA0,0x04,0x42,
+    0x20,0x40,0x08,0x10,0x20,0x40,0x08,0x10,0x20,0x40,0x08,0x10,0x20,0x40,0x08,0x10,
+    0x20,0x40,0x08,0x10,0x20,0x40,0x08,0x10,0x20,0x40,0x08,0x10,0x10,0x20,0x40,0x08,
+    0x10,0x20,0x40,0x08,0x10,0x20,0x08,0x40,0x20,0x10,0x08,0x40,0x08,0x81,0x03,0x42,
+    0x08,0x41,0x03,0x42,0x08,0x01,0x03,0x42,0x08,0xC1,0x02,0x42,0x08,0x81,0x02,0x42,
+    0x08,0x41,0x02,0x42,0x08,0x01,0x02,0x42,0x08,0xC1,0x01,0x42,0x08,0x81,0x01,0x42,
+    0x08,0x41,0x01,0x42,0x08,0xC1,0x03,0x42,0x08,0x01,0x00,0x42,0x08,0x41,0x00,0x42,
+    0x08,0x81,0x00,0x42,0x08,0xC1,0x00,0x42,0x08,0x01,0x01,0x42,0x08,0xC1,0x02,0x42,
+    0x08,0x81,0x02,0x42,0x08,0x41,0x02,0x42,0x08,0x01,0x02,0x42,0x08,0xC1,0x01,0x42,
+    0x08,0x81,0x01,0x42,0x08,0x41,0x01,0x42,0x08,0x01,0x01,0x42,0x08,0xC1,0x00,0x42,
+    0x08,0x81,0x00,0x42,0x08,0x41,0x00,0x42,0x08,0x01,0x00,0x42,0x08,0xC1,0x03,0x42,
+    0x08,0x81,0x03,0x42,0x08,0x41,0x03,0x42,0x08,0x01,0x03,0x42,0x08,0xC1,0x02,0x42,
+    0x08,0x81,0x02,0x42,0x08,0x41,0x02,0x42,0x08,0x01,0x02,0x42,0x08,0xC1,0x01,0x42,
+    0x08,0x81,0x01,0x42,0x08,0x41,0x01,0x42,0x08,0x01,0x01,0x42,0x08,0xC1,0x00,0x42,
+    0x08,0x81,0x00,0x42,0x08,0x41,0x00,0x42,0x08,0x01,0x00,0x42,0x40,0x40,0x38,0x38,
+    0x30,0x30,0x28,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
+    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x08,0xF8,0x0F,0xFF,0x07,0xF8,0xFF,
+    0x07,0xF8,0x0F,0xF8,0x08,0x00,0x08,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x03,0x00,0x28,0xB5,0x39,0xC5,0x08,0x1D,0x1B,0x2B,0x3A,0x28,0x53,0xB5,0x0A,0xC5,
+    0x00,0x08,0x01,0x00,0x01,0x00,0x50,0x0D,0x52,0x1D,0x52,0xB5,0x39,0x0D,0x04,0x08,
+    0x51,0x3D,0x53,0x1D,0x51,0x3D,0x54,0x95,0x51,0x3D,0x54,0x95,0x51,0x3D,0x54,0x95,
+    0x0B,0x3D,0x34,0x88,0x51,0x3D,0x54,0x1D,0x51,0x3D,0x54,0x95,0x04,0x00,0x50,0x3D,
+    0x50,0x1D,0x01,0x00,0x00,0x00,0x00,0x00,0x54,0x2D,0x53,0x3D,0x32,0x8D,0x32,0x38,
+    0x01,0x28,0x0A,0x45,0x50,0xB5,0x53,0x95,0x00,0x00,0x00,0x00,0x52,0xA5,0x51,0xB5,
+    0x09,0xC5,0x03,0x08,0x03,0x00,0x50,0x3D,0x55,0x1D,0x51,0x0D,0x51,0x3D,0x54,0x95,
+    0x51,0x3D,0x53,0x1D,0x51,0x3D,0x54,0x95,0x51,0x0D,0x55,0x0D,0x54,0xB5,0x3A,0x0D,
+    0x00,0x08,0x01,0x00,0x53,0xA5,0x51,0x2D,0x52,0x3D,0x34,0x8A,0x1D,0x38,0x52,0x45,
+    0x52,0x0D,0x51,0x1D,0x54,0xB5,0x3A,0x0D,0x53,0xA5,0x29,0xB5,0x39,0xC5,0x08,0x1D,
+    0x19,0x2D,0x22,0x1D,0x44,0x0D,0x31,0x3D,0x23,0x95,0x09,0xC1,0x29,0xB5,0x0B,0x1D,
+    0x1B,0x2B,0x3A,0x28,0x00,0x00,0x00,0x08,0xFF,0x07,0x00,0xF8,0x08,0x00,0x10,0x10,
+    0x08,0x10,0x10,0x10,0x08,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x10,0x08,0x08,
+    0x10,0x10,0x08,0x08,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
+    0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x08,0x08,0xF8,0x07,0x08,0x00,0x08,0x08,0xF8,0xE2,0x03,0x00,
+    0x00,0x00,0x00,0x01,0x00,0xA0,0x00,0x00,0x00,0x00,0x05,0x00,0xF8,0x82,0x04,0x00,
+    0x00,0xA0,0x00,0x01,0x80,0x00,0x06,0x00,0x00,0xE0,0x05,0x00,0x00,0x00,0x00,0x00,
+    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
+    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
+    0xFF,0xFF,0xFF,0xFF,0x00,0xE0,0x00,0x80,0x10,0x80,0x2E,0x00,0x06,0x78,0x50,0x56,
+    0xFF,0xFF,0xFF,0xFF,0x44,0xE1,0x01,0xA0,0x00,0x20,0x08,0x00,0x3E,0x26,0xAD,0xDC,
+    0x0F,0x00,0xCA,0xCA,0xFF,0xFF,0xFF,0xFF,0x3C,0x28,0x94,0x00,0x04,0x00,0x00,0x01,
+    0xA4,0xC7,0xDB,0x95,0xC8,0x92,0x61,0x9E
+};
+
+
+
+#define FW_INFO_SIZE	(0x18)
+#define FW_REAL_SIZE	(sizeof(fwbin))
+#define FW_BIN_SIZE		(24*1024+24)	    //24K byte
+
+#endif
+
diff -Naur A/drivers/input/touchscreen/cst148/hyn_cst3xx.c B/drivers/input/touchscreen/cst148/hyn_cst3xx.c
--- A/drivers/input/touchscreen/cst148/hyn_cst3xx.c	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/input/touchscreen/cst148/hyn_cst3xx.c	2020-08-13 12:12:47.182889118 +0530
@@ -0,0 +1,2638 @@
+/* 
+ * drivers/input/touchscreen/hyn_cst3xx.c
+ *
+ * hynitron TouchScreen driver. 
+ *
+ * Copyright (c) 2015  hynitron
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * VERSION      	DATE			AUTHOR
+ *  1.0		    2015-10-12		    Tim
+ *
+ * note: only support mulititouch
+ */
+
+
+#include <linux/string.h>
+#include <linux/vmalloc.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/sched.h>
+#include <linux/kthread.h>
+#include <linux/bitops.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/byteorder/generic.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#ifdef CONFIG_FB
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#endif
+
+#include <linux/interrupt.h>
+#include <linux/time.h>
+#include <linux/timer.h>
+#include <linux/jiffies.h>
+#include <linux/proc_fs.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+
+#include <linux/of_gpio.h>
+#include <linux/of_irq.h>
+#include <linux/irq.h>
+#include <linux/gpio.h>
+#include <linux/uaccess.h>
+
+
+#include "hyn_cst148_ASJ_G1548FH107GG_MA1_A_fw.h"
+
+/******************************
+2018/12/22 steven :
+If chip IC firmware version is not right, to update firmare forcefully.
+please follow the steps as follow:
+1:config macro HYN_UPDATE_FORCE_ONLINE(line:86).
+2:the hyn_cst148_ASJ_G1548FH107GG_MA1_A_fw firmware will be updated in force.
+3:after updating the firmware successfully,please do not configure  macro HYN_UPDATE_FORCE_ONLINE(line:81) later.
+********************************/
+
+
+/**********************************
+  config macro define
+*********************************/
+
+#define HYN_UPDATE_FIRMWARE_ONLINE
+/*#define HYN_UPDATE_FORCE_ONLINE*/
+#define ANDROID_TOOL_SURPORT
+#define SLEEP_CLEAR_POINT
+#define TRANSACTION_LENGTH_LIMITED
+
+
+#define    HYN_RESET_PIN  490   /* IWG27M: Reset: Defining touch reset gpio number for GPIO0_10 */ 
+
+#define GTP_DEBUG_FUNC_ON  0
+
+#define GTP_DEBUG_FUNC()               do{\
+                                         if(GTP_DEBUG_FUNC_ON)\
+                                         printk("<<GTP-FUNC>> Func:%s@Line:%d\n",__func__,__LINE__);\
+                                       }while(0)
+
+#ifdef HYN_GESTURE
+static int hyn_lcd_flag = 0;
+static int tpd_halt=0;
+#endif 
+
+
+
+#ifdef CONFIG_TP_ESD_PROTECT
+#define SWITCH_ESD_OFF                  0
+#define SWITCH_ESD_ON                   1
+static struct workqueue_struct *cst3xx_esd_workqueue;
+#endif
+
+#ifdef ANDROID_TOOL_SURPORT
+static int cst3xx_firmware_info(struct i2c_client * client);
+static int cst3xx_update_firmware(struct i2c_client * client, const unsigned char *pdata);
+static  unsigned short g_unnormal_mode = 0;
+static unsigned short g_cst3xx_tx = 9;
+static unsigned short g_cst3xx_rx = 15;
+#endif
+
+static unsigned char  report_flag = 0;
+static unsigned int   g_cst3xx_ic_version  = 0;
+static unsigned int   g_cst3xx_ic_checksum = 0;
+
+static struct workqueue_struct *cst3xx_wq;
+static unsigned int  g_irq_pin = 481;
+struct i2c_client *g_i2c_client = NULL;
+struct input_dev  *g_input_dev = NULL;
+
+
+
+#ifdef 	HYN_UPDATE_FIRMWARE_ONLINE
+static int cst3xx_boot_update_fw(struct i2c_client   *client,  unsigned char *pdata);
+static unsigned char *pcst3xx_update_firmware = (unsigned char *)cst3_fw ; //the updating firmware
+#endif
+
+#ifdef ICS_SLOT_REPORT
+#include <linux/input/mt.h> // Protocol B, for input_mt_slot(), input_mt_init_slot()
+#endif
+
+
+
+struct cst3xx_ts_platform_data{
+	int irq_gpio;
+	u32 irq_gpio_flags;
+	int reset_gpio;
+	u32 reset_gpio_flags;
+	const char *product1_id;
+	const char *product2_id;
+	char match_product_id;  //0 no match; 1 match product1-id; 2 match product2-id
+	u32 x_max;
+	u32 y_max;
+	u32 x_min;
+	u32 y_min;
+	u32 panel_minx;
+	u32 panel_miny;
+	u32 panel_maxx;
+	u32 panel_maxy;
+//erobbing add for check if overturn axis of x and y
+	bool x_overturn;
+	bool y_overturn;
+//end
+	bool have_touch_key;
+	bool i2c_pull_up;
+	bool enable_power_off;
+	bool enable_slot_report;
+	bool enable_esd;
+
+};
+
+struct cst3xx_ts_data{
+    struct cst3xx_ts_platform_data *pdata;
+    spinlock_t irq_lock;
+    struct i2c_client *client;
+    struct input_dev  *input_dev;
+    struct hrtimer timer;
+    struct work_struct  work;
+    s32 irq_is_disable;
+    s32 use_irq;
+    u16 abs_x_max;
+    u16 abs_y_max;
+    u8  max_touch_num;
+    u8  int_trigger_type;
+    u8  green_wake_mode;
+    u8  enter_update;
+ 
+    spinlock_t esd_lock;
+    u8  esd_running;
+    s32 clk_tick_cnt;
+
+    u8  sensor_id;
+    u16 ic_version;
+	u16 fw_version;
+	u16 config_version;
+	u16 ic_config_version;
+	u8	fw_updating;
+
+    bool power_on;
+    struct mutex lock;
+    struct regulator *avdd;
+    struct regulator *vcc_i2c;
+
+
+#if defined(CONFIG_FB)
+    struct notifier_block fb_notif;
+    struct work_struct resume_work;
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+    struct early_suspend early_suspend;
+#endif
+	struct pinctrl *ts_pinctrl;
+	struct pinctrl_state *gpio_state_active;
+	struct pinctrl_state *gpio_state_suspend;
+
+	dev_t			devt;//Erobbing add for distinguish open glove mode or not
+	bool     in_glove_mode;
+
+};
+struct cst3xx_ts_data *g_ts=NULL;
+
+
+#ifdef TPD_HAVE_BUTTON
+#define TPD_KEY_COUNT	2
+#define TPD_KEYS		{KEY_MENU,KEY_BACK}
+/* {button_center_x, button_center_y, button_width, button_height*/
+#define TPD_KEYS_DIM	{{180, 1360, 60, 60},{540, 1360, 60, 60}}
+static int tpd_keys_local[TPD_KEY_COUNT] = TPD_KEYS;
+static int tpd_keys_dim_local[TPD_KEY_COUNT][4] = TPD_KEYS_DIM;
+#endif
+
+
+
+#ifdef GTP_HAVE_TOUCH_KEY
+#define TPD_KEY_COUNT	2
+#define TPD_KEYS		{KEY_MENU,KEY_BACK}
+const u16 touch_key_array[] = TPD_KEYS;
+#endif
+
+
+#define INPUT_DEV_PHYS  			"input/ts"
+#define TPD_DRIVER_NAME			    "hynitron-ts"
+#define TPD_MAX_FINGERS			    5
+
+#define TPD_MAX_X				    1080   //config x resolution
+#define TPD_MAX_Y				    1920   //config y resolution
+#define TPD_XY_REVER				    0	   
+#define TPD_X_REVER					0
+#define TPD_Y_REVER					0
+
+#define CST3XX_I2C_ADDR				0x1A
+#define I2C_BUS_NUMBER              1 //IIC bus num for mtk
+
+#define printk(fmt,arg...)  printk(KERN_ERR" linc HYN:[LINE=%d]"fmt,__LINE__, ##arg)							
+
+
+
+static int cst3xx_suspend(struct cst3xx_ts_data *ts);
+static int cst3xx_resume(struct cst3xx_ts_data *ts);
+
+#if defined(CONFIG_PM)
+static int cst3xx_pm_suspend(struct device *dev);
+static int cst3xx_pm_resume(struct device *dev);
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+static void cst3xx_ts_early_suspend(struct early_suspend *h);
+static void cst3xx_ts_late_resume(struct early_suspend *h);
+#endif
+
+
+
+void cst3xx_irq_enable(struct cst3xx_ts_data *ts);
+void cst3xx_irq_disable(struct cst3xx_ts_data *ts);
+
+
+
+#ifdef HYN_GESTURE
+static u16 hyn_ges_wakeup_switch = 1;
+static unsigned char hyn_gesture_c = 0;
+#endif
+
+
+#ifdef HIGH_SPEED_IIC_TRANSFER
+static int cst3xx_i2c_read(struct i2c_client *client, unsigned char *buf, int len) 
+{ 
+	struct i2c_msg msg; 
+	int ret = -1; 
+	int retries = 0; 
+	
+	msg.flags |= I2C_M_RD; 
+	msg.addr   = client->addr;
+	msg.len    = len; 
+	msg.buf    = buf;	
+
+	while (retries < 2) { 
+		ret = i2c_transfer(client->adapter, &msg, 1); 
+		if(ret == 1)
+			break; 
+		retries++; 
+	} 
+	
+	return ret; 
+} 
+
+
+/*******************************************************
+Function:
+    read data from register.
+Input:
+    buf: first two byte is register addr, then read data store into buf
+    len: length of data that to read
+Output:
+    success: number of messages
+    fail:	negative errno
+*******************************************************/
+static int cst3xx_i2c_read_register(struct i2c_client *client, unsigned char *buf, int len) 
+{ 
+	struct i2c_msg msgs[2]; 
+	int ret = -1; 
+	int retries = 0; 
+	
+	msgs[0].flags = client->flags & I2C_M_TEN;
+	msgs[0].addr  = client->addr;  
+	msgs[0].len   = 2;
+	msgs[0].buf   = buf; 
+
+	msgs[1].flags |= I2C_M_RD;
+	msgs[1].addr   = client->addr; 
+	msgs[1].len    = len; 
+	msgs[1].buf    = buf;
+
+	while (retries < 2) { 
+		ret = i2c_transfer(client->adapter, msgs, 2); 
+		if(ret == 2)
+			break; 
+		retries++; 
+	} 
+	
+	return ret; 
+} 
+
+static int cst3xx_i2c_write(struct i2c_client *client, unsigned char *buf, int len) 
+{ 
+	struct i2c_msg msg; 
+	int ret = -1; 
+	int retries = 0;
+
+	msg.flags = client->flags & I2C_M_TEN; 
+	msg.addr  = client->addr; 
+	msg.len   = len; 
+	msg.buf   = buf;		  
+	  
+	while (retries < 2) { 
+		ret = i2c_transfer(client->adapter, &msg, 1); 
+		if(ret == 1)
+			break; 
+		retries++; 
+	} 	
+	
+	return ret; 
+}
+
+#else
+static int cst3xx_i2c_read(struct i2c_client *client, unsigned char *buf, int len) 
+{ 
+	int ret = -1; 
+	int retries = 0; 
+
+	while (retries < 2) { 
+		ret = i2c_master_recv(client, buf, len); 
+		if(ret<=0) 
+		    retries++;
+        else
+            break; 
+	} 
+	
+	return ret; 
+} 
+
+static int cst3xx_i2c_write(struct i2c_client *client, unsigned char *buf, int len) 
+{ 
+	int ret = -1; 
+	int retries = 0; 
+
+	while (retries < 2) { 
+		ret = i2c_master_send(client, buf, len); 
+		if(ret<=0) 
+		    retries++;
+        else
+            break; 
+	} 
+	
+	return ret; 
+}
+
+static int cst3xx_i2c_read_register(struct i2c_client *client, unsigned char *buf, int len) 
+{ 
+	int ret = -1; 
+    
+    ret = cst3xx_i2c_write(client, buf, 2);
+
+    ret = cst3xx_i2c_read(client, buf, len);
+	
+    return ret; 
+} 
+#endif
+
+static void cst3xx_reset_ic(unsigned int ms)
+{
+#ifndef CONFIG_IWG27M
+	/* IWG27M: Touch Software Reset not used */
+	unsigned char buf[4];	
+	buf[0] = 0xD1;	
+	buf[1] = 0x0E;	 	
+	cst3xx_i2c_write(g_i2c_client, buf, 2);
+#else
+	gpio_direction_output(HYN_RESET_PIN, 0);   
+	msleep(50);  
+	gpio_direction_output(HYN_RESET_PIN,1);
+#endif
+	mdelay(ms);
+}
+
+/*******************************************************
+Function:
+    test i2c communication
+Input:
+    client: i2c client
+Output:
+
+    success: big than 0
+    fail:	negative
+*******************************************************/
+static int cst3xx_i2c_test(struct i2c_client *client)
+{
+	int retry = 0;
+	int ret;
+	unsigned char buf[4];
+
+	buf[0] = 0xD1;
+	buf[1] = 0x06;
+	while (retry++ < 5) {
+		ret = cst3xx_i2c_write(client, buf, 2);
+		if (ret > 0)
+			return ret;
+		
+		mdelay(2);		
+	}
+
+    if(retry==5) printk("linc cst3xx hyn I2C TEST error.ret:%d;\n", ret);
+	
+	return ret;
+}
+
+static s32 irq_is_disable = 0;
+
+void cst3xx_irq_enable(struct cst3xx_ts_data *ts)
+{
+	unsigned long irqflags = 0;
+
+	GTP_DEBUG_FUNC(); 
+	
+	spin_lock_irqsave(&ts->irq_lock, irqflags);
+	if (irq_is_disable) {
+		enable_irq(ts->client->irq);
+		irq_is_disable = 0;
+	}
+	spin_unlock_irqrestore(&ts->irq_lock, irqflags);
+}
+
+void cst3xx_irq_disable(struct cst3xx_ts_data *ts)
+{
+	unsigned long irqflags;
+	
+	GTP_DEBUG_FUNC(); 
+	spin_lock_irqsave(&ts->irq_lock, irqflags);
+	if (!irq_is_disable) {
+		irq_is_disable = 1;
+		disable_irq_nosync(ts->client->irq);
+	}
+	spin_unlock_irqrestore(&ts->irq_lock, irqflags);
+}
+
+
+#ifdef HYN_GESTURE
+void hyn_key_report(int key_value)
+{
+	input_report_key(g_input_dev, key_value, 1);
+	input_sync(g_input_dev);	
+	input_report_key(g_input_dev, key_value, 0);
+	input_sync(g_input_dev);
+}
+#endif
+
+static irqreturn_t cst3xx_ts_irq_handler(int irq, void *dev_id)
+{
+	struct cst3xx_ts_data *ts=NULL;
+	GTP_DEBUG_FUNC(); 
+	ts=dev_id;
+	if(!ts)
+	{
+		return IRQ_NONE;
+	}
+	queue_work(cst3xx_wq, &ts->work);
+    cst3xx_irq_disable(ts);
+	return IRQ_HANDLED;
+}
+
+static void cst3xx_touch_down(struct input_dev *input_dev,s32 id,s32 x,s32 y,s32 w)
+{
+	s32 temp_w = (w>>2);
+#ifdef ICS_SLOT_REPORT
+	input_mt_slot(input_dev, id);
+	input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, 1);
+	input_report_abs(input_dev, ABS_MT_TRACKING_ID, id);
+	input_report_abs(input_dev, ABS_MT_POSITION_X, x);
+	input_report_abs(input_dev, ABS_MT_POSITION_Y, y);
+	input_report_abs(input_dev, ABS_MT_TOUCH_MAJOR, temp_w);
+	input_report_abs(input_dev, ABS_MT_WIDTH_MAJOR, temp_w);
+	input_report_abs(input_dev, ABS_MT_PRESSURE, temp_w);
+#else    
+	input_report_key(input_dev, BTN_TOUCH, 1);
+	input_report_abs(input_dev, ABS_MT_POSITION_X, x);
+	input_report_abs(input_dev, ABS_MT_POSITION_Y, y);
+	input_report_abs(input_dev, ABS_MT_TOUCH_MAJOR, temp_w);
+	input_report_abs(input_dev, ABS_MT_WIDTH_MAJOR, temp_w);
+	input_report_abs(input_dev, ABS_MT_PRESSURE, temp_w);
+	input_report_abs(input_dev, ABS_MT_TRACKING_ID, id);
+	input_mt_sync(input_dev);
+#endif
+}
+static void cst3xx_touch_up(struct input_dev *input_dev, int id)
+{
+#ifdef ICS_SLOT_REPORT
+    input_mt_slot(input_dev, id);
+    input_report_abs(input_dev, ABS_MT_TRACKING_ID, -1);
+    input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, 0);
+#else
+    input_report_key(input_dev, BTN_TOUCH, 0);
+    input_mt_sync(input_dev);
+#endif
+}
+
+#ifdef ANDROID_TOOL_SURPORT   //debug tool support
+#define CST3XX_PROC_DIR_NAME	"cst1xx_ts"
+#define CST3XX_PROC_FILE_NAME	"cst1xx-update"
+static struct proc_dir_entry *g_proc_dir, *g_update_file;
+static int CMDIndex = 0;
+
+static struct file *cst3xx_open_fw_file(char *path, mm_segment_t * old_fs_p)
+{
+	struct file * filp;
+	int ret;
+	
+	*old_fs_p = get_fs();
+	set_fs(KERNEL_DS);
+	filp = filp_open(path, O_RDONLY, 0);
+	if (IS_ERR(filp)) 
+	{
+        ret = PTR_ERR(filp);
+        return NULL;
+    }
+    filp->f_op->llseek(filp, 0, 0);
+	
+    return filp;
+}
+
+static void cst3xx_close_fw_file(struct file * filp,mm_segment_t old_fs)
+{
+	set_fs(old_fs);
+	if(filp)
+	    filp_close(filp,NULL);
+}
+
+static int cst3xx_read_fw_file(unsigned char *filename, unsigned char *pdata, int *plen)
+{
+	struct file *fp;
+	mm_segment_t old_fs;
+	int size;
+	int length;
+	int ret = -1;
+
+	if((pdata == NULL) || (strlen(filename) == 0)) 
+		return ret;
+		
+	fp = cst3xx_open_fw_file(filename, &old_fs);
+	if(fp == NULL) 
+	{		
+        printk("Open bin file faild.path:%s.\n", filename);
+		goto clean;
+	}
+	
+	length = fp->f_op->llseek(fp, 0, SEEK_END); 
+	fp->f_op->llseek(fp, 0, 0);	
+	size = fp->f_op->read(fp, pdata, length, &fp->f_pos);
+	if(size == length) 
+	{
+    	ret = 0;
+    	*plen = length;
+	} 	
+	else
+	{
+		printk("read bin file length fail****size:%d*******length:%d .\n", size,length);
+
+	}
+
+clean:
+	cst3xx_close_fw_file(fp, old_fs);
+	return ret;
+}
+
+
+static int cst3xx_apk_fw_dowmload(struct i2c_client *client,
+		unsigned char *pdata, int length) 
+{ 
+
+#ifdef 	HYN_UPDATE_FIRMWARE_ONLINE
+{	
+		int ret=-1;	
+		pcst3xx_update_firmware=(unsigned char *)pdata;
+		ret = cst3xx_update_firmware(g_i2c_client, pdata);
+		return ret;
+}	
+#endif
+
+	return 0;
+}
+
+static ssize_t cst3xx_proc_read_foobar(struct file *page,char __user *user_buf, size_t count, loff_t *data)
+{	
+	unsigned char buf[512];
+	int len = 0;	
+	int ret,read_count,time_out;
+
+	printk(" linc cst3xx is entering cst3xx_proc_read_foobar.\n");
+	cst3xx_irq_disable(g_ts);
+		
+	if (CMDIndex == 0) {
+		sprintf(buf,"Hynitron touchscreen driver 1.0\n");
+		len = strlen(buf);
+		ret = copy_to_user(user_buf,buf,len);
+		
+	}
+	else if (CMDIndex == 1) {
+		buf[0] = g_cst3xx_rx;
+		buf[1] = g_cst3xx_tx;
+		ret = copy_to_user(user_buf,buf,2);
+    	len = 2;
+	}
+	if((CMDIndex == 2 )|| (CMDIndex == 3)||(CMDIndex == 4))
+	{		
+		unsigned short rx,tx;
+		int data_len;
+		
+		rx = g_cst3xx_rx;
+		tx = g_cst3xx_tx;
+		data_len = rx*tx*2 + 4 + (tx+rx)*2 + rx + rx; //374
+
+
+		buf[0] = 0xD1;
+		buf[1] = 0x18;  
+		ret = cst3xx_i2c_write(g_i2c_client, buf, 2);
+		if(ret < 0)
+		{				
+			printk("Write command(0x8001) failed.error:%d.\n", ret);
+			goto END;
+		}	
+
+
+		
+		if(CMDIndex == 2)  //read diff
+		{
+			buf[0] = 0xD1;
+			buf[1] = 0x0D;
+		}
+		else  if(CMDIndex == 3)        //rawdata
+		{  
+			buf[0] = 0xD1;
+			buf[1] = 0x0A;
+		}
+		else if(CMDIndex == 4)          //factory test
+		{  
+			buf[0] = 0xD1;
+			buf[1] = 0x19;
+			data_len = rx*tx*4 +(4 + tx + rx)*2;
+		}
+				
+		ret = i2c_master_send(g_i2c_client, buf, 2);  
+		if(ret < 0) 
+		{			
+			printk("Write command raw/diff mode failed:%d.\n", ret);
+			goto END;
+		}
+
+    	
+
+		g_unnormal_mode = 1;
+		mdelay(14);
+
+		time_out=60;
+		while(!gpio_get_value(g_irq_pin)){
+	
+			mdelay(1);
+			time_out--;
+			if(time_out==0){
+				goto END;
+			}
+		};
+		
+ 			
+
+#ifdef TRANSACTION_LENGTH_LIMITED
+		
+	    buf[0] = 0x80;
+		buf[1] = 0x01;		
+		ret = cst3xx_i2c_write(g_i2c_client, buf, 2);
+		if(ret < 0)
+		{				
+			printk("Write command(0x8001) failed.error:%d.\n", ret);
+			goto END;
+		}
+				
+
+		for(read_count=0;read_count<data_len;read_count+=6){
+
+			ret = cst3xx_i2c_read(g_i2c_client, &buf[2+read_count], 6);
+			if(ret < 0) 		
+			{
+				printk("Read raw/diff data failed.error:%d.\n", ret);
+				goto END;
+			}	
+		}	
+
+		
+		buf[0] = 0xD1;
+		buf[1] = 0x17;  
+		ret = cst3xx_i2c_write(g_i2c_client, buf, 2);
+		if(ret < 0)
+		{				
+			printk("Write command(0x8001) failed.error:%d.\n", ret);
+			goto END;
+		}	
+
+#else
+
+
+    	buf[0] = 0x80;
+		buf[1] = 0x01;		
+		ret = cst3xx_i2c_write(g_i2c_client, buf, 2);
+		if(ret < 0)
+		{				
+			printk("Write command(0x8001) failed.error:%d.\n", ret);
+			goto END;
+		}	
+		ret = cst3xx_i2c_read(g_i2c_client, &buf[2], data_len);
+		if(ret < 0) 		
+		{
+			printk("Read raw/diff data failed.error:%d.\n", ret);
+			goto END;
+		}	
+
+
+#endif
+		
+		
+		mdelay(2);
+		
+		buf[0] = 0xD1;
+		buf[1] = 0x08;		
+		ret = cst3xx_i2c_write(g_i2c_client, buf, 2); 		
+		if(ret < 0) 
+		{				
+			printk("Write command normal mode failed.error:%d.\n", ret);
+			goto END;
+		}	
+		
+		buf[0] = rx;
+		buf[1] = tx;	
+    	ret = copy_to_user(user_buf,buf,data_len + 2);
+    	len = data_len + 2;
+
+		mdelay(2);
+	}	
+
+END:	
+	g_unnormal_mode = 0;	
+	CMDIndex = 0;	
+	cst3xx_irq_enable(g_ts);
+	return len;
+}
+
+static ssize_t cst3xx_proc_write_foobar(struct file *file, const char __user *buffer,size_t count, loff_t *data)
+{
+    unsigned char cmd[128];
+    unsigned char *pdata = NULL;
+	int len;
+	int ret;
+    int length = 24*1024;
+
+	if (count > 128) 
+		len = 128;
+	else 
+		len = count;
+
+   printk(" linc cst3xx is entering cst3xx_proc_write_foobar .\n");
+    
+	if (copy_from_user(cmd, buffer, len))  {
+		printk("linc cst3xxcopy data from user space failed.\n");
+		return -EFAULT;
+	}
+	
+	 printk(" linc cmd:%d......%d.......len:%d\r\n", cmd[0], cmd[1], len);
+	
+	if (cmd[0] == 0) {
+	    pdata = kzalloc(sizeof(char)*length, GFP_KERNEL);
+	    if(pdata == NULL) {
+	        printk("linc cst3xxzalloc GFP_KERNEL memory fail.\n");
+	        return -ENOMEM;
+	    }
+		ret = cst3xx_read_fw_file(&cmd[1], pdata, &length);
+	  	if(ret < 0) {
+			if(pdata != NULL) {
+				kfree(pdata);
+				pdata = NULL;	
+			}				
+			return -EPERM;
+	  	}
+		
+		ret = cst3xx_apk_fw_dowmload(g_i2c_client, pdata, length);
+	  	if(ret < 0){
+	        printk("linc cst3xxupdate firmware failed.\n");
+			if(pdata != NULL) {
+				kfree(pdata);
+				pdata = NULL;	
+			}	
+	        return -EPERM;
+		}
+        mdelay(50);
+		
+		cst3xx_firmware_info(g_i2c_client);    
+		
+		if(pdata != NULL) {
+			kfree(pdata);
+			pdata = NULL;	
+		}
+	}
+	else if (cmd[0] == 2) {					
+		CMDIndex = cmd[1];			
+	}			
+	else if (cmd[0] == 3) {				
+		CMDIndex = 0;		
+	}	
+			
+	return count;
+}
+
+static const struct file_operations proc_tool_debug_fops = {
+
+	.owner		= THIS_MODULE,
+
+	.read	    = cst3xx_proc_read_foobar,
+
+	.write		= cst3xx_proc_write_foobar, 
+
+	
+
+};
+
+
+
+static int  cst3xx_proc_fs_init(void)
+
+{
+
+	int ret;	
+
+	g_proc_dir = proc_mkdir(CST3XX_PROC_DIR_NAME, NULL);
+
+	if (g_proc_dir == NULL) {
+
+		ret = -ENOMEM;
+
+		goto out;
+
+	}
+
+   g_update_file = proc_create(CST3XX_PROC_FILE_NAME, 0777, g_proc_dir,&proc_tool_debug_fops);
+
+   if (g_update_file == NULL)
+
+   {
+
+      ret = -ENOMEM;
+
+      goto no_foo;
+
+   }
+	return 0;
+
+no_foo:
+
+	remove_proc_entry(CST3XX_PROC_FILE_NAME, g_proc_dir);
+
+out:
+
+	return ret;
+
+}
+
+
+#define PROC_TP_VERSION "driver/tp_version"
+static char mtk_tp_version[128] = {0};
+
+static int tp_info_version_read(struct seq_file *m, void *v)
+{
+    struct input_dev *input_dev =g_input_dev;
+    unsigned int fwver = 0;
+
+    mutex_lock(&input_dev->mutex);
+
+	fwver=g_cst3xx_ic_version;
+	
+    if ((fwver == 0xFF) || (fwver == 0x00))
+              printk("get tp fw version fail!!\n"); 
+    else
+      sprintf(mtk_tp_version,"0x%02x,0x%02x",g_cst3xx_ic_version,g_cst3xx_ic_checksum);
+
+     seq_printf(m, "%s\n",mtk_tp_version);
+
+     mutex_unlock(&input_dev->mutex);
+	
+   return 0;
+};
+
+static int proc_tp_version_open_cst3xx(struct inode *inode, struct file *file)
+{
+    return single_open(file, tp_info_version_read, NULL);
+};
+
+static  struct file_operations tp_version_proc_fops1 = {
+    .owner = THIS_MODULE,
+    .open  = proc_tp_version_open_cst3xx,
+    .read  = seq_read,
+};
+////steven add end 20181024	 
+
+#endif
+
+
+#ifdef CONFIG_TP_ESD_PROTECT
+
+static int esd_work_cycle = 200;
+static struct delayed_work esd_check_work;
+static int esd_running;
+struct mutex esd_lock;
+static void cst3xx_esd_check_func(struct work_struct *);
+
+
+void cst3xx_init_esd_protect(void)
+{
+    esd_work_cycle = 2 * HZ;	/*HZ: clock ticks in 1 second generated by system*/
+	printk(" linc Clock ticks for an esd cycle: %d", esd_work_cycle);
+	INIT_DELAYED_WORK(&esd_check_work, cst3xx_esd_check_func);
+	mutex_init(&esd_lock);
+
+
+}
+	
+void cst3xx_esd_switch(s32 on)
+{
+	mutex_lock(&esd_lock);
+	if (SWITCH_ESD_ON == on) {	/* switch on esd check */
+		if (!esd_running) {
+			esd_running = 1;
+			printk(" linc Esd protector started!");
+			queue_delayed_work(cst3xx_esd_workqueue, &esd_check_work, esd_work_cycle);
+		}
+	} else {		/* switch off esd check */
+		if (esd_running) {
+			esd_running = 0;
+			printk(" linc Esd protector stopped!");
+			cancel_delayed_work(&esd_check_work);
+		}
+	}
+	mutex_unlock(&esd_lock);
+
+}
+
+
+static void cst3xx_esd_check_func(struct work_struct *work)
+{
+	
+    int retry = 0;
+	int ret;
+	unsigned char buf[4];
+
+	if (!esd_running) {
+	printk(" linc Esd protector suspended!");
+	return;
+	}
+
+	buf[0] = 0xD0;
+	buf[1] = 0x4C;
+	
+	while(retry++ < 3) {
+		ret = cst3xx_i2c_read_register(g_i2c_client, buf, 1);
+		if (ret > 0) break;
+		
+		mdelay(2);		
+	}
+
+    if((retry>3) || ((buf[0]!=128)&&(buf[0]!=140)&&(buf[0]!=148))) {
+		
+
+		cst3xx_reset_ic(10);
+    }
+	
+	mutex_lock(&esd_lock);
+	if (esd_running)
+		queue_delayed_work(cst3xx_esd_workqueue, &esd_check_work, esd_work_cycle);
+	else
+		printk(" linc Esd protector suspended!");
+	mutex_unlock(&esd_lock);
+}
+
+#endif
+
+
+
+/*******************************************************
+Function:
+    get firmware version, ic type...
+Input:
+    client: i2c client
+Output:
+    success: 0
+    fail:	-1
+*******************************************************/
+static int cst3xx_firmware_info(struct i2c_client * client)
+{
+	int ret;
+	unsigned char buf[28];
+
+	
+	buf[0] = 0xD1;
+	buf[1] = 0x01;
+	ret = cst3xx_i2c_write(client, buf, 2);
+	if (ret < 0) return -1;
+	
+	mdelay(10);
+
+	buf[0] = 0xD2;
+	buf[1] = 0x08;
+	ret = cst3xx_i2c_read_register(client, buf, 8);
+	if (ret < 0) return -1;	
+
+	g_cst3xx_ic_version = buf[3];
+	g_cst3xx_ic_version <<= 8;
+	g_cst3xx_ic_version |= buf[2];
+	g_cst3xx_ic_version <<= 8;
+	g_cst3xx_ic_version |= buf[1];
+	g_cst3xx_ic_version <<= 8;
+	g_cst3xx_ic_version |= buf[0];
+
+	g_cst3xx_ic_checksum = buf[7];
+	g_cst3xx_ic_checksum <<= 8;
+	g_cst3xx_ic_checksum |= buf[6];
+	g_cst3xx_ic_checksum <<= 8;
+	g_cst3xx_ic_checksum |= buf[5];
+	g_cst3xx_ic_checksum <<= 8;
+	g_cst3xx_ic_checksum |= buf[4];	
+
+	printk("linc cst3xx [cst3xx] the chip ic version:0x%x, checksum:0x%x\r\n",
+		g_cst3xx_ic_version, g_cst3xx_ic_checksum);
+
+	if(g_cst3xx_ic_version==0xA5A5A5A5)
+	{
+		printk("linc cst3xx [cst3xx] the chip ic don't have firmware. \n");
+		return -1;
+	}
+
+    buf[0] = 0xD1;
+	buf[1] = 0x09;
+	ret = cst3xx_i2c_write(client, buf, 2);
+	if (ret < 0) return -1;
+    mdelay(5);
+	
+	
+	return 0;
+}
+
+
+#ifdef 	HYN_UPDATE_FIRMWARE_ONLINE
+
+/*******************************************************
+Function:
+    read checksum in bootloader mode
+Input:
+    client: i2c client
+    strict: check checksum value
+Output:
+    success: 0
+    fail:	-1
+*******************************************************/
+
+#define CST3XX_BIN_SIZE    (24*1024 + 24)
+
+static int cst3xx_check_checksum(struct i2c_client * client)
+{
+	int ret;
+	int i;
+	unsigned int  checksum;
+	unsigned int  bin_checksum;
+	unsigned char buf[4];
+	const unsigned char *pData;
+
+	for(i=0; i<5; i++)
+	{
+		buf[0] = 0xA0;
+		buf[1] = 0x00;
+		ret = cst3xx_i2c_read_register(client, buf, 1);
+		if(ret < 0)
+		{
+			mdelay(2);
+			continue;
+		}
+
+		if(buf[0]!=0)
+			break;
+		else
+		mdelay(2);
+	}
+    mdelay(2);
+
+
+    if(buf[0]==0x01)
+	{
+		buf[0] = 0xA0;
+		buf[1] = 0x08;
+		ret = cst3xx_i2c_read_register(client, buf, 4);
+		
+		if(ret < 0)	return -1;
+		
+		// read chip checksum
+		checksum = buf[0] + (buf[1]<<8) + (buf[2]<<16) + (buf[3]<<24);
+
+        pData=(unsigned char  *)pcst3xx_update_firmware +24*1024+16;   //7*1024 +512
+		bin_checksum = pData[0] + (pData[1]<<8) + (pData[2]<<16) + (pData[3]<<24);
+
+        printk(" linc hyn the updated ic checksum is :0x%x. the updating firmware checksum is:0x%x------\n", checksum, bin_checksum);
+    
+        if(checksum!=bin_checksum)
+		{
+			printk("linc cst3xx hyn check sum error.\n");		
+			return -1;
+			
+		}
+		
+	}
+	else
+	{
+		printk("linc cst3xx hyn No checksum.\n");
+		return -1;
+	}	
+	return 0;
+}
+static int cst3xx_into_program_mode(struct i2c_client * client)
+{
+	int ret;
+	unsigned char buf[4];
+	
+	buf[0] = 0xA0;
+	buf[1] = 0x01;	
+	buf[2] = 0xAA;	//set cmd to enter program mode		
+	ret = cst3xx_i2c_write(client, buf, 3);
+	if (ret < 0)  return -1;
+
+	mdelay(2);
+	
+	buf[0] = 0xA0;
+	buf[1] = 0x02;	//check whether into program mode
+	ret = cst3xx_i2c_read_register(client, buf, 1);
+	if (ret < 0)  return -1;
+	
+	if (buf[0] != 0x55) return -1;
+	
+	return 0;
+}
+
+static int cst3xx_exit_program_mode(struct i2c_client * client)
+{
+	int ret;
+	unsigned char buf[3];
+	
+	buf[0] = 0xA0;
+	buf[1] = 0x06;
+	buf[2] = 0xEE;
+	ret = cst3xx_i2c_write(client, buf, 3);
+	if (ret < 0)
+		return -1;
+	
+	mdelay(10);	//wait for restart
+
+	
+	return 0;
+}
+
+static int cst3xx_erase_program_area(struct i2c_client * client)
+{
+	int ret;
+	unsigned char buf[3];
+	
+	buf[0] = 0xA0;
+	buf[1] = 0x02;	
+	buf[2] = 0x00;		//set cmd to erase main area		
+	ret = cst3xx_i2c_write(client, buf, 3);
+	if (ret < 0) return -1;
+	
+	mdelay(5);
+	
+	buf[0] = 0xA0;
+	buf[1] = 0x03;
+	ret = cst3xx_i2c_read_register(client, buf, 1);
+	if (ret < 0)  return -1;
+	
+	if (buf[0] != 0x55) return -1;
+
+	return 0;
+}
+
+static int cst3xx_write_program_data(struct i2c_client * client,
+		const unsigned char *pdata)
+{
+	int i, ret;
+	unsigned char *i2c_buf;
+	unsigned short eep_addr;
+	int total_kbyte;
+#ifdef TRANSACTION_LENGTH_LIMITED
+	unsigned char temp_buf[8];
+	unsigned short iic_addr;
+	int  j;
+
+#endif
+	
+
+	i2c_buf = kmalloc(sizeof(unsigned char)*(1024 + 2), GFP_KERNEL);
+	if (i2c_buf == NULL) 
+		return -1;
+	
+	//make sure fwbin len is N*1K
+	//total_kbyte = len / 1024;
+	total_kbyte = 24;
+	for (i=0; i<total_kbyte; i++) {
+		i2c_buf[0] = 0xA0;
+		i2c_buf[1] = 0x14;
+		eep_addr = i << 10;		//i * 1024
+		i2c_buf[2] = eep_addr;
+		i2c_buf[3] = eep_addr>>8;
+		ret = cst3xx_i2c_write(client, i2c_buf, 4);
+		if (ret < 0)
+			goto error_out;
+
+
+
+
+	
+#ifdef TRANSACTION_LENGTH_LIMITED
+		memcpy(i2c_buf, pdata + eep_addr, 1024);
+		for(j=0; j<256; j++) {
+			iic_addr = (j<<2);
+    	temp_buf[0] = (iic_addr+0xA018)>>8;
+    	temp_buf[1] = (iic_addr+0xA018)&0xFF;
+		temp_buf[2] = i2c_buf[iic_addr+0];
+		temp_buf[3] = i2c_buf[iic_addr+1];
+		temp_buf[4] = i2c_buf[iic_addr+2];
+		temp_buf[5] = i2c_buf[iic_addr+3];
+    	ret = cst3xx_i2c_write(client, temp_buf, 6);
+    		if (ret < 0)
+    			goto error_out;		
+		}
+#else
+		
+		i2c_buf[0] = 0xA0;
+		i2c_buf[1] = 0x18;
+		memcpy(i2c_buf + 2, pdata + eep_addr, 1024);
+		ret = cst3xx_i2c_write(client, i2c_buf, 1026);
+		if (ret < 0)
+			goto error_out;
+#endif
+		
+		i2c_buf[0] = 0xA0;
+		i2c_buf[1] = 0x04;
+		i2c_buf[2] = 0xEE;
+		ret = cst3xx_i2c_write(client, i2c_buf, 3);
+		if (ret < 0)
+			goto error_out;
+		
+		mdelay(60);	
+		
+		i2c_buf[0] = 0xA0;
+		i2c_buf[1] = 0x05;
+		ret = cst3xx_i2c_read_register(client, i2c_buf, 1);
+		if (ret < 0)
+			goto error_out;
+		
+		if (i2c_buf[0] != 0x55)
+			goto error_out;
+
+	}
+	
+	i2c_buf[0] = 0xA0;
+	i2c_buf[1] = 0x03;
+	i2c_buf[2] = 0x00;
+	ret = cst3xx_i2c_write(client, i2c_buf, 3);
+	if (ret < 0)
+		goto error_out;
+	
+	mdelay(8);	
+	
+	if (i2c_buf != NULL) {
+		kfree(i2c_buf);
+		i2c_buf = NULL;
+	}
+
+	return 0;
+	
+error_out:
+	if (i2c_buf != NULL) {
+		kfree(i2c_buf);
+		i2c_buf = NULL;
+	}
+	return -1;
+}
+
+static int cst3xx_update_firmware(struct i2c_client * client, const unsigned char *pdata)
+{
+	int ret;
+	int retry = 0;
+	
+	printk("linc cst3xx----------upgrade cst3xx begain------------\n");
+	
+START_FLOW:	
+	
+	cst3xx_reset_ic(13);
+
+	ret = cst3xx_into_program_mode(client);
+	if (ret < 0) {
+		printk("linc cst3xx[cst3xx]into program mode failed.\n");
+		goto err_out;
+	}
+
+	ret = cst3xx_erase_program_area(client);
+	if (ret) {
+		printk("linc cst3xx[cst3xx]erase main area failed.\n");
+		goto err_out;
+	}
+
+	ret = cst3xx_write_program_data(client, pdata);
+	if (ret < 0) {
+		printk("linc cst3xx[cst3xx]write program data into cstxxx failed.\n");
+		goto err_out;
+	}
+
+    ret =cst3xx_check_checksum(client);
+	if (ret < 0) {
+		printk("linc cst3xx[cst3xx] after write program cst3xx_check_checksum failed.\n");
+		goto err_out;
+	}
+
+	ret = cst3xx_exit_program_mode(client);
+	if (ret < 0) {
+		printk("linc cst3xx[cst3xx]exit program mode failed.\n");
+		goto err_out;
+	}
+
+	cst3xx_reset_ic(10);
+	
+	printk("linc cst3xx hyn----------cst3xx_update_firmware  end------------\n");
+	
+	return 0;
+	
+err_out:
+	if (retry < 3) {
+		retry++;
+		goto START_FLOW;
+	} 
+	else {	
+		return -1;
+	}
+}
+
+static int cst3xx_update_judge( unsigned char *pdata, int strict)
+{
+	unsigned short ic_type, project_id;
+	unsigned int fw_checksum, fw_version;
+	const unsigned int *p;
+	int i;
+	unsigned char *pBuf;
+		
+	fw_checksum = 0x55;
+	p = (const unsigned int *)pdata;
+	for (i=0; i<(CST3XX_BIN_SIZE-4); i+=4) {
+		fw_checksum += (*p);
+		p++;
+	}
+	
+	if (fw_checksum != (*p)) {
+		printk("linc cst3xx[cst3xx]calculated checksum error:0x%x not equal 0x%x.\n", fw_checksum, *p);
+		return -1;	//bad fw, so do not update
+	}
+	
+	pBuf = &pdata[CST3XX_BIN_SIZE-16];
+	
+	project_id = pBuf[1];
+	project_id <<= 8;
+	project_id |= pBuf[0];
+
+	ic_type = pBuf[3];
+	ic_type <<= 8;
+	ic_type |= pBuf[2];
+
+	fw_version = pBuf[7];
+	fw_version <<= 8;
+	fw_version |= pBuf[6];
+	fw_version <<= 8;
+	fw_version |= pBuf[5];
+	fw_version <<= 8;
+	fw_version |= pBuf[4];
+
+	fw_checksum = pBuf[11];
+	fw_checksum <<= 8;
+	fw_checksum |= pBuf[10];
+	fw_checksum <<= 8;
+	fw_checksum |= pBuf[9];
+	fw_checksum <<= 8;
+	fw_checksum |= pBuf[8];	
+	
+	printk("linc cst3xx[cst3xx]the updating firmware:project_id:0x%04x,ic type:0x%04x,version:0x%x,checksum:0x%x\n",
+			project_id, ic_type, fw_version, fw_checksum);
+
+	if (strict > 0) {
+
+		if(fw_checksum==g_cst3xx_ic_checksum){
+				return -1;	
+		}else{
+
+			printk("linc cst3xx[cst3xx]the updating firmware:fw version(0x%x), the chip firmware:ic version(0x%x).\n",
+			fw_version, g_cst3xx_ic_version);
+			if (g_cst3xx_ic_version > fw_version) {
+				return -1;	
+			}
+
+		}		
+		
+	}	
+	
+	return 0;
+}
+
+static int cst3xx_boot_update_fw(struct i2c_client   *client,  unsigned char *pdata)
+{
+	int ret;
+	int retry = 0;
+	int flag = 0;
+
+	while (retry++ < 3) {
+		ret = cst3xx_firmware_info(client);
+		if (ret == 0) {
+			flag = 1;
+			break;
+		}
+	}
+	if (flag == 1) {
+		ret = cst3xx_update_judge(pdata, 1);
+		if (ret < 0) {
+			printk("linc cst3xx[cst3xx] no need to update firmware.\n");
+			return 0;
+		}
+	}
+	
+	ret = cst3xx_update_firmware(client, pdata);
+	if (ret < 0){
+		printk("linc cst3xx [cst3xx] update firmware failed.\n");
+		return -1;
+	}
+
+    mdelay(50);
+
+	ret = cst3xx_firmware_info(client);
+	if (ret < 0) {
+		printk("linc cst3xx [cst3xx] after update read version and checksum fail.\n");
+		return -1;
+	}
+
+	
+
+	return 0;
+}
+
+
+static int hyn_boot_update_fw(struct i2c_client * client)
+{
+	unsigned char *ptr_fw;
+	int ret;
+	ptr_fw = pcst3xx_update_firmware;
+	
+	ret = cst3xx_boot_update_fw(client, ptr_fw);
+    return ret;
+	
+}
+
+#endif
+
+
+static void cst3xx_touch_report(struct work_struct *work)
+{
+	unsigned char buf[30];
+	unsigned char i2c_buf[8];
+	unsigned char key_status, key_id = 0, finger_id, sw;
+	unsigned int  input_x = 0; 
+	unsigned int  input_y = 0; 
+	unsigned int  input_xy_swap = 0; 
+	unsigned int  input_w = 0;
+    unsigned char cnt_up, cnt_down;
+	int   i, ret, idx; 
+	int cnt, i2c_len;
+
+	struct cst3xx_ts_data *ts=NULL;
+#ifdef TRANSACTION_LENGTH_LIMITED
+	int  len_1, len_2;
+#endif
+	ts=container_of(work,struct cst3xx_ts_data,work);	
+
+	GTP_DEBUG_FUNC(); 
+
+#ifdef HYN_GESTURE
+    if((hyn_ges_wakeup_switch == 1)&&(tpd_halt == 1)){
+        int tmp_c;
+		int err;
+        buf[0] = 0xD0;
+		buf[1] = 0x4C;
+		err = cst3xx_i2c_read_register(g_i2c_client, buf, 1);
+        if(err < 0)
+        {
+        	printk("linc cst3xxiic read gesture flag failed.\n");
+        	goto OUT_PROCESS;
+        }
+		tmp_c=buf[0]&0x7F;
+
+		printk(" linc [HYN_GESTURE] tmp_c =%d \n",tmp_c);
+        if(1)
+        {
+           			
+			if(0 == hyn_lcd_flag){
+
+				switch(tmp_c){
+	                case 0x20:    //double
+						 hyn_key_report(KEY_I);
+						 hyn_gesture_c = (char)'*';
+						 break;
+	                case 0x3:     //left
+	                     hyn_key_report(KEY_F);
+						 hyn_gesture_c = (char)0xa1fb;
+						 break;
+	                case 0x1:     //right
+	                     hyn_key_report(KEY_R);
+						 hyn_gesture_c = (char)0xa1fa;
+						 break;
+	                case 0x2:     //up
+	                     hyn_key_report(KEY_K);
+						 hyn_gesture_c = (char)0xa1fc;
+						 break;
+					case 0x4:     //down
+						 hyn_key_report(KEY_L);
+						 hyn_gesture_c = (char)0xa1fd;
+						 break;
+	                case 0x5:     //O
+	                     hyn_key_report(KEY_O);
+						 hyn_gesture_c = (char)'O';
+						 break;
+	                case 0x0A:    //W
+	                     hyn_key_report(KEY_W);
+						 hyn_gesture_c = (char)'W';
+						 break;
+	                case 0x8: //M
+	                case 0x09:
+					case 0x0f:
+			  	    case 0x10:
+					case 0x15:
+						 hyn_key_report(KEY_M);
+						 hyn_gesture_c = (char)'M';
+						 break;
+	                case 0x07:            //E
+	                     hyn_key_report(KEY_E);
+						 hyn_gesture_c = (char)'E';
+						 break;
+	                case 0x6:       
+	                case 0x0e:      //C
+	                     hyn_key_report(KEY_C); 
+						 hyn_gesture_c = (char)'C';
+						 break;
+	                case 0x0C:            //S
+	                     hyn_key_report(KEY_S);
+						 hyn_gesture_c = (char)'S';
+						 break;
+	                case 0x0B:            //V
+	                     hyn_key_report(KEY_V);
+						 hyn_gesture_c = (char)'V';
+						 break;
+	                case 0x0D:            //Z
+	                     hyn_key_report(KEY_Z);
+						 hyn_gesture_c = (char)'Z';
+				         break;
+	                default:
+	                     break;
+					}
+
+			}
+            goto i2c_lock; 
+        }
+        
+    }
+#endif
+
+
+    key_status = 0;
+
+
+	buf[0] = 0xD0;
+	buf[1] = 0x00;
+	ret = cst3xx_i2c_read_register(g_i2c_client, buf, 7);
+	if(ret < 0) {
+		printk(" linc iic read touch point data failed.\n");
+		goto OUT_PROCESS;
+	}
+		
+	if(buf[6] != 0xAB) {
+		//printk(" linc data is not valid..\r\n");
+		goto OUT_PROCESS;
+	}
+
+	if(buf[5] == 0x80) {
+		key_status = buf[0];
+		key_id = buf[1];		
+		goto KEY_PROCESS;
+	} 
+	
+	cnt = buf[5] & 0x7F;
+	if(cnt > TPD_MAX_FINGERS) goto OUT_PROCESS;
+	else if(cnt==0)     goto CLR_POINT;
+	
+	if(cnt == 0x01) {
+		goto FINGER_PROCESS;
+	} 
+	else {
+		#ifdef TRANSACTION_LENGTH_LIMITED
+		if((buf[5]&0x80) == 0x80) //key
+		{
+			i2c_len = (cnt - 1)*5 + 3;
+			len_1   = i2c_len;
+			for(idx=0; idx<i2c_len; idx+=6) {
+			    i2c_buf[0] = 0xD0;
+				i2c_buf[1] = 0x07+idx;
+				
+				if(len_1>=6) {
+					len_2  = 6;
+					len_1 -= 6;
+				}
+				else {
+					len_2 = len_1;
+					len_1 = 0;
+				}
+				
+    			ret = cst3xx_i2c_read_register(g_i2c_client, i2c_buf, len_2);
+    			if(ret < 0) goto OUT_PROCESS;
+
+				for(i=0; i<len_2; i++) {
+                   buf[5+idx+i] = i2c_buf[i];
+				}
+			}
+			
+			i2c_len   += 5;
+			key_status = buf[i2c_len - 3];
+			key_id     = buf[i2c_len - 2];
+		} 
+		else {			
+			i2c_len = (cnt - 1)*5 + 1;
+			len_1   = i2c_len;
+			
+			for(idx=0; idx<i2c_len; idx+=6) {
+			    i2c_buf[0] = 0xD0;
+				i2c_buf[1] = 0x07+idx;
+				
+				if(len_1>=6) {
+					len_2  = 6;
+					len_1 -= 6;
+				}
+				else {
+					len_2 = len_1;
+					len_1 = 0;
+				}
+				
+    			ret = cst3xx_i2c_read_register(g_i2c_client, i2c_buf, len_2);
+    			if (ret < 0) goto OUT_PROCESS;
+
+				for(i=0; i<len_2; i++) {
+                   buf[5+idx+i] = i2c_buf[i];
+				}
+			}			
+			i2c_len += 5;
+		}
+		#else
+		if ((buf[5]&0x80) == 0x80) {
+			buf[5] = 0xD0;
+			buf[6] = 0x07;
+			i2c_len = (cnt - 1)*5 + 3;
+			ret = cst3xx_i2c_read_register(g_i2c_client, &buf[5], i2c_len);
+			if (ret < 0)
+				goto OUT_PROCESS;
+			i2c_len += 5;
+			key_status = buf[i2c_len - 3];
+			key_id = buf[i2c_len - 2];
+		} 
+		else {			
+			buf[5] = 0xD0;
+			buf[6] = 0x07;			
+			i2c_len = (cnt - 1)*5 + 1;
+			ret = cst3xx_i2c_read_register(g_i2c_client, &buf[5], i2c_len);
+			if (ret < 0)
+				goto OUT_PROCESS;
+			i2c_len += 5;
+		}
+		#endif
+
+		if (buf[i2c_len - 1] != 0xAB) {
+			goto OUT_PROCESS;
+		}
+	}	
+
+    //both key and point
+	if((cnt>0)&&(key_status&0x80))  {
+        if(report_flag==0xA5) goto KEY_PROCESS; 
+	}
+	
+FINGER_PROCESS:
+
+	i2c_buf[0] = 0xD0;
+	i2c_buf[1] = 0x00;
+	i2c_buf[2] = 0xAB;
+	ret = cst3xx_i2c_write(g_i2c_client, i2c_buf, 3);
+	if(ret < 0) {
+		printk("linc cst3xx hyn send read touch info ending failed.\r\n"); 
+		cst3xx_reset_ic(20);
+	}
+	
+	idx = 0;
+    cnt_up = 0;
+    cnt_down = 0;
+	for (i = 0; i < cnt; i++) {
+		
+		input_x = (unsigned int)((buf[idx + 1] << 4) | ((buf[idx + 3] >> 4) & 0x0F));
+		input_y = (unsigned int)((buf[idx + 2] << 4) | (buf[idx + 3] & 0x0F));	
+		input_w = (unsigned int)(buf[idx + 4]);
+		sw = (buf[idx] & 0x0F) >> 1;
+		finger_id = (buf[idx] >> 4) & 0x0F;
+
+        if(TPD_XY_REVER){
+			input_xy_swap= input_x;
+			input_x = input_y;
+			input_y = input_xy_swap;
+		} 
+		input_x = input_x*TPD_MAX_X/720;
+		input_y = input_y*TPD_MAX_Y/1280;
+		
+		if(TPD_X_REVER){		
+			input_x = TPD_MAX_X-input_x;
+		}   
+		if(TPD_Y_REVER){
+			input_y = TPD_MAX_Y-input_y;
+		}   
+
+	   
+        /*printk("linc cst3xx Point x:%d, y:%d, id:%d, sw:%d. \n", input_x, input_y, finger_id, sw);*/
+
+		if (sw == 0x03) {
+			cst3xx_touch_down(ts->input_dev, finger_id, input_x, input_y, input_w);
+            cnt_down++;
+        }
+		else {
+            cnt_up++;
+            #ifdef ICS_SLOT_REPORT
+			cst3xx_touch_up(ts->input_dev, finger_id);
+            #endif
+        }
+		idx += 5;
+	}
+    
+    #ifndef ICS_SLOT_REPORT
+    if((cnt_up>0) && (cnt_down==0))
+        cst3xx_touch_up(ts->input_dev, 0);
+    #endif
+
+	if(cnt_down==0)  report_flag = 0;
+	else report_flag = 0xCA;
+
+    input_sync(ts->input_dev);
+	goto END;
+
+KEY_PROCESS:
+
+	i2c_buf[0] = 0xD0;
+	i2c_buf[1] = 0x00;
+	i2c_buf[2] = 0xAB;
+	ret = cst3xx_i2c_write(g_i2c_client, i2c_buf, 3);
+	if (ret < 0) {
+		printk("linc cst3xx hyn send read touch info ending failed.\r\n");
+		cst3xx_reset_ic(20);
+	}
+	
+    #ifdef GTP_HAVE_TOUCH_KEY
+	if(key_status&0x80) {
+		i = (key_id>>4)-1;
+        if((key_status&0x7F)==0x03) {
+			if((i==key_index)||(key_index==0xFF)) {
+        		//cst3xx_touch_down(input_dev, 0, tpd_keys_dim_local[i][0], tpd_keys_dim_local[i][1], 50);
+                input_report_key(ts->input_dev, touch_key_array[i], 1);
+    			report_flag = 0xA5;
+				key_index   = i;
+			}
+			else {
+                input_report_key(ts->input_dev, touch_key_array[key_index], 0);
+				key_index = 0xFF;
+			}
+		}
+    	else {
+			input_report_key(ts->input_dev, touch_key_array[i], 0);
+            cst3xx_touch_up(ts->input_dev, 0);
+			report_flag = 0;	
+			key_index = 0xFF;
+    	}
+	}
+	#endif	
+
+    #ifdef TPD_HAVE_BUTTON
+	if(key_status&0x80) {
+		i = (key_id>>4)-1;
+        if((key_status&0x7F)==0x03) {
+			if((i==key_index)||(key_index==0xFF)) {
+        		cst3xx_touch_down(ts->input_dev, 0, tpd_keys_dim_local[i][0], tpd_keys_dim_local[i][1], 50);
+    			report_flag = 0xA5;
+				key_index   = i;
+			}
+			else {
+				
+				key_index = 0xFF;
+			}
+		}
+    	else {
+            cst3xx_touch_up(ts->input_dev, 0);
+			report_flag = 0;	
+			key_index = 0xFF;
+    	}
+	}
+    
+
+	#endif	
+	
+	input_sync(ts->input_dev);
+    goto END;
+
+CLR_POINT:
+#ifdef SLEEP_CLEAR_POINT
+	#ifdef ICS_SLOT_REPORT
+		for(i=0; i<=10; i++) {	
+			input_mt_slot(ts->input_dev, i);
+			input_report_abs(ts->input_dev, ABS_MT_TRACKING_ID, -1);
+			input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, false);
+		}
+	#else
+	    input_report_key(ts->input_dev, BTN_TOUCH, 0);
+		input_mt_sync(ts->input_dev);
+	#endif
+		input_sync(ts->input_dev);	
+#endif		
+		
+OUT_PROCESS:
+	buf[0] = 0xD0;
+	buf[1] = 0x00;
+	buf[2] = 0xAB;
+	ret = cst3xx_i2c_write(g_i2c_client, buf, 3);
+	if (ret < 0) {
+		printk(" linc send read touch info ending failed.\n");
+		cst3xx_reset_ic(20);
+	}
+
+#ifdef HYN_GESTURE	
+i2c_lock:
+     key_status = 0;
+	;
+#endif	
+
+
+	
+END:	
+
+    cst3xx_irq_enable(ts);
+	return;
+}
+
+#if   defined(CONFIG_FB)
+static void cst3xx_ts_resume_work(struct work_struct *work)
+{
+    struct cst3xx_ts_data *ts_data = container_of(work,struct cst3xx_ts_data, resume_work);
+
+    cst3xx_resume(ts_data);
+}
+/* frame buffer notifier block control the suspend/resume procedure */
+struct notifier_block cst3xx_fb_notifier;
+static int gtp_fb_notifier_callback(struct notifier_block *noti, unsigned long event, void *data)
+{
+	struct fb_event *ev_data = data;
+	int *blank;
+	struct cst3xx_ts_data *ts=NULL;
+	ts=i2c_get_clientdata(g_i2c_client);
+	if(!ts)
+	{
+		printk("cst3xx data pointor is null,no the device\n");
+		return -ENODEV;
+	}
+
+    #ifndef FB_EARLY_EVENT_BLANK
+        //error Need add FB_EARLY_EVENT_BLANK to fbmem.c
+    #endif
+
+
+	if (ev_data && ev_data->data && event == FB_EVENT_BLANK) {
+		blank = ev_data->data;
+        if (*blank == FB_BLANK_UNBLANK) {
+			printk("Resume by fb notifier.");
+			if(ts)
+			{
+				cst3xx_resume(ts);
+			}
+			else
+			{
+				printk("cst3xx ts pointer is null, resume fail\n");
+			}
+        }
+    }
+
+	if (ev_data && ev_data->data && event == FB_EVENT_BLANK) {
+		blank = ev_data->data;
+        if (*blank == FB_BLANK_POWERDOWN) {
+			printk("Suspend by fb notifier.");
+			if(ts)
+			{
+				cst3xx_suspend(ts);
+			}
+			else
+			{
+				printk("cst3xx ts pointer is null, suspend fail\n");
+			}
+		}
+	}
+
+	return 0;
+}
+#endif
+
+
+#if defined(CONFIG_PM)
+
+static int cst3xx_pm_suspend(struct device *dev)
+{
+	struct cst3xx_ts_data *ts=NULL;
+	ts=i2c_get_clientdata(g_i2c_client);
+	if(!ts)
+	{
+		printk("%s failed\n",__func__);
+		return -1;
+	}
+    return cst3xx_suspend(ts);
+}
+static int cst3xx_pm_resume(struct device *dev)
+{
+	struct cst3xx_ts_data *ts=NULL;
+	ts=i2c_get_clientdata(g_i2c_client);
+	if(!ts)
+	{
+		return -1;
+	}
+	return cst3xx_resume(ts);
+}
+
+/* bus control the suspend/resume procedure */
+static const struct dev_pm_ops cst3xx_ts_pm_ops = {
+	.suspend = cst3xx_pm_suspend,
+	.resume = cst3xx_pm_resume,
+};
+
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+/* earlysuspend module the suspend/resume procedure */
+static void cst3xx_ts_early_suspend(struct early_suspend *h)
+{
+	struct cst3xx_ts_data *ts=NULL;
+	ts=i2c_get_clientdata(g_i2c_client);
+	if(!ts);
+	{
+		printk("%s failed\n",__func__);
+		return;
+	}
+	cst3xx_suspend(ts);
+}
+
+static void cst3xx_ts_late_resume(struct early_suspend *h)
+{
+	struct cst3xx_ts_data *ts=NULL;
+	ts=i2c_get_clientdata(g_i2c_client);
+	if(!ts);
+	{
+		printk("%s failed\n",__func__);
+		return;
+	}
+
+	cst3xx_resume(ts);
+}
+static struct early_suspend cst3xx_early_suspend = {
+	.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1,
+	.suspend = cst3xx_ts_early_suspend,
+	.resume = cst3xx_ts_late_resume,
+};
+#endif
+
+
+static s32 cst3xx_request_irq(struct cst3xx_ts_data *ts)
+{
+	s32 ret = -1;
+	ret = request_irq(ts->client->irq, cst3xx_ts_irq_handler, IRQ_TYPE_EDGE_RISING, ts->client->name, ts);
+	if (ret) {
+		printk("Request IRQ failed!ERRNO:%d.", ret);
+		gpio_direction_input(ts->pdata->irq_gpio);
+		gpio_free(ts->pdata->irq_gpio);
+
+		return -1;
+	} else {
+		cst3xx_irq_disable(ts);
+		return 0;
+	}
+}
+static s8 cst3xx_request_input_dev(struct cst3xx_ts_data *ts)
+{
+	s8 ret = -1;
+
+	ts->input_dev = input_allocate_device();
+	if (ts->input_dev == NULL) {
+		printk("Failed to allocate input device.");
+		return -ENOMEM;
+	}
+
+	ts->input_dev->evbit[0] = BIT_MASK(EV_SYN) | BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS);
+#ifdef ICS_SLOT_REPORT 
+    input_mt_init_slots(ts->input_dev, 16, INPUT_MT_DIRECT);
+#else
+	ts->input_dev->keybit[BIT_WORD(BTN_TOUCH)] = BIT_MASK(BTN_TOUCH);
+#endif
+	set_bit(INPUT_PROP_DIRECT, ts->input_dev->propbit);
+
+
+#ifdef HYN_GESTURE
+	input_set_capability(ts->input_dev, EV_KEY, KEY_GES_REGULAR);
+    input_set_capability(ts->input_dev, EV_KEY, KEY_GES_CUSTOM);
+#endif
+
+	input_set_abs_params(ts->input_dev, ABS_MT_PRESSURE,    0, 255, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_WIDTH_MAJOR, 0, 200, 0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_TRACKING_ID, 0,(5+1),0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_POSITION_X, 0, TPD_MAX_X,0, 0);
+	input_set_abs_params(ts->input_dev, ABS_MT_POSITION_Y, 0, TPD_MAX_Y,0, 0);
+
+	ts->input_dev->name = TPD_DRIVER_NAME;
+	ts->input_dev->phys = INPUT_DEV_PHYS;
+	ts->input_dev->id.bustype = BUS_I2C;
+	ts->input_dev->id.vendor = 0xDEAD;
+	ts->input_dev->id.product = 0xBEEF;
+	ts->input_dev->id.version = 10427;
+
+	ret = input_register_device(ts->input_dev);
+	if (ret) {
+		printk("Register %s input device failed", ts->input_dev->name);
+		return -ENODEV;
+	}
+
+#if   defined(CONFIG_FB)
+		INIT_WORK(&ts->resume_work,cst3xx_ts_resume_work);
+		ts->fb_notif.notifier_call = gtp_fb_notifier_callback;
+		fb_register_client(&ts->fb_notif);
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+		ts->early_suspend.suspend=cst3xx_ts_early_suspend;
+		ts->early_suspend.resume=cst3xx_ts_late_resume;
+		register_early_suspend(&ts->early_suspend);
+#endif
+
+	return 0;
+}
+
+
+
+static s32 cst3xx_request_io_port(struct cst3xx_ts_data *ts)
+{
+	s32 ret = 0;
+
+	if(!ts)
+		return -ENODEV;
+	
+	ret = gpio_request(ts->pdata->irq_gpio, "HYN_INT_IRQ");
+	if (ret < 0) {
+		printk("Failed to request GPIO:%d, ERRNO:%d", ts->pdata->irq_gpio, ret);
+		ret = -ENODEV;
+		return ret;
+	}
+	ts->client->irq = gpio_to_irq(ts->pdata->irq_gpio);
+
+	ret = gpio_request(ts->pdata->reset_gpio, "HYN_RST_PORT");
+	if (ret < 0) {
+		printk("Failed to request GPIO:%d, ERRNO:%d", ts->pdata->reset_gpio, ret);
+		ret = -ENODEV;
+	}
+	gpio_direction_input(ts->pdata->reset_gpio);
+	if (ret < 0) {
+		gpio_free(ts->pdata->reset_gpio);
+		gpio_free(ts->pdata->irq_gpio);
+	}
+
+	return ret;
+}
+
+
+static int cst3xx_ts_get_dt_coords(struct device *dev, char *name,struct cst3xx_ts_platform_data *pdata)
+{
+	struct property *prop=NULL;
+	struct device_node *np = dev->of_node;
+	int rc;
+	u32 coords[4];
+
+	prop = of_find_property(np, name, NULL);
+	if (!prop)
+		return -EINVAL;
+	if (!prop->value)
+		return -ENODATA;
+
+	rc = of_property_read_u32_array(np, name, coords,4);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read %s\n", name);
+		return rc;
+	}
+
+	if (!strcmp(name, "hynitron,panel-coords")) {
+		pdata->panel_minx = coords[0];
+		pdata->panel_miny = coords[1];
+		pdata->panel_maxx = coords[2];
+		pdata->panel_maxy = coords[3];
+	} else if (!strcmp(name, "hynitron,display-coords")) {
+		pdata->x_min = coords[0];
+		pdata->y_min = coords[1];
+		pdata->x_max = coords[2];
+		pdata->y_max = coords[3];
+	} else {
+		dev_err(dev, "unsupported property %s\n", name);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+static int cst3xx_parse_dt(struct device *dev,struct cst3xx_ts_platform_data *pdata)
+{
+	struct device_node *np;
+	int ret = 0;
+
+    if (!dev)
+        return -ENODEV;
+    
+    np = dev->of_node;
+	ret = cst3xx_ts_get_dt_coords(dev, "hynitron,panel-coords", pdata);
+	if (ret && (ret != -EINVAL))
+		return ret;
+	ret = cst3xx_ts_get_dt_coords(dev, "hynitron,display-coords", pdata);
+	if (ret)
+		return ret;
+
+	pdata->reset_gpio= of_get_named_gpio_flags(np, "hynitron,rst-gpio",0, &pdata->reset_gpio_flags);
+	if (pdata->reset_gpio < 0)
+	{
+		printk("CST3XX Invalid GPIO, get reset-gpio failed\n");
+		return pdata->reset_gpio;
+	}
+	pdata->irq_gpio = of_get_named_gpio_flags(np, "hynitron,irq-gpio",0, &pdata->irq_gpio_flags);
+	if (pdata->irq_gpio < 0)
+	{
+		printk("CST3XX Invalid GPIO, get irs-gpio failed\n");
+		return pdata->irq_gpio;
+	}
+    if (!gpio_is_valid(pdata->irq_gpio) || !gpio_is_valid(pdata->reset_gpio)) {
+        printk("Invalid GPIO, irq-gpio:%d, rst-gpio:%d",
+            pdata->irq_gpio, pdata->reset_gpio);
+        return -EINVAL;
+    }
+    return 0;
+
+}
+
+static int cst3xx_tpd_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{	
+	int ret;
+
+	struct cst3xx_ts_platform_data *pdata;
+    struct cst3xx_ts_data *ts;
+
+#ifdef GTP_HAVE_TOUCH_KEY
+    s32 idx = 0;
+#endif
+	
+    printk(" linc hyn is entering tpd_i2c_probe. \n");
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,sizeof(struct cst3xx_ts_platform_data), GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev,"cst3xx Failed to allocate memory for pdata\n");
+			return -ENOMEM;
+		}
+
+		ret = cst3xx_parse_dt(&client->dev,pdata);
+		if (ret)
+			return ret;
+	} else {
+		pdata = client->dev.platform_data;
+	}
+	if (!pdata) {
+		dev_err(&client->dev, "cst3xx invalid pdata\n");
+		return -EINVAL;
+	}
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+    {
+        printk("I2C check functionality failed.");
+        return -ENODEV;
+    }
+    ts = kzalloc(sizeof(*ts), GFP_KERNEL);
+    if (ts == NULL)
+    {
+        printk("Alloc GFP_KERNEL memory failed.");
+        return -ENOMEM;
+    }
+
+	if(client->addr != 0x1A)
+	{
+		client->addr = 0x1A;
+		printk("i2c_client_HYN->addr=%d.\n",client->addr);
+	}
+
+ 	memset(ts, 0, sizeof(*ts));
+	INIT_WORK(&ts->work, cst3xx_touch_report);
+	ts->client = client;
+	ts->pdata = pdata;
+	i2c_set_clientdata(client,ts);
+
+	spin_lock_init(&ts->irq_lock);//(&irq_lock);
+	mutex_init(&ts->lock);
+	g_i2c_client = client;
+
+ 	 ts->avdd = regulator_get(&ts->client->dev, "vdd_ana");
+	 if (IS_ERR(ts->avdd)) {
+		 ret = PTR_ERR(ts->avdd);
+		 ts->avdd=NULL;
+		 dev_info(&ts->client->dev,"Regulator get failed avdd ret=%d\n", ret);
+	 }
+
+	 ts->vcc_i2c = regulator_get(&ts->client->dev, "vcc_i2c");
+	 if (IS_ERR(ts->vcc_i2c)) {
+		 ret = PTR_ERR(ts->vcc_i2c);
+		 ts->vcc_i2c=NULL;
+		 dev_info(&ts->client->dev,"Regulator get failed vcc_i2c ret=%d\n", ret);
+	 }
+	ret = regulator_enable(ts->avdd);
+	if(ret)
+	{
+		printk("GTP enable vdd_ana failed\n");
+		return ret;
+	}
+	mdelay(2);
+	ret = regulator_enable(ts->vcc_i2c);
+	if(ret)
+	{
+		printk("GTP enable vcc_i2c failed\n");
+		return ret;
+	}
+
+	
+	cst3xx_reset_ic(30);
+
+
+	ret = cst3xx_i2c_test(client);
+	if (ret < 0) {
+		printk("linc cst3xx hyn i2c communication failed.\n");
+		return -1;
+	}
+	
+	mdelay(20);
+
+	ret = cst3xx_request_io_port(ts);
+	if (ret < 0) {
+		printk("cst3xx request IO port failed.");
+		return ret;
+	}
+
+
+	ret = cst3xx_request_input_dev(ts);
+	if (ret < 0) {
+		printk("cst3xxrequest input dev failed");
+	}
+
+	g_input_dev=ts->input_dev;
+
+	ret = cst3xx_request_irq(ts);
+	if (ret < 0) {
+		printk("cst3xx works in polling mode.");
+	} else {
+		printk("cst3xx works in interrupt mode.");
+	}
+
+
+	cst3xx_irq_enable(ts);
+
+
+#ifdef 	HYN_UPDATE_FIRMWARE_ONLINE
+
+#ifdef HYN_UPDATE_FORCE_ONLINE
+	ret = cst3xx_update_firmware(client, pcst3xx_update_firmware);
+	if (ret < 0){
+		printk("linc cst3xx [cst3xx] update firmware failed.\n");
+		return -1;
+	}
+#else
+	ret = hyn_boot_update_fw(client);
+	if(ret < 0){
+		printk("linc cst3xx hyn_boot_update_fw failed.\n");
+		return -1;
+	}
+
+#endif
+
+	
+#else
+	ret = cst3xx_firmware_info(client);
+	if(ret < 0){
+		printk("linc cst3xx cst3xx_firmware_info failed.\n");
+		return -1;
+	}
+#endif	
+
+#ifdef ANDROID_TOOL_SURPORT
+	ret = cst3xx_proc_fs_init();
+	if(ret < 0) {
+		printk("linc cst3xx hyn create cst3xx proc fs failed.\n");
+	}
+
+	memset(mtk_tp_version,0,128);
+    proc_create(PROC_TP_VERSION, 0, NULL, &tp_version_proc_fops1);
+#endif
+
+
+#ifdef HYN_GESTURE
+	enable_irq_wake(client->irq);
+#endif
+
+		
+#ifdef CONFIG_TP_ESD_PROTECT
+
+	cst3xx_esd_workqueue = create_singlethread_workqueue("cst2xx_esd_workqueue");
+	if (cst3xx_esd_workqueue == NULL)
+		printk("linc cst3xxcreate cst2xx_esd_workqueue failed!");
+
+#endif
+
+
+#ifdef GTP_HAVE_TOUCH_KEY
+    for (idx=0; idx<TPD_KEY_COUNT; idx++) {
+        input_set_capability(g_input_dev, EV_KEY, touch_key_array[idx]);
+    }
+#endif	
+
+
+#ifdef CONFIG_TP_ESD_PROTECT
+
+	cst3xx_init_esd_protect();
+	cst3xx_esd_switch(SWITCH_ESD_ON);
+
+#endif
+
+#ifdef HYN_GESTURE
+
+input_set_capability(g_input_dev, EV_KEY, KEY_POWER);
+input_set_capability(g_input_dev, EV_KEY, KEY_C);
+input_set_capability(g_input_dev, EV_KEY, KEY_M);
+input_set_capability(g_input_dev, EV_KEY, KEY_E);
+input_set_capability(g_input_dev, EV_KEY, KEY_O);
+input_set_capability(g_input_dev, EV_KEY, KEY_W);
+input_set_capability(g_input_dev, EV_KEY, KEY_S);
+input_set_capability(g_input_dev, EV_KEY, KEY_UP);
+input_set_capability(g_input_dev, EV_KEY, KEY_LEFT);
+input_set_capability(g_input_dev, EV_KEY, KEY_RIGHT);
+input_set_capability(g_input_dev, EV_KEY, KEY_DOWN);
+input_set_capability(g_input_dev, EV_KEY, KEY_U);
+
+
+	
+#endif
+
+	cst3xx_reset_ic(13);
+
+	g_ts=ts;
+
+	printk(" linc hyn is endding tpd_i2c_probe .\n");
+
+	return 0;
+}
+
+static int cst3xx_tpd_remove(struct i2c_client *client)
+{	
+	struct cst3xx_ts_data *ts;
+	printk(" linc cst3xx removed.\n");	
+	ts=i2c_get_clientdata(client);
+#ifdef HYN_GESTURE
+	disable_irq_wake(client->irq);
+#endif  
+
+#if defined(CONFIG_FB)
+	fb_unregister_client(&ts->fb_notif);
+#endif
+
+	if (cst3xx_wq) {
+		destroy_workqueue(cst3xx_wq);
+		}	
+	input_unregister_device(ts->input_dev);
+	if (gpio_is_valid(ts->pdata->irq_gpio))
+		gpio_free(ts->pdata->irq_gpio);
+	if (gpio_is_valid(ts->pdata->reset_gpio))
+		gpio_free(ts->pdata->reset_gpio);
+	if (ts->client&& ts->client->irq)
+		free_irq(ts->client->irq, ts->client);
+	//Erobbing add for distinguish resistance TP or not
+	return 0;
+	}
+static const struct i2c_device_id cst3xx_tpd_id[] = {{TPD_DRIVER_NAME,0},{}};
+
+static void cst3xx_enter_sleep(struct i2c_client *client)
+{
+	int ret;
+	int retry = 0;
+	unsigned char buf[2];
+
+    buf[0] = 0xD1;
+	buf[1] = 0x05;
+	while (retry++ < 5) {
+		ret = cst3xx_i2c_write(client, buf, 2);
+		if (ret > 0)
+			return;
+		mdelay(2);
+	}
+	
+	return;
+}
+
+
+
+static int cst3xx_resume(struct cst3xx_ts_data *ts)
+{
+#ifdef ICS_SLOT_REPORT
+	int idx;
+#endif	
+
+	printk(" linc cst3xx wake up.\n");	
+
+#ifdef SLEEP_CLEAR_POINT
+#ifdef ICS_SLOT_REPORT
+	for(idx=0; idx<=10; idx++) {	
+		input_mt_slot(g_input_dev, idx);
+		input_report_abs(g_input_dev, ABS_MT_TRACKING_ID, -1);
+		input_mt_report_slot_state(g_input_dev, MT_TOOL_FINGER, false);
+	}
+#else
+    input_report_key(g_input_dev, BTN_TOUCH, 0);
+	input_mt_sync(g_input_dev);
+#endif
+	input_sync(g_input_dev);	
+#endif	
+
+
+#ifdef HYN_GESTURE
+
+    if(hyn_ges_wakeup_switch == 1){
+        u8 buf[4];
+        //close gesture detect
+        buf[0] = 0xD0;
+		buf[1] = 0x4C;
+		buf[2] = 0x00;
+		cst3xx_i2c_write(g_i2c_client, buf, 3);
+        tpd_halt=0;
+		hyn_lcd_flag = 1;	
+		
+		printk(" linc tpd-gesture detect is closed .\n");
+       	
+    }
+	else
+#endif
+	
+	cst3xx_irq_enable(ts);
+	
+    cst3xx_firmware_info(g_i2c_client);
+
+
+#ifdef CONFIG_TP_ESD_PROTECT
+
+	cst3xx_esd_switch(SWITCH_ESD_ON);
+
+#endif
+	
+	cst3xx_reset_ic(30);
+
+	mdelay(200);
+	
+	printk(" linc cst3xx wake up done.\n");
+
+	return 0;
+
+}
+static int cst3xx_suspend(struct cst3xx_ts_data *ts)
+{
+
+#ifdef ICS_SLOT_REPORT
+	int idx;
+#endif
+
+	printk(" linc cst3xx enter sleep.\n");
+
+#ifdef HYN_GESTURE
+    if(hyn_ges_wakeup_switch == 1){  
+        
+		u8 buf[4];
+        hyn_lcd_flag = 0;
+        mdelay(10);			
+		tpd_halt=1;
+    
+        buf[0] = 0xD0;
+		buf[1] = 0x4C;
+		buf[2] = 0x80;
+		cst3xx_i2c_write(g_i2c_client, buf, 3);		
+		printk(" linc tpd-gesture detect is opened \n");
+		
+        mdelay(10);
+        return -1;
+    }
+#endif
+
+#ifdef CONFIG_TP_ESD_PROTECT
+
+	cst3xx_esd_switch(SWITCH_ESD_OFF);
+
+#endif
+
+    cst3xx_irq_disable(ts);
+
+
+#ifdef SLEEP_CLEAR_POINT
+	#ifdef ICS_SLOT_REPORT
+		for(idx=0; idx<=10; idx++) {	
+			input_mt_slot(g_input_dev, idx);
+			input_report_abs(g_input_dev, ABS_MT_TRACKING_ID, -1);
+			input_mt_report_slot_state(g_input_dev, MT_TOOL_FINGER, false);
+		}
+	#else
+	    input_report_key(g_input_dev, BTN_TOUCH, 0);
+		input_mt_sync(g_input_dev);
+	#endif
+		input_sync(g_input_dev);	
+#endif	
+
+    cst3xx_enter_sleep(g_i2c_client);
+	
+	printk(" linc cst3xx enter sleep done.\n");
+
+	return 0;
+
+}
+
+static const struct of_device_id tpd_of_match[] = {
+	{.compatible = "hynitron,cst1xx"},
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, tpd_of_match);
+
+
+static struct i2c_driver cst3xx_ts_driver = {
+
+  .driver = {
+    		.name = TPD_DRIVER_NAME,		
+#ifdef CONFIG_OF
+		   .of_match_table = of_match_ptr(tpd_of_match),
+#endif
+#if !defined(CONFIG_FB) && defined(CONFIG_PM)
+		   .pm = &cst3xx_ts_pm_ops,
+#endif
+  },
+  .probe    = cst3xx_tpd_probe,
+  .remove   = cst3xx_tpd_remove,
+  .id_table = cst3xx_tpd_id,
+};
+/* called when loaded into kernel */
+static int __init cst3xx_ts_init(void)
+{
+	printk(" linc hyn is entering cst3xx_ts_init.\n");
+
+	cst3xx_wq = create_singlethread_workqueue("cst3xx_wq");
+	if (!cst3xx_wq) {
+		printk("Creat workqueue failed.");
+		return -ENOMEM;
+	}
+	return i2c_add_driver(&cst3xx_ts_driver);
+}
+
+/* should never be called */
+static void __exit cst3xx_ts_exit(void)
+{
+	printk(" linc hyn is entering cst3xx_ts_exit.\n");
+	i2c_del_driver(&cst3xx_ts_driver);
+	if (cst3xx_wq) {
+		destroy_workqueue(cst3xx_wq);
+	}
+}
+
+module_init(cst3xx_ts_init);
+module_exit(cst3xx_ts_exit);
+MODULE_DESCRIPTION("GTP Series Driver");
+MODULE_LICENSE("GPL");
diff -Naur A/drivers/input/touchscreen/cst148/Kconfig B/drivers/input/touchscreen/cst148/Kconfig
--- A/drivers/input/touchscreen/cst148/Kconfig	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/input/touchscreen/cst148/Kconfig	2020-08-13 12:12:47.182889118 +0530
@@ -0,0 +1,15 @@
+#
+# Touchscreen driver configuration
+#
+
+config HYN_CST3XX_TOUCHSCREEN_SUPPORT
+	bool "hyn_cst3xx/cst1XX for touchscreen"
+	depends on TOUCHSCREEN_CST148
+	default n
+	help
+	Say Y here if you have hyn_cst148 touch panel GTP_POWER_CTRL_SLEEP.
+
+	If unsure, say N.
+
+	To compile this dirver as a module, choose M here: the
+	module will be called.
diff -Naur A/drivers/input/touchscreen/cst148/Makefile B/drivers/input/touchscreen/cst148/Makefile
--- A/drivers/input/touchscreen/cst148/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ B/drivers/input/touchscreen/cst148/Makefile	2020-08-13 12:12:47.182889118 +0530
@@ -0,0 +1,3 @@
+
+# Linux driver folder
+obj-$(CONFIG_HYN_CST3XX_TOUCHSCREEN_SUPPORT)	+= hyn_cst3xx.o 
diff -Naur A/drivers/input/touchscreen/Kconfig B/drivers/input/touchscreen/Kconfig
--- A/drivers/input/touchscreen/Kconfig	2020-08-13 11:41:42.670927085 +0530
+++ B/drivers/input/touchscreen/Kconfig	2020-08-13 12:12:47.182889118 +0530
@@ -227,6 +227,16 @@
 	  To compile this driver as a module, choose M here: the
 	  module will be called cy8ctmg110_ts.
 
+config TOUCHSCREEN_CST148
+	bool "Hynitron touchpanel CST148 series"
+	depends on I2C
+	help
+	  Say Y here if you have a Hynitron CST148 touchscreen.
+	  CST148 controllers are multi touch controllers which can
+	  report 5 touches at a time.
+
+	  If unsure, say N.
+
 config TOUCHSCREEN_CYTTSP_CORE
 	tristate "Cypress TTSP touchscreen"
 	help
@@ -1343,3 +1353,4 @@
 endif
 
 source "drivers/input/touchscreen/focaltech_touch/Kconfig"
+source "drivers/input/touchscreen/cst148/Kconfig"
diff -Naur A/drivers/input/touchscreen/Makefile B/drivers/input/touchscreen/Makefile
--- A/drivers/input/touchscreen/Makefile	2020-08-13 11:41:42.670927085 +0530
+++ B/drivers/input/touchscreen/Makefile	2020-08-13 12:12:47.182889118 +0530
@@ -114,3 +114,4 @@
 obj-$(CONFIG_TOUCHSCREEN_ROHM_BU21023)	+= rohm_bu21023.o
 obj-$(CONFIG_TOUCHSCREEN_RASPBERRYPI_FW)	+= raspberrypi-ts.o
 obj-$(CONFIG_TOUCHSCREEN_IQS5XX)	+= iqs5xx.o
+obj-$(CONFIG_TOUCHSCREEN_CST148)        += cst148/
diff -Naur A/drivers/media/platform/mxc/capture/ov5640_v2.c B/drivers/media/platform/mxc/capture/ov5640_v2.c
--- A/drivers/media/platform/mxc/capture/ov5640_v2.c	2020-08-13 11:41:43.438934953 +0530
+++ B/drivers/media/platform/mxc/capture/ov5640_v2.c	2020-08-13 12:12:47.182889118 +0530
@@ -121,7 +121,10 @@
  * Maintains the information on the current state of the sesor.
  */
 static struct ov5640 ov5640_data;
+#ifndef CONFIG_IWG27M
+        /* IWG27M: Disabling power down and reset gpios as current hardware does not support it */
 static int pwn_gpio, rst_gpio;
+#endif
 static int prev_sysclk;
 static int AE_Target = 52, night_mode;
 static int prev_HTS;
@@ -651,13 +654,18 @@
 
 static inline void ov5640_power_down(int enable)
 {
+#ifndef CONFIG_IWG27M
+        /* IWG27M: Disabling power down and reset gpios as current hardware does not support it */
 	gpio_set_value_cansleep(pwn_gpio, enable);
 
 	msleep(2);
+#endif
 }
 
 static inline void ov5640_reset(void)
 {
+#ifndef CONFIG_IWG27M
+        /* IWG27M: Disabling power down and reset gpios as current hardware does not support it */
 	/* camera reset */
 	gpio_set_value_cansleep(rst_gpio, 1);
 
@@ -671,6 +679,7 @@
 	gpio_set_value_cansleep(rst_gpio, 1);
 	msleep(5);
 	gpio_set_value_cansleep(pwn_gpio, 1);
+#endif
 }
 
 static int ov5640_regulator_enable(struct device *dev)
@@ -1777,6 +1786,8 @@
 		return PTR_ERR(pinctrl);
 	}
 
+#ifndef CONFIG_IWG27M
+        /* IWG27M: Disabling power down and reset gpios as current hardware does not support it */
 	/* request power down pin */
 	pwn_gpio = of_get_named_gpio(dev->of_node, "pwn-gpios", 0);
 	if (!gpio_is_valid(pwn_gpio)) {
@@ -1798,6 +1809,7 @@
 					"ov5640_reset");
 	if (retval < 0)
 		return retval;
+#endif
 
 	/* Set initial values for the sensor struct. */
 	memset(&ov5640_data, 0, sizeof(ov5640_data));
diff -Naur A/drivers/mtd/spi-nor/spi-nor.c B/drivers/mtd/spi-nor/spi-nor.c
--- A/drivers/mtd/spi-nor/spi-nor.c	2020-08-13 11:41:44.678947657 +0530
+++ B/drivers/mtd/spi-nor/spi-nor.c	2020-08-13 12:12:47.182889118 +0530
@@ -240,6 +240,11 @@
 
 #define JEDEC_MFR(info)	((info)->id[0])
 
+#ifdef CONFIG_IWG27M
+/* IWG27M:ISSI support customization */
+const struct flash_info *info_issi;
+#endif
+
 /**
  * spi_nor_spimem_xfer_data() - helper function to read/write data to
  *                              flash's memory region
@@ -2245,6 +2250,10 @@
 
 	/* ISSI */
 	{ "is25cd512",  INFO(0x7f9d20, 0, 32 * 1024,   2, SECT_4K) },
+#ifdef CONFIG_IWG27M
+	{ "is25wp016d", INFO(0x9d7015, 0, 64 * 1024, 32,
+			SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
+#endif
 	{ "is25lq040b", INFO(0x9d4013, 0, 64 * 1024,   8,
 			SECT_4K | SPI_NOR_DUAL_READ | SPI_NOR_QUAD_READ) },
 	{ "is25lp016d", INFO(0x9d6015, 0, 64 * 1024,  32,
@@ -3452,6 +3461,16 @@
 
 		erasesize = 1U << erasesize;
 		opcode = (half >> 8) & 0xff;
+#ifdef CONFIG_IWG27M
+		/* IWG27M:ISSI support customization */
+		if (!(JEDEC_MFR(info_issi) == SNOR_MFR_ISSI)) {
+			if (erasesize == SZ_4K) {
+				spi_nor_set_erase_settings_from_bfpt(&erase_type[i], erasesize,
+						opcode, i);
+				break;
+			}
+		}
+#endif
 		erase_mask |= BIT(i);
 		spi_nor_set_erase_settings_from_bfpt(&erase_type[i], erasesize,
 						     opcode, i);
@@ -4412,7 +4431,12 @@
 	case SNOR_MFR_MACRONIX:
 		macronix_set_default_init(nor);
 		break;
-
+#ifdef CONFIG_IWG27M
+		/* IWG27M:ISSI support customization */
+	case SNOR_MFR_ISSI:
+		info_issi = nor->info;
+		break;
+#endif
 	case SNOR_MFR_ST:
 	case SNOR_MFR_MICRON:
 		st_micron_set_default_init(nor);
diff -Naur A/drivers/soc/imx/soc-imx8.c B/drivers/soc/imx/soc-imx8.c
--- A/drivers/soc/imx/soc-imx8.c	2020-08-13 11:41:51.051012938 +0530
+++ B/drivers/soc/imx/soc-imx8.c	2020-08-17 16:06:33.248970450 +0530
@@ -15,6 +15,12 @@
 
 #include <soc/imx/src.h>
 
+#ifdef CONFIG_IWG27M
+#include <linux/of_gpio.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
+#endif
+
 #define REV_B1				0x21
 
 #define IMX8MQ_SW_INFO_B1		0x40
@@ -167,6 +173,160 @@
 	kasprintf(GFP_KERNEL, "%d.%d", (soc_rev >> 4) & 0xf,  soc_rev & 0xf) : \
 	"unknown"
 
+/* IWG27M: SOM Revision and BSP info */
+#ifdef CONFIG_IWG27M
+
+#define        BSP_VERSION             "iW-PRFHZ-SC-01-R4.0-REL0.1-Linux5.4.24"
+
+static int __init som_revision(void)
+{
+	struct device_node *np;
+	int i, val, err, pins_cnt;
+	unsigned *pins;
+	short revision = 0;
+
+	np = of_find_node_by_path("/iwg27m_common");
+	if (!np) {
+		pr_warn("failed to find iwg27m-com node\n");
+		revision =-1;
+		goto put_node;
+	}
+
+	/* Fill GPIO pin array */
+	pins_cnt = of_gpio_named_count(np, "som-rev-gpios");
+	if (pins_cnt <= 0) {
+		pr_warn("gpios DT property empty / missing\n");
+		revision =-1;
+		goto put_node;
+	}
+
+	pins = kzalloc(pins_cnt * sizeof(unsigned), GFP_KERNEL);
+	if (!pins) {
+		pr_warn("unable to allocate the memory\n");
+		revision =-1;
+		goto put_node;
+	}
+	for (i = 0; i < pins_cnt; i++) {
+
+		val = of_get_named_gpio(np, "som-rev-gpios",i);
+		if (val < 0) {
+			pr_warn("unable to get the gpio\n");
+			revision =-1;
+			goto entryfail;
+		}
+		pins[i] = val;
+	}
+
+	/* Request as a input GPIO and read the value */
+	for (i = 0; i < pins_cnt; i++) {
+		err = gpio_request(pins[i],"som-rev GPIO");
+		if (err){
+			pr_warn("unable to request for gpio\n");
+			revision =-1;
+			goto entryfail;
+		}
+
+		err = gpio_direction_input(pins[i]);
+		if (err) {
+			pr_warn("unable to set gpio as input\n");
+			revision =-1;
+			goto entryfail;
+		}
+
+		revision |= gpio_get_value(pins[i]) << i;
+		gpio_free(pins[i]);
+	}
+
+entryfail:
+	kfree(pins);
+put_node:
+	of_node_put(np);
+	return revision;
+}
+
+void print_board_info (void)
+{
+	int som_rev, pcb_rev, bom_rev;
+	som_rev = som_revision();
+
+	if (som_rev < 0) {
+		pcb_rev = 0;
+		bom_rev = 0;
+	} else {
+		pcb_rev = (((som_rev) & 0x30) >> 4) + 1 ;
+		bom_rev = ((som_rev) & 0x0F) ;
+	}
+
+	printk ("\n");
+	printk ("Board Info:\n");
+	printk ("\tBSP Version     : %s\n", BSP_VERSION);
+	printk ("\tSOM Version     : iW-PRFHZ-AP-01-R%x.%x\n", pcb_rev, bom_rev);
+	printk ("\n");
+
+}
+
+void __init imx8_iwg27m_wifi(void)
+{
+        struct device_node *np;
+        static int wifi_dev_gpio, wifi_host_gpio;
+        static int bt_dev_gpio, bt_host_gpio;
+        static int wl_en_gpio, bt_en_gpio;
+
+        np = of_find_node_by_path("/bus@5b000000/mmc@5b030000");
+        if (!np) {
+                printk("\n IWG failed to find SDHC3 node\n");
+                goto put_node;
+        }
+
+        wl_en_gpio = of_get_named_gpio(np, "wl-en-gpio", 0);
+        if (gpio_is_valid(wl_en_gpio) &&
+                        !gpio_request_one(wl_en_gpio, GPIOF_OUT_INIT_HIGH, "wl-en")) {
+
+                gpio_set_value(wl_en_gpio, 1);
+        }
+
+        bt_en_gpio = of_get_named_gpio(np, "bt-en-gpio", 0);
+        if (gpio_is_valid(bt_en_gpio) &&
+                        !gpio_request_one(bt_en_gpio, GPIOF_OUT_INIT_HIGH, "bt-en")) {
+
+                gpio_set_value(bt_en_gpio, 1);
+        }
+
+        wifi_host_gpio = of_get_named_gpio(np, "wifi-host-gpio", 0);
+        if (gpio_is_valid(wifi_host_gpio) &&
+                        !gpio_request_one(wifi_host_gpio, GPIOF_IN, "wifi_host")) {
+
+                gpio_direction_input(wifi_host_gpio);
+        }
+
+        wifi_dev_gpio = of_get_named_gpio(np, "wifi-dev-gpio", 0);
+
+        if (gpio_is_valid(wifi_dev_gpio) &&
+                        !gpio_request_one(wifi_dev_gpio, GPIOF_OUT_INIT_HIGH, "wifi_dev")) {
+
+                gpio_set_value(wifi_dev_gpio,1);
+        }
+
+        bt_host_gpio = of_get_named_gpio(np, "bt-host-gpio", 0);
+        if (gpio_is_valid(bt_host_gpio) &&
+                        !gpio_request_one(bt_host_gpio, GPIOF_IN, "bt_host")) {
+
+                gpio_direction_input(bt_host_gpio);
+        }
+
+        bt_dev_gpio = of_get_named_gpio(np, "bt-dev-gpio", 0);
+
+        if (gpio_is_valid(bt_dev_gpio) &&
+                        !gpio_request_one(bt_dev_gpio, GPIOF_OUT_INIT_HIGH, "bt_dev")) {
+
+                gpio_set_value(bt_dev_gpio,1);
+        }
+
+put_node:
+        of_node_put(np);
+}
+#endif
+
 static int __init imx8_soc_init(void)
 {
 	struct soc_device_attribute *soc_dev_attr;
@@ -180,6 +340,12 @@
 	if (!soc_dev_attr)
 		return -ENOMEM;
 
+#ifdef CONFIG_IWG27M
+        /* IWG27M: Board and BSP info Print */
+        print_board_info();
+        /* IWG27M: JODY-W2 WIFI-BT Power Sequence */
+	imx8_iwg27m_wifi();
+#endif
 	soc_dev_attr->family = "Freescale i.MX";
 
 	ret = of_property_read_string(of_root, "model", &soc_dev_attr->machine);
diff -Naur A/drivers/spi/spi-fsl-lpspi.c B/drivers/spi/spi-fsl-lpspi.c
--- A/drivers/spi/spi-fsl-lpspi.c	2020-08-13 11:41:51.071013144 +0530
+++ B/drivers/spi/spi-fsl-lpspi.c	2020-08-27 18:49:36.821023905 +0530
@@ -411,6 +411,12 @@
 		temp = CFGR1_MASTER;
 	else
 		temp = CFGR1_PINCFG;
+
+#ifdef CONFIG_IWG27M
+	/* IWG27M: LPSPI: Enable Chip Select Configuration */
+	temp |= CFGR1_PCSCFG;
+#endif
+
 	if (fsl_lpspi->config.mode & SPI_CS_HIGH)
 		temp |= CFGR1_PCSPOL;
 	writel(temp, fsl_lpspi->base + IMX7ULP_CFGR1);
@@ -888,11 +894,14 @@
 	controller->bus_num = pdev->id;
 	controller->slave_abort = fsl_lpspi_slave_abort;
 
+#ifndef CONFIG_IWG27M
+	/* IWG27M: Changing the order of SPI controller registration */
 	ret = devm_spi_register_controller(&pdev->dev, controller);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "spi_register_controller error.\n");
 		goto out_controller_put;
 	}
+#endif
 
 	if (!fsl_lpspi->is_slave) {
 		controller->cs_gpios = devm_kzalloc(&controller->dev,
@@ -975,6 +984,14 @@
 
 	if (ret < 0)
 		dev_err(&pdev->dev, "dma setup error %d, use pio\n", ret);
+#ifdef CONFIG_IWG27M
+	/* IWG27M: Changing the order of SPI controller registration */
+	ret = devm_spi_register_controller(&pdev->dev, controller);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "spi_register_controller error.\n");
+		goto out_controller_put;
+	}
+#endif
 
 	return 0;
 
diff -Naur A/drivers/usb/cdns3/core.c B/drivers/usb/cdns3/core.c
--- A/drivers/usb/cdns3/core.c	2020-08-13 11:41:51.951022158 +0530
+++ B/drivers/usb/cdns3/core.c	2020-08-13 12:12:47.186889042 +0530
@@ -30,7 +30,10 @@
 #include <linux/usb/phy.h>
 #include <linux/extcon.h>
 #include <linux/pm_runtime.h>
-
+#ifdef CONFIG_IWG27M
+#include <linux/of_gpio.h>
+#include <linux/gpio.h>
+#endif
 #include "cdns3-nxp-reg-def.h"
 #include "core.h"
 #include "host-export.h"
@@ -608,6 +611,10 @@
 	struct cdns3 *cdns;
 	void __iomem *regs;
 	int ret;
+#ifdef CONFIG_IWG27M
+	int rst_gpio;
+	struct device_node *np;
+#endif
 
 	cdns = devm_kzalloc(dev, sizeof(*cdns), GFP_KERNEL);
 	if (!cdns)
@@ -662,6 +669,31 @@
 		return PTR_ERR(regs);
 	cdns->otg_regs = regs;
 
+#ifdef CONFIG_IWG27M
+        /* IWG27M: USB: Enabling USB Power Enable Regulator */
+        np = of_find_compatible_node(NULL, NULL, "Cadence,usb3");
+        cdns->reg_vusb = devm_regulator_get(dev, "vusb");
+        if (PTR_ERR(cdns->reg_vusb) == -EPROBE_DEFER) {
+                return -EPROBE_DEFER;
+        } else if (PTR_ERR(cdns->reg_vusb) == -ENODEV) {
+                /* no vusb regulator is needed */
+                cdns->reg_vusb = NULL;
+	} else if (IS_ERR(cdns->reg_vusb)) {
+		if (PTR_ERR(cdns->reg_vusb) != -EPROBE_DEFER)
+			dev_err(dev,
+				"Get HSIC pad regulator error: %ld\n",
+				PTR_ERR(cdns->reg_vusb));
+		return PTR_ERR(cdns->reg_vusb);
+	}
+        mdelay(10);
+        ret = regulator_enable(cdns->reg_vusb);
+        if (ret) {
+                dev_err(cdns->dev,
+                                "Failed to enable vusb regulator, ret=%d\n", ret);
+                goto err0;
+        }
+#endif
+
 	mutex_init(&cdns->mutex);
 	ret = cdns3_get_clks(dev);
 	if (ret)
@@ -736,6 +768,11 @@
 	usb_phy_shutdown(cdns->usbphy);
 err1:
 	cdns3_disable_unprepare_clks(dev);
+#ifdef CONFIG_IWG27M
+err0:
+        regulator_disable(cdns->reg_vusb);
+#endif
+
 	return ret;
 }
 
@@ -757,6 +794,9 @@
 	cdns3_remove_roles(cdns);
 	usb_phy_shutdown(cdns->usbphy);
 	cdns3_disable_unprepare_clks(dev);
+#ifdef CONFIG_IWG27M
+        regulator_disable(cdns->reg_vusb);
+#endif
 
 	return 0;
 }
diff -Naur A/drivers/usb/cdns3/core.h B/drivers/usb/cdns3/core.h
--- A/drivers/usb/cdns3/core.h	2020-08-13 11:41:51.951022158 +0530
+++ B/drivers/usb/cdns3/core.h	2020-08-13 12:12:47.186889042 +0530
@@ -68,6 +68,7 @@
  * @extcon: Type-C extern connector
  * @extcon_nb: notifier block for Type-C extern connector
  * @role_switch_wq: work queue item for role switch
+ * @reg_vusb: regulator for enabling USB Hub
  * @in_lpm: the controller in low power mode
  * @wakeup_int: the wakeup interrupt
  * @mutex: the mutex for concurrent code at driver
@@ -90,6 +91,9 @@
 	struct extcon_dev *extcon;
 	struct notifier_block extcon_nb;
 	struct work_struct role_switch_wq;
+#ifdef CONFIG_IWG27M
+	struct regulator *reg_vusb;
+#endif
 	bool in_lpm;
 	bool wakeup_int;
 	struct mutex mutex;
diff -Naur A/drivers/usb/chipidea/core.c B/drivers/usb/chipidea/core.c
--- A/drivers/usb/chipidea/core.c	2020-08-13 11:41:51.955022199 +0530
+++ B/drivers/usb/chipidea/core.c	2020-08-13 12:12:47.186889042 +0530
@@ -62,6 +62,10 @@
 #include <linux/of.h>
 #include <linux/regulator/consumer.h>
 #include <linux/usb/ehci_def.h>
+#ifdef CONFIG_IWG27M
+#include <linux/of_gpio.h>
+#include <linux/gpio.h>
+#endif
 
 #include "ci.h"
 #include "udc.h"
@@ -539,6 +543,10 @@
 	struct ci_hdrc *ci = data;
 	irqreturn_t ret = IRQ_NONE;
 	u32 otgsc = 0;
+#ifdef CONFIG_IWG27M
+	int otg_pwr_gpio = 0, otg_id = 0;
+	struct device_node *np;
+#endif
 
 	if (ci->in_lpm) {
 		disable_irq_nosync(irq);
@@ -549,6 +557,22 @@
 
 	if (ci->is_otg) {
 		otgsc = hw_read_otgsc(ci, ~0);
+#ifdef CONFIG_IWG27M
+		/* IWG27M: Configuring OTG Over Current GPIO based on USB OTG_ID */
+		np = of_find_compatible_node(NULL, NULL, "fsl,imx8qm-usb");
+		if (np)
+			otg_pwr_gpio = of_get_named_gpio(np, "otg-pwr-gpio", 0);
+		else
+			pr_warn("\nError: Unable to get OTG pwr gpio input\n");
+
+		gpio_request_one(otg_pwr_gpio, GPIOF_DIR_OUT, "OTG_PWR");
+
+		otg_id = otgsc & OTGSC_ID;
+		if (otg_id == 0x100)
+			gpio_set_value(otg_pwr_gpio, 0);
+		else
+			gpio_set_value(otg_pwr_gpio, 1);
+#endif
 		if (ci_otg_is_fsm_mode(ci)) {
 			ret = ci_otg_fsm_irq(ci);
 			if (ret == IRQ_HANDLED)
diff -Naur A/drivers/video/fbdev/core/fbcon.c B/drivers/video/fbdev/core/fbcon.c
--- A/drivers/video/fbdev/core/fbcon.c	2020-08-13 11:41:52.327026011 +0530
+++ B/drivers/video/fbdev/core/fbcon.c	2020-08-13 12:12:47.186889042 +0530
@@ -82,6 +82,12 @@
 
 #include "fbcon.h"
 
+#ifdef CONFIG_IWG27M
+#include <drm/drm_mode.h>
+/* IWG27M: DRM: Store Display DRM connector type globally */
+extern int connect_type;
+#endif
+
 #ifdef FBCONDEBUG
 #  define DPRINTK(fmt, args...) printk(KERN_DEBUG "%s: " fmt, __func__ , ## args)
 #else
@@ -222,9 +228,15 @@
 	struct fbcon_ops *ops = info->fbcon_par;
 
 	if (!(info->flags & FBINFO_MISC_TILEBLITTING) &&
-	    ops->p->con_rotate < 4)
-		ops->rotate = ops->p->con_rotate;
-	else
+	    ops->p->con_rotate < 4) {
+#ifdef CONFIG_IWG27M
+		/* IWG27M: MIPI-DSI: Frame Buffer Rotation only for MIPI DSI Display */
+		if(connect_type == DRM_MODE_CONNECTOR_DSI)
+			ops->rotate = 2;
+		else
+#endif
+			ops->rotate = ops->p->con_rotate;
+	} else
 		ops->rotate = 0;
 }
 
diff -Naur A/include/drm/bridge/cdns-mhdp-common.h B/include/drm/bridge/cdns-mhdp-common.h
--- A/include/drm/bridge/cdns-mhdp-common.h	2020-08-13 11:41:53.335036336 +0530
+++ B/include/drm/bridge/cdns-mhdp-common.h	2020-08-27 18:40:19.910428006 +0530
@@ -696,6 +696,11 @@
 
 	int irq[IRQ_NUM];
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: HDMI-DDC: Workaround for R3.X SOM DDC IO Voltage level */
+	u8 no_edid;
+#endif
+
 	union {
 		struct _dp_data {
 			struct drm_dp_link	link;
diff -Naur A/include/linux/libata.h B/include/linux/libata.h
--- A/include/linux/libata.h	2020-08-13 11:41:53.487037893 +0530
+++ B/include/linux/libata.h	2020-08-13 12:12:47.186889042 +0530
@@ -1975,4 +1975,9 @@
 }
 #endif /* CONFIG_ATA_SFF */
 
+#ifdef CONFIG_IWG27M
+/* IWg27M: Added for SATA activity LED support */
+void imx8_iwg27m_sata_act_led_flip(int value);
+#endif
+
 #endif /* __LINUX_LIBATA_H__ */
diff -Naur A/include/linux/mtd/cfi.h B/include/linux/mtd/cfi.h
--- A/include/linux/mtd/cfi.h	2020-08-13 11:41:53.719040270 +0530
+++ B/include/linux/mtd/cfi.h	2020-08-13 12:12:47.186889042 +0530
@@ -363,6 +363,10 @@
 #define CFI_MFR_FUJITSU		0x0004
 #define CFI_MFR_HYUNDAI		0x00AD
 #define CFI_MFR_INTEL		0x0089
+#ifdef CONFIG_IWG27M
+/* IWG27M:ISSI support customization */
+#define CFI_MFR_ISSI            0x009D
+#endif
 #define CFI_MFR_MACRONIX	0x00C2
 #define CFI_MFR_NEC		0x0010
 #define CFI_MFR_PMC		0x009D
diff -Naur A/include/linux/mtd/spi-nor.h B/include/linux/mtd/spi-nor.h
--- A/include/linux/mtd/spi-nor.h	2020-08-13 11:41:53.723040311 +0530
+++ B/include/linux/mtd/spi-nor.h	2020-08-13 12:12:47.186889042 +0530
@@ -20,6 +20,10 @@
 #define SNOR_MFR_ATMEL		CFI_MFR_ATMEL
 #define SNOR_MFR_GIGADEVICE	0xc8
 #define SNOR_MFR_INTEL		CFI_MFR_INTEL
+#ifdef CONFIG_IWG27M
+/* IWG27M:ISSI support customization */
+#define SNOR_MFR_ISSI           CFI_MFR_ISSI
+#endif
 #define SNOR_MFR_ST		CFI_MFR_ST	/* ST Micro */
 #define SNOR_MFR_MICRON		CFI_MFR_MICRON	/* Micron */
 #define SNOR_MFR_MACRONIX	CFI_MFR_MACRONIX
diff -Naur A/net/wireless/core.c B/net/wireless/core.c
--- A/net/wireless/core.c	2020-08-13 11:41:55.495058464 +0530
+++ B/net/wireless/core.c	2020-08-13 12:12:47.186889042 +0530
@@ -864,8 +864,11 @@
 		 * VENDOR_CMD_RAW_DATA which is non-NULL) and also that
 		 * we have at least one of doit/dumpit.
 		 */
+#ifndef CONFIG_IWG27M
+		/* IWG27M: WIFI-BT: Workaround for WIFI firmware loading issue */
 		if (WARN_ON(!rdev->wiphy.vendor_commands[i].policy))
 			return -EINVAL;
+#endif
 		if (WARN_ON(!rdev->wiphy.vendor_commands[i].doit &&
 			    !rdev->wiphy.vendor_commands[i].dumpit))
 			return -EINVAL;
diff -Naur A/sound/soc/codecs/sgtl5000.c B/sound/soc/codecs/sgtl5000.c
--- A/sound/soc/codecs/sgtl5000.c	2020-08-13 11:41:56.247066168 +0530
+++ B/sound/soc/codecs/sgtl5000.c	2020-08-13 12:12:47.186889042 +0530
@@ -25,6 +25,14 @@
 #include <sound/soc.h>
 #include <sound/soc-dapm.h>
 #include <sound/initval.h>
+#ifdef CONFIG_IWG27M
+/* IWG27M: Audio: HeadPhone and Mic Detect Implementation */
+#include <linux/err.h>
+#include <linux/irq.h>
+#include <linux/io.h>
+#include <linux/of_gpio.h>
+#include <linux/gpio.h>
+#endif
 
 #include "sgtl5000.h"
 
@@ -77,6 +85,20 @@
 	{ SGTL5000_DAP_AVC_DECAY,		0x0050 },
 };
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: Audio: HeadPhone and Mic Detect Implementation */
+struct sh_sgtl5000_priv {
+	int hp_gpio;
+	int hp_active_low;
+	int mic_gpio;
+	int mic_active_low;
+	int hp_irq;
+	int mic_irq;
+};
+
+static struct sh_sgtl5000_priv card_priv;
+#endif
+
 /* AVC: Threshold dB -> register: pre-calculated values */
 static const u16 avc_thr_db2reg[97] = {
 	0x5168, 0x488E, 0x40AA, 0x39A1, 0x335D, 0x2DC7, 0x28CC, 0x245D, 0x2068,
@@ -285,6 +307,43 @@
 	return 0;
 }
 
+#ifdef CONFIG_IWG27M
+/* IWG27M: Audio: HeadPhone and Mic Detect Implementation */
+/*
+ *Headphone Detect Handler
+ */
+static irqreturn_t hp_handler(int irq, void *dev_id)
+{
+	struct sh_sgtl5000_priv *priv = &card_priv;
+	int hp_status;
+
+	hp_status = gpio_get_value(priv->hp_gpio) ? 1 : 0;
+	if (hp_status != priv->hp_active_low)
+		printk("Headphone is plugged\n");
+	else
+		printk("Headphone is unplugged\n");
+
+	return IRQ_RETVAL(1);
+}
+
+/*
+ *Microphone Detect handler
+ */
+static irqreturn_t mic_handler(int irq, void *dev_id)
+{
+	struct sh_sgtl5000_priv *priv = &card_priv;
+	int mic_status;
+
+	mic_status = gpio_get_value(priv->mic_gpio) ? 1 : 0;
+	if (mic_status != priv->mic_active_low)
+		printk("Microphone is plugged\n");
+	else
+		printk("Microphone is unplugged\n");
+
+	return IRQ_RETVAL(1);
+}
+#endif
+
 static int vag_and_mute_control(struct snd_soc_component *component,
 				 int event, int event_source)
 {
@@ -724,7 +783,12 @@
 
 	SOC_DOUBLE_TLV("Headphone Playback Volume",
 			SGTL5000_CHIP_ANA_HP_CTRL,
+#ifdef CONFIG_IWG27M
+/* IWG27M: Audio: Fix for increasing play back volume */
+                        1, 9,
+#else
 			0, 8,
+#endif
 			0x7f, 1,
 			headphone_volume),
 	SOC_SINGLE("Headphone Playback Switch", SGTL5000_CHIP_ANA_CTRL,
@@ -1461,6 +1525,14 @@
 	struct sgtl5000_priv *sgtl5000 = snd_soc_component_get_drvdata(component);
 	unsigned int zcd_mask = SGTL5000_HP_ZCD_EN | SGTL5000_ADC_ZCD_EN;
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: Audio: HeadPhone and Mic Detect Implementation */
+	int hp_status, mic_status;
+	struct sh_sgtl5000_priv *priv = &card_priv;
+	struct device_node *np;
+	np = of_find_compatible_node(NULL, NULL, "fsl,sgtl5000");
+#endif
+
 	/* power up sgtl5000 */
 	ret = sgtl5000_set_power_regs(component);
 	if (ret)
@@ -1508,6 +1580,36 @@
 	snd_soc_component_update_bits(component, SGTL5000_CHIP_ADCDAC_CTRL,
 		SGTL5000_DAC_MUTE_LEFT | SGTL5000_DAC_MUTE_RIGHT, 0);
 
+#ifdef CONFIG_IWG27M
+	/* IWG27M: Audio: HeadPhone and Mic Detect Implementation */
+
+	priv->hp_gpio = of_get_named_gpio_flags(np, "hp-det-gpios", 0,
+			(enum of_gpio_flags *)&priv->hp_active_low);
+	priv->mic_gpio = of_get_named_gpio_flags(np, "mic-det-gpios", 0,
+			(enum of_gpio_flags *)&priv->mic_active_low);
+
+	gpio_request(priv->hp_gpio, "HeadPhone-Detect");
+	gpio_direction_input(priv->hp_gpio);
+	priv->hp_irq = gpio_to_irq(priv->hp_gpio);
+	hp_status = gpio_get_value(priv->hp_gpio) ? 1 : 0;
+
+	ret=request_irq(priv->hp_irq,hp_handler, IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,"HeadPhone",0);
+	if (ret < 0) {
+		printk(KERN_ALERT "%s: request hp_irq failed with %d\n",__func__, ret);
+		free_irq(priv->hp_irq,0);
+	}
+
+	gpio_request(priv->mic_gpio, "Microphone-Detect");
+	gpio_direction_input(priv->mic_gpio);
+	priv->mic_irq = gpio_to_irq(priv->mic_gpio);
+	mic_status = gpio_get_value(priv->mic_gpio) ? 1 : 0;
+
+	ret=request_irq(priv->mic_irq,mic_handler,IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,"MicroPhone",0);
+	if (ret < 0) {
+		printk(KERN_ALERT "%s: request mic_irq failed with %d\n",__func__, ret);
+		free_irq(priv->mic_irq,0);
+	}
+#endif
 	return 0;
 
 err:
diff -Naur A/sound/soc/fsl/imx-sgtl5000.c B/sound/soc/fsl/imx-sgtl5000.c
--- A/sound/soc/fsl/imx-sgtl5000.c	2020-08-13 11:41:56.335067068 +0530
+++ B/sound/soc/fsl/imx-sgtl5000.c	2020-08-13 12:12:47.186889042 +0530
@@ -59,6 +59,10 @@
 	int int_port, ext_port;
 	int ret;
 
+#ifndef CONFIG_IWG27M
+	/* IWG27M: Audio: Since Audmux is not present in i.MX8,
+	 * Commented the below part
+	 */
 	ret = of_property_read_u32(np, "mux-int-port", &int_port);
 	if (ret) {
 		dev_err(&pdev->dev, "mux-int-port missing or invalid\n");
@@ -94,7 +98,7 @@
 		dev_err(&pdev->dev, "audmux external port setup failed\n");
 		return ret;
 	}
-
+#endif
 	ssi_np = of_parse_phandle(pdev->dev.of_node, "ssi-controller", 0);
 	codec_np = of_parse_phandle(pdev->dev.of_node, "audio-codec", 0);
 	if (!ssi_np || !codec_np) {
